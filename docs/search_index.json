[["index.html", "MNet Manual 1 OVERVIEW", " MNet Manual 2025-03-20 1 OVERVIEW MNet features a built-in knowledgebase, dbMNet which is manually curated and provides information on metabolomics, including almost all currently available human metabolic interactions (gene-metabolite and metabolite-metabolite). Grounded in this knowledgebase, MNet offers one subnetwork analyser (sNETlyser) and three extended pathway analysers (ePEAlyser, ePDAlyser, and eSEAlyser) for user-input metabolomic and transcriptomic data. Motivation Advance since any previous publication (if relevant): Integration of metabolomic and transcriptomic data is vital for pathway-centric, systems-biology understandings of disease (Nucleic Acids Research 2022 and Communications Biology 2023). Existing pathway knowledgebases, including but not limited to BiGG (Nucleic Acids Research 2020), KEGG (Nucleic Acids Research 2023), Reactome (Nucleic Acids Research 2024), SMPDB (Nucleic Acids Research 2014), and WikiPathways (Nucleic Acids Research 2024), provide metabolic pathway information on genes and metabolites. However, these databases lack the comprehensive integration of both metabolites and genes necessary for downstream pathway and subnetwork analyses, thereby limiting the exploration of potential therapeutic targets from a metabolomic perspective. Our well-established algorithm/tool called ‘dnet’ and its related software(Genome Medicine 2014, Genome Medicine 2016 and Nature Genetics 2019) have received nearly 400 citations over time (AS OF October 2024 according to Google Scholar). They excel at identifying core subnetwork using prior knowledge but has been limited to genomic or transcriptomic challenges, without extending its application to metabolomics. In this aspect, MNet supports pathway-centric, network-driven analyses, enabling by the compilation of the dbMNet knowledgebase, which includes dbKEGG and dbNet. The dbKEGG facilitates KEGG metabolic pathway-based extended pathway analysis to identify dysregulated metabolic pathways involving both metabolites and genes. The dbNet enhances metabolism-related subnetwork analysis by leveraging gene-metabolite and metabolite-metabolite information to identify subnetwork that best explain the input data. Browser compatibility Table 1.1: A summary of the MNet browser compatibility. MacOS (Big Sur) Windows (10) Safari 17.4.1 N/A Edge N/A 108.0.1462.54 Chrome 108.0.5359.124 108.0.5359.124 "],["web-server-manual.html", "2 Web Server Manual 2.1 Metabolic Subnetwork Analyser 2.2 Extended Pathway Analyses 2.3 Construction of Knowledgebase dbMNet 2.4 Deployment", " 2 Web Server Manual 2.1 Metabolic Subnetwork Analyser The metabolism-related subnetwork analysis is executed through an analyzer specifically designed to identify subnetwork based on input gene- and metabolite-level summary data. 2.1.1 sNETlyser 2.1.1.1 Interface Procedure Step 1: Enter Metabolite Data, GeneExp Data and Group Data, respectively. Step 2: Select Nodes Number. In R network analysis, nodes number refers to the total count of nodes, representing individual elements or entities within the network. Step 3: Select Figure Format and adjust figure width, height and DPI. Step 4: Click the User panel to view the input and output, and finally click Figure Download and export the analysis results. Demo data Input Expand the Demo Panel and click Metabolic Data to download demo data, which comprises an integrated analysis of metabolomic and transcriptomic profiles in triple-negative breast cancer. Metabolite Data: an interactive table for user-input metabolic data with rows corresponding to metabolites and columns corresponding to samples. Gene Data: an interactive table for user-input metabolic data with rows corresponding to genes and columns correspond to the samples. Group Data: Group information. 2.1.1.2 Output Nodes Data: Nodes of subnetworks. Edges Data: Edges of subnetworks. Subnetwork Plot: A core metabolite-gene subnetwork can be downloaded as a PDF or JPEG file with specified width, height, and dpi setting. Figure 1. Visualization of the identified optimal subnetwork that best explains the biological processes comparing two groups. The colors represent the logFC (logarithm of fold change) of genes, with red and green indicating different expression levels, while yellow and blue represent the logFC of metabolites, indicating varying levels. 2.2 Extended Pathway Analyses 2.2.1 ePEAlyser Extended pathway enrichment analysis 2.2.1.1 Interface Procedure Step 1: Enter Metabolite Data, GeneExp Data and Group Data, respectively. Step 2: Select Log(FoldChange), Padjust Cutoff and Pathway Pcutoff, respectively. Fold change: Identifies key metabolites with significant expression shifts between conditions, revealing potential metabolic alterations and pathway involvement in biological processes. Padjust Cutoff: Helps filter significant results by controlling for false positives, ensuring that only statistically robust pathways are identified for further investigation. Pathway Pcutoff: Sets a significance threshold, helping to identify pathways with meaningful changes while reducing the likelihood of false-positive findings. Step 3: Select Figure Format and adjust figure width, height and DPI. Step 4: Click the User panel to view the input and output, and finally click Figure Download and export the analysis results. Demo data Input Expand the Demo Panel and click Metabolic Data to download demo data, which comprises an integrated analysis of metabolomic and transcriptomic profiles in triple-negative breast cancer. Metabolite Data: an interactive table for user-input metabolic data with rows corresponding to metabolites and columns corresponding to samples. Gene Data: an interactive table for user-input metabolic data with rows corresponding to genes and columns correspond to the samples. Group Data: Group information. 2.2.1.2 Output Up ePEA Terms: Up-regulated pathways. Down ePEA Terms: Down-regulated pathways. ePEA Plot: Bar plot illustrating enriched pathways are available, and can be downloaded as a PDF or JPEG file with specified width, height, and dpi settings. Figure 1. Extended pathway enrichment analysis. (A) Barplot of up-regulated metabolic pathways corresponding to metabolites and genes. (B) Barplot of down-regulated metabolic pathways corresponding to metabolites and genes. 2.2.2 ePDAlyser Extended pathway differential abundance (ePDA) score 2.2.2.1 Interface Procedure Step 1: Enter Metabolite Data, GeneExp Data and Group Data, respectively. Step 2: Select Log(FoldChange) and Padjust Cutoff, respectively. Fold change: Identifies key metabolites with significant expression shifts between conditions, revealing potential metabolic alterations and pathway involvement in biological processes. Padjust Cutoff: Helps filter significant results by controlling for false positives, ensuring that only statistically robust pathways are identified for further investigation. Step 3: Select Figure Format and adjust figure width, height and DPI. Step 4: Click the User panel to view the input and output, and finally click Figure Download and export the analysis results. Demo data Input Expand the Demo Panel and click Metabolic Data to download demo data, which comprises an integrated analysis of metabolomic and transcriptomic profiles in triple-negative breast cancer. Metabolite Data: an interactive table for user-input metabolic data with rows corresponding to metabolites and columns corresponding to samples. Gene Data: an interactive table for user-input metabolic data with rows corresponding to genes and columns correspond to the samples. Group Data: Group information. 2.2.2.2 Output ePDA Terms: Result of ePDA analysis. ePDA Plot: A DAscore plot captures the tendency for a pathway, and can be downloaded as a PDF or JPEG file with specified width, height, and dpi settings. Figure 1. ePDA score captures the tendency for a pathway to exhibit increased or decreased levels of genes and metabolites that are statistically significant differences between two group. 2.2.3 eSEAlyser Extended pathway set enrichment analysis 2.2.3.1 Interface Procedure Step 1: Enter Metabolite Data, GeneExp Data and Group Data, respectively. Step 2: Enter interested Pathway Name. Step 3: Select Figure Format and adjust figure width, height and DPI. Step 4: Click the User panel to view the input and output, and finally click Figure Download and export the analysis results. Demo data Input Expand the Demo Panel and click Metabolic Data to download demo data, which comprises an integrated analysis of metabolomic and transcriptomic profiles in triple-negative breast cancer. Metabolite Data: an interactive table for user-input metabolic data with rows corresponding to metabolites and columns corresponding to samples. Gene Data: an interactive table for user-input metabolic data with rows corresponding to genes and columns correspond to the samples. Group Data: Group information. 2.2.3.2 Output eSEA Terms: Result of eSEA analysis. eSEA Plot: Result of pathway set enrichment analysis can be downloaded as a PDF or JPEG file with specified width, height, and dpi settings. Figure 1. Extended pathway set enrichment analysis. Intested Plot: Result of interested pathway set enrichment analysis can be downloaded as a PDF or JPEG file with specified width, height, and dpi settings. 2.3 Construction of Knowledgebase dbMNet Knowledgebase - dbMNet: dbKEGG for extended pathway analysis and dbNet for metabolism-related subnetwork analysis The construction may takes more than 60 hours. 2.3.1 dbKEGG dbKEGG for extended pathway analysis 2.3.1.1 KEGG pathway’s metabolite and gene This is the metabolites and the genes in every metabolism KEGG pathway. library(KEGGREST) library(dplyr) ## All human metabolic pathways pathway_meta &lt;- data.table::fread(&quot;input/pathway_hsa.txt&quot;,sep=&quot;\\t&quot;,header=F) %&gt;% as.data.frame() ## Extract corresponding genes and metabolites for each pathway result_gene &lt;- data.frame() result_compound &lt;- data.frame() for (i in 1:length(pathway_meta$V2)){ print(pathway_meta$V2[i]) path &lt;- keggGet(pathway_meta$V2[i]) ## Extract the genetic information of this pathway gene.info &lt;- path[[1]]$GENE %&gt;% as.data.frame() %&gt;% dplyr::rename(&quot;V1&quot;=&quot;.&quot;) %&gt;% tidyr::separate(V1,sep=&quot;;&quot;,&quot;V1&quot;) %&gt;% dplyr::pull(V1) ## Extract gene symbols from genes gene.symbol &lt;- unique(gene.info[1:length(gene.info)%%2 == 0]) #gene.id &lt;- gene.info[1:length(gene.info)%%2 == 1] ## Generate a data frame matching gene symbol and Entrez ID gene.df &lt;- data.frame(type=&quot;gene&quot;,name = gene.symbol,kegg_pathwayid=pathway_meta$V2[i],kegg_pathwayname=path[[1]]$PATHWAY_MAP,kegg_category =pathway_meta$V1[i]) result_gene &lt;- rbind(result_gene,gene.df) ## Extract metabolite information for this pathway if (length(path[[1]]$COMPOUND)&gt;0) { compound.info &lt;- path[[1]]$COMPOUND %&gt;% as.data.frame() %&gt;% dplyr::rename(&quot;V1&quot;=&quot;.&quot;) %&gt;% rownames() ## Generate compound and corresponding pathway information compound.df &lt;- data.frame(type=&quot;metabolite&quot;,name = compound.info,kegg_pathwayid=pathway_meta$V2[i],kegg_pathwayname=path[[1]]$PATHWAY_MAP,kegg_category =pathway_meta$V1[i]) result_compound &lt;- rbind(result_compound,compound.df) } } result &lt;- rbind(result_gene,result_compound) %&gt;% as_tibble() dim(result) write.table(result,&quot;result/KEGGpathway_metabolite_gene.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) 2.3.2 dbNet dbNet for metabolism-related subnetwork analysis 2.3.2.1 KEGG metabolite-metabolite pairs and metabolite-gene pairs KEGG’s reaction and compound’s download library(KEGGREST) library(plyr) source(&quot;input/get.kegg.all.R&quot;) source(&quot;input/get.kegg.byId.R&quot;) ## Metabolic reactions and metabolite annotation information in the KEGG database keggAll = get.kegg.all() saveRDS(keggAll, file = &quot;result/keggAll.RDS&quot;) dim(keggAll$reaction) dim(keggAll$compound) write.csv(keggAll$reaction,file = &quot;result/keggAllreaction.csv&quot;,row.names = F) write.csv(keggAll$compound,file = &quot;result/keggAllcompound.csv&quot;,row.names = F) Downloading the enzyme and its corresponding gene information from the htext,and extract the gene and the enzyme’s relationship ## Download the htext file. curl https://www.genome.jp/kegg-bin/get_htext?hsa01000 -o result/hsa01000.keg grep &quot;^E&quot; result/hsa01000.keg | sed &#39;s/E //g&#39;|cut -d&quot; &quot; -f2 |cut -d&quot;;&quot; -f1 &gt;result/gene.txt ###sed &#39;s/\\[EC\\:/ /g&#39; is followed by a tab character grep &quot;^E&quot; result/hsa01000.keg | sed &#39;s/E //g&#39;|sed &#39;s/\\[EC\\:/ /g&#39; |sed &#39;s/\\] //g&#39; |cut -f3 &gt;result/enzyme.txt paste result/gene.txt result/enzyme.txt |grep -v &quot;D-dopachrome&quot; |grep -v &quot;cytochrome&quot;|grep -v &quot;putative&quot; &gt;result/gene_enzyme.txt ## The gene_enzyme.txt is like this: ADH5^I1.1.1.284 1.1.1.1$ ADH1A^I1.1.1.1$ Extracting the metabolite-gene pairs and metabolite-metabolite pairs library(dplyr) ## Transformed the enzyme and its corresponding gene to one-to-one relationship gene_enzyme &lt;- data.table::fread(&quot;result/gene_enzyme.txt&quot;,header=F) %&gt;% as.data.frame() %&gt;% tidyr::separate_rows(&quot;V2&quot;,sep=&quot; &quot;) %&gt;% unique() %&gt;% dplyr::rename(&quot;gene_name&quot;=&quot;V1&quot;) %&gt;% dplyr::rename(&quot;enzyme&quot;=&quot;V2&quot;) ## All the reaction in kegg a &lt;- read.csv(&quot;result/keggAllreaction.csv&quot;) # Get all the metabolite and its corresponding gene from all the reaction in kegg ## The metabolite-gene pairs are exacted from every compound in the equation and the gene with the enzyme metabolite_gene &lt;- a %&gt;% dplyr::select(c(&quot;EQUATION&quot;,&quot;ENZYME&quot;)) %&gt;% tidyr::separate_rows(EQUATION,sep=&quot; &lt;=&gt; &quot;) %&gt;% tidyr::separate_rows(EQUATION,sep=&quot; &quot;) %&gt;% dplyr::filter(grepl(&quot;^C&quot;,EQUATION)) %&gt;% tidyr::separate_rows(ENZYME,sep=&quot;///&quot;) %&gt;% dplyr::rename(&quot;compound&quot;=&quot;EQUATION&quot;) %&gt;% dplyr::rename(&quot;enzyme&quot;=&quot;ENZYME&quot;) %&gt;% dplyr::left_join(gene_enzyme,by=&quot;enzyme&quot;) %&gt;% dplyr::filter(!is.na(gene_name)) %&gt;% dplyr::select(-&quot;enzyme&quot;) %&gt;% dplyr::mutate(compound=gsub(&quot;[(]n[)]&quot;,&quot;&quot;,compound)) %&gt;% dplyr::mutate(compound=gsub(&quot;[(]m[)]&quot;,&quot;&quot;,compound)) %&gt;% dplyr::mutate(compound=gsub(&quot;[(]n[+]1[)]&quot;,&quot;&quot;,compound)) %&gt;% dplyr::mutate(compound=gsub(&quot;[(]n[+]m[)]&quot;,&quot;&quot;,compound)) %&gt;% dplyr::mutate(compound=gsub(&quot;[(]n[-]1[)]&quot;,&quot;&quot;,compound)) %&gt;% unique() %&gt;% dplyr::mutate(src_type=&quot;metabolite&quot;) %&gt;% dplyr::mutate(dest_type=&quot;gene&quot;) %&gt;% dplyr::rename(&quot;src&quot;=&quot;compound&quot;) %&gt;% dplyr::rename(&quot;dest&quot;=&quot;gene_name&quot;) %&gt;% dplyr::select(c(&quot;src_type&quot;,&quot;src&quot;,&quot;dest_type&quot;,&quot;dest&quot;)) # Get all the metabolite-metabolite pairs in the reactions ## Get the metabolite from the EQUATION, the metabolite-metabolite pairs are exacted from every compound in left of equation and every compound in right of equation. metabolite_metabolite &lt;- a %&gt;% dplyr::select(c(&quot;EQUATION&quot;,&quot;ENZYME&quot;)) %&gt;% tidyr::separate(EQUATION,c(&quot;a&quot;,&quot;b&quot;),sep=&quot; &lt;=&gt; &quot;)%&gt;% tidyr::separate_rows(a,sep=&quot; &quot;) %&gt;% tidyr::separate_rows(b,sep=&quot; &quot;) %&gt;% dplyr::filter(grepl(&quot;^C&quot;,a)) %&gt;% dplyr::filter(grepl(&quot;^C&quot;,b)) %&gt;% dplyr::select(c(&quot;a&quot;,&quot;b&quot;)) %&gt;% unique() %&gt;% dplyr::mutate(metabolite_1=gsub(&quot;[(]n[)]&quot;,&quot;&quot;,a)) %&gt;% dplyr::mutate(metabolite_1=gsub(&quot;[(]n[+]m[)]&quot;,&quot;&quot;,metabolite_1)) %&gt;% dplyr::mutate(metabolite_1=gsub(&quot;[(]side&quot;,&quot;&quot;,metabolite_1)) %&gt;% dplyr::mutate(metabolite_1=gsub(&quot;[(]m[+]n[)]&quot;,&quot;&quot;,metabolite_1)) %&gt;% dplyr::mutate(metabolite_1=gsub(&quot;[(]n[+]1[)]&quot;,&quot;&quot;,metabolite_1)) %&gt;% dplyr::mutate(metabolite_1=gsub(&quot;[(]m[)]&quot;,&quot;&quot;,metabolite_1)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]n[)]&quot;,&quot;&quot;,b)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]n[+]m[)]&quot;,&quot;&quot;,metabolite_2)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]side&quot;,&quot;&quot;,metabolite_2)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]m[+]n[)]&quot;,&quot;&quot;,metabolite_2)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]n[+]1[)]&quot;,&quot;&quot;,metabolite_2)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]m[)]&quot;,&quot;&quot;,metabolite_2)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]n[-]1[)]&quot;,&quot;&quot;,metabolite_2)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]x[)]&quot;,&quot;&quot;,metabolite_2)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]n[-]x[)]&quot;,&quot;&quot;,metabolite_2)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]n[+]2[)]&quot;,&quot;&quot;,metabolite_2)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]m[-]1[)]&quot;,&quot;&quot;,metabolite_2)) %&gt;% dplyr::select(-c(&quot;a&quot;,&quot;b&quot;)) %&gt;% dplyr::filter(metabolite_1 != metabolite_2) %&gt;% dplyr::mutate(src_type=&quot;metabolite&quot;) %&gt;% dplyr::mutate(dest_type=&quot;metabolite&quot;) %&gt;% dplyr::rename(&quot;src&quot;=&quot;metabolite_1&quot;) %&gt;% dplyr::rename(&quot;dest&quot;=&quot;metabolite_2&quot;) %&gt;% dplyr::select(c(&quot;src_type&quot;,&quot;src&quot;,&quot;dest_type&quot;,&quot;dest&quot;)) write.table(metabolite_gene,&quot;result/KEGG_metabolite_gene.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) write.table(metabolite_metabolite,&quot;result/KEGG_metabolite_metabolite.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) 2.3.2.2 Graphite Download all the data from graphite library(graphite) library(clipper) library(dplyr) kpaths &lt;- pathways(&quot;hsapiens&quot;, &quot;kegg&quot;) kpaths_result &lt;- data.frame() for (i in 1:length(kpaths)) { kid &lt;- attributes(kpaths[[i]])$id ktitle &lt;- attributes(kpaths[[i]])$title kpaths_1 &lt;- convertIdentifiers(convertIdentifiers(kpaths[[i]], &quot;symbol&quot;),&quot;KEGGCOMP&quot;) kpaths_result_temp &lt;- edges(kpaths_1,&quot;mixed&quot;) %&gt;% dplyr::mutate(pathwayid=kid) %&gt;% dplyr::mutate(pathway=ktitle) kpaths_result &lt;- rbind(kpaths_result,kpaths_result_temp) } write.table(kpaths_result,&quot;result/Graphite/gene-metabolite-kegg.txt&quot;,quote=F,sep=&quot;\\t&quot;,row.names=F) spaths &lt;- pathways(&quot;hsapiens&quot;, &quot;smpdb&quot;) smpdb_result &lt;- data.frame() for (i in 1:length(spaths)) { kid &lt;- attributes(spaths[[i]])$id ktitle &lt;- attributes(spaths[[i]])$title smpdb_1 &lt;- convertIdentifiers(convertIdentifiers(spaths[[i]], &quot;symbol&quot;),&quot;KEGGCOMP&quot;) smpdb_result_temp &lt;- edges(smpdb_1, &quot;mixed&quot;) %&gt;% dplyr::mutate(pathwayid=kid) %&gt;% dplyr::mutate(pathway=ktitle) smpdb_result &lt;- rbind(smpdb_result,smpdb_result_temp) } write.table(smpdb_result,&quot;result/Graphite/gene-metabolite-smpdb.txt&quot;,quote=F,sep=&quot;\\t&quot;,row.names=F) wikipaths &lt;- pathways(&quot;hsapiens&quot;, &quot;wikipathways&quot;) wikipaths_result &lt;- data.frame() for (i in 1:length(wikipaths)) { kid &lt;- attributes(wikipaths[[i]])$id ktitle &lt;- attributes(wikipaths[[i]])$title wikipaths_1 &lt;- convertIdentifiers(convertIdentifiers(wikipaths[[i]], &quot;symbol&quot;),&quot;KEGGCOMP&quot;) wikipaths_result_temp &lt;- edges(wikipaths_1,&quot;mixed&quot;) %&gt;% dplyr::mutate(pathwayid=kid) %&gt;% dplyr::mutate(pathway=ktitle) wikipaths_result &lt;- rbind(wikipaths_result,wikipaths_result_temp) } write.table(wikipaths_result,&quot;result/Graphite/gene-metabolite-wikipaths.txt&quot;,quote=F,sep=&quot;\\t&quot;,row.names=F) reactomepaths &lt;- pathways(&quot;hsapiens&quot;, &quot;reactome&quot;) reactome_result &lt;- data.frame() for (i in 1:length(reactomepaths)) { kid &lt;- attributes(reactomepaths[[i]])$id ktitle &lt;- attributes(reactomepaths[[i]])$title reactome_1 &lt;- convertIdentifiers(convertIdentifiers(reactomepaths[[i]], &quot;symbol&quot;),&quot;KEGGCOMP&quot;) reactome_result_temp &lt;- edges(reactome_1,&quot;mixed&quot;) %&gt;% dplyr::mutate(pathwayid=kid) %&gt;% dplyr::mutate(pathway=ktitle) reactome_result &lt;- rbind(reactome_result,reactome_result_temp) } write.table(reactome_result,&quot;result/Graphite/gene-metabolite-reactome.txt&quot;,quote=F,sep=&quot;\\t&quot;,row.names=F) Download the information of metabolism pathways Download all gpml files of homo-species from Wikipathway and extract the file names ## Wikipathway wget https://data.wikipathways.org/current/gpml/wikipathways-20241010-gpml-Homo_sapiens.zip ls wikipathways-20241010-gpml-Homo_sapiens/* &gt;all.txt rev all.txt|cut -d&quot;_&quot; -f2|rev &gt;all.1.txt cat /dev/null &gt; test.txt if (0) { cat all.1.txt |while read line do grep TERM homo/*${line}_*.gpml |cut -d&quot;&gt;&quot; -f2|cut -d&quot;&lt;&quot; -f1| tr -s &quot;\\n&quot; &quot;;&quot;|sed -e &#39;s/;$//g&#39; | sed &quot;s/^/${line} /&quot; &gt;&gt;test.txt done grep -i metabolic test.txt &gt;test_metabolic.txt } cat all.1.txt | while read line do grep TERM homo/*${line}_*.gpml | cut -d&quot;&gt;&quot; -f2 | cut -d&quot;&lt;&quot; -f1 | tr &#39;\\n&#39; &#39;;&#39; | sed -e &#39;s/;$//&#39; | sed &quot;s/^/${line} /&quot; &gt;&gt; test.txt done grep -i metabolic test.txt &gt;test_metabolic.txt ## SMPDB wget https://smpdb.ca/downloads/smpdb_pathways.csv.zip ## Reactome R-HSA-1430728 is the metabolism, then choose the hierarchical is lower than it wget https://reactome.org/download/current/ReactomePathwaysRelation.txt ## KEGG #choose the metabolism pathway Extract the data of metabolism library(dplyr) library(MNet) kegg_data_metabolism &lt;- data.table::fread(&quot;result/Graphite/gene-metabolite-kegg.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::filter(pathway %in% unique(kegg_pathway$PATHWAY)) %&gt;% dplyr::select(-c(&quot;direction&quot;,&quot;type&quot;)) %&gt;% unique() %&gt;% dplyr::filter(src_type ==&quot;KEGGCOMP&quot; | dest_type==&quot;KEGGCOMP&quot;) %&gt;% dplyr::mutate(src_new = ifelse(src_type==&quot;KEGGCOMP&quot;,src,dest), dest_new = ifelse(src_type==&quot;KEGGCOMP&quot;,dest,src), src_type_new=ifelse(src_type==&quot;KEGGCOMP&quot;,src_type,dest_type), dest_type_new=ifelse(src_type==&quot;KEGGCOMP&quot;,dest_type,src_type)) %&gt;% dplyr::mutate(src_new1=ifelse(src_type==&quot;KEGGCOMP&quot; &amp; dest_type==&quot;KEGGCOMP&quot;, ifelse(src_new&gt;dest_new,src_new,dest_new), src_new)) %&gt;% dplyr::mutate(dest_new1=ifelse(src_type==&quot;KEGGCOMP&quot; &amp; dest_type==&quot;KEGGCOMP&quot;, ifelse(src_new&gt;dest_new,dest_new,src_new), dest_new)) %&gt;% dplyr::select(-c(&quot;src_type&quot;,&quot;src&quot;,&quot;dest_type&quot;,&quot;dest&quot;,&quot;src_new&quot;,&quot;dest_new&quot;)) %&gt;% dplyr::rename(&quot;src_type&quot;=&quot;src_type_new&quot;,&quot;src&quot;=&quot;src_new1&quot;,&quot;dest_type&quot;=&quot;dest_type_new&quot;,&quot;dest&quot;=&quot;dest_new1&quot;) %&gt;% dplyr::select(c(&quot;src_type&quot;,&quot;src&quot;,&quot;dest_type&quot;,&quot;dest&quot;,&quot;pathwayid&quot;,&quot;pathway&quot;)) %&gt;% unique() write.table(kegg_data_metabolism,&quot;result/Graphite/gene-metabolite-kegg_metabolism.txt&quot;,quote=F,sep=&quot;\\t&quot;,row.names=F) ## SMPDB metabolism_pathway &lt;- read.csv(&quot;result/Graphite/smpdb_pathways.csv&quot;) %&gt;% dplyr::filter(Subject==&quot;Metabolic&quot;) smpdb_data &lt;- data.table::fread(&quot;result/Graphite/gene-metabolite-smpdb.txt&quot;) %&gt;% as.data.frame() smpdb_metabolism &lt;- smpdb_data %&gt;% dplyr::filter(pathway %in% metabolism_pathway$Name) %&gt;% dplyr::filter(src_type==&quot;KEGGCOMP&quot;|dest_type==&quot;KEGGCOMP&quot;) %&gt;% dplyr::filter(!grepl(&quot;De Novo&quot;,pathway)) %&gt;% dplyr::mutate(pathway_new=ifelse(grepl(&quot;Phosphatidylcholine Biosynthesis&quot;,pathway), &quot;Phosphatidylcholine Biosynthesis&quot;,pathway)) %&gt;% dplyr::mutate(pathway_new=ifelse(grepl(&quot;Cardiolipin Biosynthesis&quot;,pathway_new), &quot;Cardiolipin Biosynthesis&quot;,pathway_new)) %&gt;% dplyr::mutate(pathway_new=ifelse(grepl(&quot;Phosphatidylethanolamine Biosynthesis&quot;,pathway_new), &quot;Phosphatidylethanolamine Biosynthesis&quot;,pathway_new)) %&gt;% dplyr::mutate(pathway_new=ifelse(grepl(&quot;Mitochondrial Beta-Oxidation&quot;,pathway_new), &quot;Mitochondrial Beta-Oxidation&quot;,pathway_new)) %&gt;% dplyr::select(-&quot;pathway&quot;) %&gt;% dplyr::rename(&quot;pathway&quot;=&quot;pathway_new&quot;) %&gt;% dplyr::mutate(src_new = ifelse(src_type==&quot;KEGGCOMP&quot;,src,dest), dest_new = ifelse(src_type==&quot;KEGGCOMP&quot;,dest,src), src_type_new=ifelse(src_type==&quot;KEGGCOMP&quot;,src_type,dest_type), dest_type_new=ifelse(src_type==&quot;KEGGCOMP&quot;,dest_type,src_type)) %&gt;% dplyr::mutate(src_new1=ifelse(src_type==&quot;KEGGCOMP&quot; &amp; dest_type==&quot;KEGGCOMP&quot;, ifelse(src_new&gt;dest_new,src_new,dest_new), src_new)) %&gt;% dplyr::mutate(dest_new1=ifelse(src_type==&quot;KEGGCOMP&quot; &amp; dest_type==&quot;KEGGCOMP&quot;, ifelse(src_new&gt;dest_new,dest_new,src_new), dest_new)) %&gt;% dplyr::select(-c(&quot;src_type&quot;,&quot;src&quot;,&quot;dest_type&quot;,&quot;dest&quot;,&quot;src_new&quot;,&quot;dest_new&quot;)) %&gt;% dplyr::rename(&quot;src_type&quot;=&quot;src_type_new&quot;,&quot;src&quot;=&quot;src_new1&quot;,&quot;dest_type&quot;=&quot;dest_type_new&quot;,&quot;dest&quot;=&quot;dest_new1&quot;) %&gt;% dplyr::select(c(&quot;src_type&quot;,&quot;src&quot;,&quot;dest_type&quot;,&quot;dest&quot;,&quot;pathwayid&quot;,&quot;pathway&quot;)) %&gt;% unique() write.table(smpdb_metabolism,&quot;result/Graphite/gene-metabolite-smpdb_metabolism.txt&quot;,quote=F,sep=&quot;\\t&quot;,row.names=F) ## Reactome # metabolism pathway reactome_metabolism_pathwayid &lt;- data.table::fread(&quot;result/Graphite/ReactomePathwaysRelation.txt&quot;,header=F) %&gt;% as.data.frame() %&gt;% dplyr::filter(V1==&quot;R-HSA-1430728&quot;) reactome_metabolism_data &lt;- data.table::fread(&quot;result/Graphite/gene-metabolite-reactome.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::filter(pathwayid %in% reactome_metabolism_pathwayid$V2) %&gt;% dplyr::filter(src_type==&quot;KEGGCOMP&quot;|dest_type==&quot;KEGGCOMP&quot;) %&gt;% dplyr::mutate(src_new = ifelse(src_type==&quot;KEGGCOMP&quot;,src,dest), dest_new = ifelse(src_type==&quot;KEGGCOMP&quot;,dest,src), src_type_new=ifelse(src_type==&quot;KEGGCOMP&quot;,src_type,dest_type), dest_type_new=ifelse(src_type==&quot;KEGGCOMP&quot;,dest_type,src_type)) %&gt;% dplyr::mutate(src_new1=ifelse(src_type==&quot;KEGGCOMP&quot; &amp; dest_type==&quot;KEGGCOMP&quot;, ifelse(src_new&gt;dest_new,src_new,dest_new), src_new)) %&gt;% dplyr::mutate(dest_new1=ifelse(src_type==&quot;KEGGCOMP&quot; &amp; dest_type==&quot;KEGGCOMP&quot;, ifelse(src_new&gt;dest_new,dest_new,src_new), dest_new)) %&gt;% dplyr::select(-c(&quot;src_type&quot;,&quot;src&quot;,&quot;dest_type&quot;,&quot;dest&quot;,&quot;src_new&quot;,&quot;dest_new&quot;)) %&gt;% dplyr::rename(&quot;src_type&quot;=&quot;src_type_new&quot;,&quot;src&quot;=&quot;src_new1&quot;,&quot;dest_type&quot;=&quot;dest_type_new&quot;,&quot;dest&quot;=&quot;dest_new1&quot;) %&gt;% dplyr::select(c(&quot;src_type&quot;,&quot;src&quot;,&quot;dest_type&quot;,&quot;dest&quot;,&quot;pathwayid&quot;,&quot;pathway&quot;)) %&gt;% unique() write.table(reactome_metabolism_data,&quot;result/Graphite/gene-metabolite-reactome_metabolism.txt&quot;,quote=F,sep=&quot;\\t&quot;,row.names=F) ## Wikipathways wikipathway_metabolism_id &lt;- data.table::fread(&quot;result/wikipath/test_metabolic.txt&quot;,header=F) %&gt;% as.data.frame() wikipathway_data &lt;- data.table::fread(&quot;result/Graphite/gene-metabolite-wikipaths.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::filter(pathwayid %in% wikipathway_metabolism_id$V1) %&gt;% dplyr::filter(src_type==&quot;KEGGCOMP&quot;|dest_type==&quot;KEGGCOMP&quot;) %&gt;% dplyr::mutate(src_new = ifelse(src_type==&quot;KEGGCOMP&quot;,src,dest), dest_new = ifelse(src_type==&quot;KEGGCOMP&quot;,dest,src), src_type_new=ifelse(src_type==&quot;KEGGCOMP&quot;,src_type,dest_type), dest_type_new=ifelse(src_type==&quot;KEGGCOMP&quot;,dest_type,src_type)) %&gt;% dplyr::mutate(src_new1=ifelse(src_type==&quot;KEGGCOMP&quot; &amp; dest_type==&quot;KEGGCOMP&quot;, ifelse(src_new&gt;dest_new,src_new,dest_new), src_new)) %&gt;% dplyr::mutate(dest_new1=ifelse(src_type==&quot;KEGGCOMP&quot; &amp; dest_type==&quot;KEGGCOMP&quot;, ifelse(src_new&gt;dest_new,dest_new,src_new), dest_new)) %&gt;% dplyr::select(-c(&quot;src_type&quot;,&quot;src&quot;,&quot;dest_type&quot;,&quot;dest&quot;,&quot;src_new&quot;,&quot;dest_new&quot;)) %&gt;% dplyr::rename(&quot;src_type&quot;=&quot;src_type_new&quot;,&quot;src&quot;=&quot;src_new1&quot;,&quot;dest_type&quot;=&quot;dest_type_new&quot;,&quot;dest&quot;=&quot;dest_new1&quot;) %&gt;% dplyr::select(c(&quot;src_type&quot;,&quot;src&quot;,&quot;dest_type&quot;,&quot;dest&quot;,&quot;pathwayid&quot;,&quot;pathway&quot;)) %&gt;% unique() write.table(wikipathway_data,&quot;result/Graphite/gene-metabolite-wikipathway_metabolism.txt&quot;,quote=F,sep=&quot;\\t&quot;,row.names=F) Combine the data from database kegg, wikipathway, reactome, smpdb and then uniq the data cat gene-metabolite-*metabolism.txt |cut -f1-4,6|sort|uniq &gt;result.graphite.txt 2.3.2.3 BiGG Down all the models in the BiGG ## Down all the models in the BiGG curl &#39;http://bigg.ucsd.edu/api/v2/models&#39; ## Then, choice the model from Homo sapiens,then in reserve model is iAT_PLT_636, iAB_RBC_283, RECON1, Recon3D. ## Get all the reactions names in the 4 human models. 2 minutes curl &#39;http://bigg.ucsd.edu/api/v2/models/iAT_PLT_636/reactions&#39; &gt;result/BiGG/iAT_PLT_636.reactions curl &#39;http://bigg.ucsd.edu/api/v2/models/iAB_RBC_283/reactions&#39; &gt;result/BiGG/iAB_RBC_283.reactions curl &#39;http://bigg.ucsd.edu/api/v2/models/RECON1/reactions&#39; &gt;result/BiGG/RECON1.reactions curl &#39;http://bigg.ucsd.edu/api/v2/models/Recon3D/reactions&#39; &gt;result/BiGG/Recon3D.reactions ## Change the json reaction names to txt file. tt&lt;-jsonlite::stream_in(file(&quot;result/BiGG/iAB_RBC_283.reactions&quot;),pagesize = 100) write.table(tt$results[[1]]$bigg_id,&quot;result/BiGG/iAB_RBC_283.reaction.txt&quot;,quote=F,row.names=F,col.names=F) tt&lt;-jsonlite::stream_in(file(&quot;result/BiGG/iAT_PLT_636.reactions&quot;),pagesize = 100) write.table(tt$results[[1]]$bigg_id,&quot;result/BiGG/iAT_PLT_636.reaction.txt&quot;,quote=F,row.names=F,col.names=F) tt&lt;-jsonlite::stream_in(file(&quot;result/BiGG/RECON1.reactions&quot;),pagesize = 100) write.table(tt$results[[1]]$bigg_id,&quot;result/BiGG/RECON1.reaction.txt&quot;,quote=F,row.names=F,col.names=F) tt&lt;-jsonlite::stream_in(file(&quot;result/BiGG/Recon3D.reactions&quot;),pagesize = 100) write.table(tt$results[[1]]$bigg_id,&quot;result/BiGG/Recon3D.reaction.txt&quot;,quote=F,row.names=F,col.names=F) Download the every reaction Download the every reaction. Download iAB_RBC_283 reaction #!/bin/bash #####Does output_dir need to add result/BiGG/mainly depends on the path of the full text input_file=&#39;iAB_RBC_283.reaction.txt&#39; output_dir=&#39;iAB_RBC_283/reaction/json&#39; mkdir -p &quot;$output_dir&quot; cat &quot;$input_file&quot; | while read line do curl &quot;http://bigg.ucsd.edu/api/v2/models/iAB_RBC_283/reactions/${line}&quot; &gt; &quot;${output_dir}/${line}.txt&quot; done Download iAT_PLT_636 reaction #!/bin/bash #####Does output_dir need to add result/BiGG/mainly depends on the path of the full text input_file=&#39;iAT_PLT_636.reaction.txt&#39; output_dir=&#39;iAT_PLT_636/reaction/json&#39; mkdir -p &quot;$output_dir&quot; cat &quot;$input_file&quot; | while read line do curl &quot;http://bigg.ucsd.edu/api/v2/models/iAT_PLT_636/reactions/${line}&quot; &gt; &quot;${output_dir}/${line}.txt&quot; done Download RECON1 reaction #!/bin/bash #####Does output_dir need to add result/BiGG/mainly depends on the path of the full text input_file=&#39;RECON1.reaction.txt&#39; output_dir=&#39;RECON1/reaction/json&#39; mkdir -p &quot;$output_dir&quot; cat &quot;$input_file&quot; | while read line do curl &quot;http://bigg.ucsd.edu/api/v2/models/RECON1/reactions/${line}&quot; &gt; &quot;${output_dir}/${line}.txt&quot; done Download Recon3D reaction #!/bin/bash #####Does output_dir need to add result/BiGG/mainly depends on the path of the full text input_file=&#39;Recon3D.reaction.txt&#39; output_dir=&#39;Recon3D/reaction/json&#39; mkdir -p &quot;$output_dir&quot; cat &quot;$input_file&quot; | while read line do curl &quot;http://bigg.ucsd.edu/api/v2/models/Recon3D/reactions/${line}&quot; &gt; &quot;${output_dir}/${line}.txt&quot; done Get the information in every reaction. ## The R script that change the reaction information in json to txt. args &lt;- commandArgs(T) library(dplyr) mydata &lt;- paste0(&quot;result/BiGG/&quot;,args[1],&quot;/reaction/json/&quot;,args[2],&quot;.txt&quot;) recon1&lt;-jsonlite::stream_in(file(mydata),pagesize = 100) metabolite_biggid &lt;- recon1$metabolites[[1]]$bigg_id metabolites &lt;- recon1$metabolites[[1]]$name compartment_bigg_id &lt;- recon1$metabolites[[1]]$compartment_bigg_id gene &lt;- recon1$results[[1]]$genes[[1]]$name subsystem &lt;- recon1$results[[1]]$subsystem model=args[1] if (length(gene)&gt;0) { dd &lt;- data.frame(metabolite_biggid1=paste(metabolite_biggid,compartment_bigg_id,sep=&quot;_&quot;),src_type=&quot;metabolite&quot;,src=metabolites,metabolite_biggid2=NA,dest_type=&quot;gene&quot;,dest=paste(gene,collapse=&quot;;&quot;),subsystems=subsystem,models=model) }else { dd &lt;- data.frame() } if (length(unique(recon1$metabolites[[1]]$stoichiometry))&gt;1) { metabolites_stoichiometry1 &lt;- recon1$metabolites[[1]] %&gt;% dplyr::filter(stoichiometry&gt;0) metabolites_stoichiometry2 &lt;- recon1$metabolites[[1]] %&gt;% dplyr::filter(stoichiometry&lt;0) result &lt;- data.frame() for (i in 1:nrow(metabolites_stoichiometry1)) { for (j in 1:nrow(metabolites_stoichiometry2)) { temp &lt;- data.frame(metabolite_biggid1=paste(metabolites_stoichiometry1$bigg_id[i],metabolites_stoichiometry1$compartment_bigg_id[i],sep=&quot;_&quot;),src_type=&quot;metabolite&quot;,src=metabolites_stoichiometry1$name[i], metabolite_biggid2=paste(metabolites_stoichiometry2$bigg_id[j],metabolites_stoichiometry2$compartment_bigg_id[j],sep=&quot;_&quot;),dest_type=&quot;metabolite&quot;,dest=metabolites_stoichiometry2$name[j],subsystems=subsystem,models=model) result &lt;- rbind(result,temp) } } result_final &lt;- rbind(dd,result) write.table(result_final,paste0(&quot;result/BiGG/&quot;,args[1],&quot;/reaction/txt/&quot;,args[2],&quot;.txt&quot;),quote=F,sep=&quot;\\t&quot;,row.names=F) }else { print(0) } Run the R script that change the reaction information in json to txt in batch. This step takes about 3 hours. cat result/BiGG/iAB_RBC_283.reaction.txt |while read line do Rscript reaction_json2txt.R iAB_RBC_283 $line done cat result/BiGG/iAT_PLT_636.reaction.txt |while read line do Rscript reaction_json2txt.R iAT_PLT_636 $line done cat result/BiGG/RECON1.reaction.txt |while read line do Rscript reaction_json2txt.R RECON1 $line done cat result/BiGG/Recon3D.reaction.txt |while read line do Rscript reaction_json2txt.R Recon3D $line done Combine all the reactions info include the gene-metabolite pair,the metabolite-metabolite pair,subsystem,model. cat result/BiGG/iAB_RBC_283/reaction/txt/*|grep -v metabolite_biggid1 &gt;result/BiGG/cat_reaction_info_iAB_RBC_283.txt cat result/BiGG/iAT_PLT_636/reaction/txt/*|grep -v metabolite_biggid1 &gt;result/BiGG/cat_reaction_info_iAT_PLT_636.txt ## Recon3D manually modified several lines starting with (GlcNAc)7 (Man)3 cat result/BiGG/Recon3D/reaction/txt/*|grep -v metabolite_biggid1 &gt;result/BiGG/cat_reaction_info_Recon3D.txt cat result/BiGG/RECON1/reaction/txt/*|grep -v metabolite_biggid1 &gt;result/BiGG/cat_reaction_info_RECON1.txt Exact all the metabolites names in every model in BiGG Dwonload the metabolites in every model in BiGG. curl &#39;http://bigg.ucsd.edu/api/v2/models/iAB_RBC_283/metabolites&#39; &gt;result/BiGG/iAB_RBC_283_metabolite.json curl &#39;http://bigg.ucsd.edu/api/v2/models/iAT_PLT_636/metabolites&#39; &gt;result/BiGG/iAT_PLT_636_metabolite.json curl &#39;http://bigg.ucsd.edu/api/v2/models/Recon3D/metabolites&#39; &gt;result/BiGG/Recon3D_metabolite.json curl &#39;http://bigg.ucsd.edu/api/v2/models/RECON1/metabolites&#39; &gt;result/BiGG/RECON1_metabolite.json Change the json to txt and extract metabolite bigg_id. args=commandArgs(T) recon1&lt;-jsonlite::stream_in(file(paste0(&quot;result/BiGG/&quot;,args[1],&quot;_metabolite.json&quot;)),pagesize = 100) aa &lt;- recon1$results[[1]] write.table(paste0(aa$bigg_id,&quot;_&quot;,aa$compartment_bigg_id),paste0(&quot;result/BiGG/&quot;,args[1],&quot;_metabolite.txt&quot;),row.names = F,col.names=F,sep=&quot;\\t&quot;,quote=F) ## Use the script. Rscript metabolitename_json2txt.R iAB_RBC_283 Rscript metabolitename_json2txt.R iAT_PLT_636 Rscript metabolitename_json2txt.R RECON1 Rscript metabolitename_json2txt.R Recon3D Download every metabolite information. Download iAB_RBC_283 metabolite #!/bin/bash #####Does output_dir need to add result/BiGG/mainly depends on the path of the full text input_file=&#39;iAB_RBC_283_metabolite.txt&#39; output_dir=&#39;iAB_RBC_283/metabolite/json&#39; mkdir -p &quot;$output_dir&quot; cat &quot;$input_file&quot; | while read line do curl &quot;http://bigg.ucsd.edu/api/v2/models/iAB_RBC_283/metabolites/${line}&quot; &gt; &quot;${output_dir}/${line}.json&quot; done Download iAT_PLT_636 metabolite #!/bin/bash #####Does output_dir need to add result/BiGG/mainly depends on the path of the full text input_file=&#39;iAT_PLT_636_metabolite.txt&#39; output_dir=&#39;iAT_PLT_636/metabolite/json&#39; mkdir -p &quot;$output_dir&quot; cat &quot;$input_file&quot; | while read line do curl &quot;http://bigg.ucsd.edu/api/v2/models/iAT_PLT_636/metabolites/${line}&quot; &gt; &quot;${output_dir}/${line}.json&quot; done Download RECON1 metabolite #!/bin/bash #####Does output_dir need to add result/BiGG/mainly depends on the path of the full text input_file=&#39;RECON1_metabolite.txt&#39; output_dir=&#39;RECON1/metabolite/json&#39; mkdir -p &quot;$output_dir&quot; cat &quot;$input_file&quot; | while read line do curl &quot;http://bigg.ucsd.edu/api/v2/models/RECON1/metabolites/${line}&quot; &gt; &quot;${output_dir}/${line}.json&quot; done Download Recon3D metabolite #!/bin/bash #####Does output_dir need to add result/BiGG/mainly depends on the path of the full text input_file=&#39;Recon3D_metabolite.txt&#39; output_dir=&#39;Recon3D/metabolite/json&#39; mkdir -p &quot;$output_dir&quot; cat &quot;$input_file&quot; | while read line do curl &quot;http://bigg.ucsd.edu/api/v2/models/Recon3D/metabolites/${line}&quot; &gt; &quot;${output_dir}/${line}.json&quot; done The R script that exact the KEGG ID in metabolite file. args &lt;- commandArgs(T) mydata &lt;- paste0(&quot;result/BiGG/&quot;,args[1],&quot;/metabolite/json/&quot;,args[2],&quot;.json&quot;) # &quot;iAB_RBC_283_metabolites/glu__L_c.json&quot; recon1&lt;-jsonlite::stream_in(file(mydata),pagesize = 100) kegg_id &lt;- paste(recon1$database_links$`KEGG Compound`[[1]]$id,collapse = &quot;;&quot;) name &lt;- recon1$name result &lt;- data.frame(name=name,kegg_id=kegg_id,source=args[1]) write.table(result,paste0(&quot;result/BiGG/&quot;,args[1],&quot;/metabolite/txt/&quot;,args[2],&quot;.txt&quot;),quote=F,row.names = F,sep=&quot;\\t&quot;) Run the R script that exact the KEGG ID in the metabolite file. cat result/BiGG/iAB_RBC_283_metabolite.txt|while read line do Rscript metabolite_json2txt.R iAB_RBC_283 ${line} done cat result/BiGG/iAT_PLT_636_metabolite.txt |while read line do Rscript metabolite_json2txt.R iAT_PLT_636 ${line} done cat result/BiGG/RECON1_metabolite.txt|while read line do Rscript metabolite_json2txt.R RECON1 ${line} done cat result/BiGG/Recon3D_metabolite.txt|while read line do Rscript metabolite_json2txt.R Recon3D ${line} done Combine all the metabolite in 1 file for every model. cat result/BiGG/iAB_RBC_283/metabolite/txt/*.txt|grep -v kegg_id|grep -v &#39;^ $&#39; &gt;result/BiGG/iAB_RBC_283_metabolite_all.txt cat result/BiGG/iAT_PLT_636/metabolite/txt/*.txt |grep -v kegg_id |grep -v &#39;^ $&#39; &gt;result/BiGG/iAT_PLT_636_metabolite_all.txt cat result/BiGG/RECON1/metabolite/txt/*.txt|grep -v kegg_id|grep -v &#39;^ $&#39; &gt;result/BiGG/RECON1_metabolite_all.txt ## Recon3D metabolites is so many, so please cat 2 times cat result/BiGG/Recon3D/metabolite/txt/*.txt|grep -v kegg_id|grep -v &#39;^ $&#39; &gt;result/BiGG/Recon3D_metabolite_all.txt The R script that change the metabolite name to kegg id in the final output args &lt;- commandArgs(T) library(dplyr) metabolite_info &lt;- data.table::fread(paste0(&quot;result/BiGG/&quot;,args[1],&quot;_metabolite_all.txt&quot;),header=F) %&gt;% as.data.frame() gene_metabolite_pairs &lt;- data.table::fread(paste0(&quot;result/BiGG/cat_reaction_info_&quot;,args[1],&quot;.txt&quot;),header=F,sep=&quot;\\t&quot;,fill=T) %&gt;% as.data.frame() %&gt;% dplyr::left_join(metabolite_info,by=c(&quot;V3&quot;=&quot;V1&quot;)) %&gt;% dplyr::left_join(metabolite_info,by=c(&quot;V6&quot;=&quot;V1&quot;)) %&gt;% dplyr::mutate(src=ifelse(V2.y==&quot;&quot; | is.na(V2.y), V3.x,V2.y)) %&gt;% dplyr::mutate(dest=ifelse(V2==&quot;&quot; | is.na(V2), V6,V2)) %&gt;% dplyr::select(c(&quot;V2.x&quot;,&quot;src&quot;,&quot;V5&quot;,&quot;dest&quot;,&quot;V7&quot;,&quot;V8&quot;)) %&gt;% dplyr::rename(&quot;src_type&quot;=&quot;V2.x&quot;,&quot;dest_type&quot;=&quot;V5&quot;,&quot;subsystems&quot;=&quot;V7&quot;,&quot;model&quot;=&quot;V8&quot;) %&gt;% tidyr::separate_rows(src,sep=&quot;;&quot;) %&gt;% tidyr::separate_rows(dest,sep=&quot;;&quot;) %&gt;% dplyr::filter(src != dest) %&gt;% unique() write.table(gene_metabolite_pairs,paste0(&quot;result/BiGG/result_&quot;,args[1],&quot;.txt&quot;),quote=F,row.names = F,sep=&quot;\\t&quot;) ## Use the R script that change the metabolite name to KEGG ID. Rscript result.R iAB_RBC_283 Rscript result.R iAT_PLT_636 Rscript result.R RECON1 Rscript result.R Recon3D cat result_*.txt |cut -f1-5 |sort|uniq &gt;result/BiGG/result.BiGG.txt Combine the data from BiGG, graphite, and KEGG library(dplyr) kegg1 &lt;- data.table::fread(&quot;KEGG_metabolite_gene.txt&quot;) %&gt;% as.data.frame() kegg2 &lt;- data.table::fread(&quot;KEGG_metabolite_metabolite.txt&quot;) %&gt;% as.data.frame() dat_kegg &lt;- rbind(kegg1,kegg2) dat_graphite &lt;- data.table::fread(&quot;Graphite/result.graphite.txt&quot;,header=F) %&gt;% as.data.frame() %&gt;% dplyr::select(-V5) %&gt;% filter(V1 != &quot;src_type&quot;) %&gt;% rename(&quot;src_type&quot;=&quot;V1&quot;,&quot;src&quot;=&quot;V2&quot;,&quot;dest_type&quot;=&quot;V3&quot;,&quot;dest&quot;=&quot;V4&quot;) dat_bigg &lt;- data.table::fread(&quot;BiGG/result.BiGG.txt&quot;,header=F) %&gt;% as.data.frame() %&gt;% dplyr::select(-V5) %&gt;% filter(V1 != &quot;src_type&quot;) %&gt;% rename(&quot;src_type&quot;=&quot;V1&quot;,&quot;src&quot;=&quot;V2&quot;,&quot;dest_type&quot;=&quot;V3&quot;,&quot;dest&quot;=&quot;V4&quot;) dat &lt;- rbind(dat_kegg,dat_graphite,dat_bigg) dat1 &lt;- dat %&gt;% filter(src_type==dest_type) dat2 &lt;- dat %&gt;% filter(src_type!=dest_type) dat11 &lt;- dat1 %&gt;% mutate(src1=ifelse( src &gt; dest,src,dest)) %&gt;% mutate(dest1=ifelse(src &gt; dest, dest, src)) %&gt;% select(-src,-dest) %&gt;% rename(&quot;src&quot;=&quot;src1&quot;,&quot;dest&quot;=&quot;dest1&quot;) %&gt;% select(src_type,src,dest_type,dest) dat_all &lt;- rbind(dat2,dat11) %&gt;% unique() write.table(dat_all,&quot;Gene-Metabolite-data.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) 2.4 Deployment MNet Source Files MNet Web Server 2.4.1 Installing R 4.4.1 for Ubuntu 20 ## 1. Sources sudo sh -c &#39;echo &quot;deb https://mirrors.tuna.tsinghua.edu.cn/CRAN/bin/linux/ubuntu $(lsb_release -cs)-cran40/&quot; &gt;&gt; /etc/apt/sources.list&#39; sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 ## 2. Update and Install sudo apt-get update sudo apt install -y libcurl4-openssl-dev libssl-dev libxml2-dev sudo apt-get install r-base 2.4.2 Installing R Packages ## In Order Install sudo R options(repos = c(CRAN = &quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;)) options(BioC_mirror=&quot;https://mirrors.tuna.tsinghua.edu.cn/bioconductor&quot;) install.packages(&quot;shiny&quot;) install.packages(&quot;Rcpp&quot;) install.packages(&quot;RcppEigen&quot;) install.packages(&quot;BiocManager&quot;) BiocManager::install(c(&quot;supraHex&quot;, &quot;limma&quot;, &quot;pathview&quot;, &quot;ropls&quot;, &quot;fgsea&quot;)) install.packages(&quot;remotes&quot;) remotes::install_github(&quot;hfang-bristol/dnet&quot;) remotes::install_github(&quot;hfang-bristol/XGR&quot;) remotes::install_github(&quot;tuantuangui/MNet&quot;) 2.4.3 Installing shiny-sever ## 1. Install sudo apt-get install gdebi-core wget https://download3.rstudio.org/ubuntu-14.04/x86_64/shiny-server-1.5.14.948-amd64.deb sudo gdebi shiny-server-1.5.14.948-amd64.deb ## 2. Start and Enable shiny-server sudo systemctl start shiny-server.service sudo systemctl enable shiny-server ## 3. Config sudo vim /etc/shiny-server/shiny-server.conf # Instruct Shiny Server to run applications as the user &quot;shiny&quot; run_as shiny; # Define a server that listens on port 3838 server { listen 3838; # Define a location at the base URL location / { # Host the directory of Shiny Apps stored in this directory site_dir /srv/shiny-server; # Log all Shiny output to files in this directory log_dir /var/log/shiny-server; # When a user visits the base URL rather than a particular application, # an index of the applications available in this directory will be shown. directory_index on; app_idle_timeout 0; } } 2.4.4 Shiny App Server and Logs ## 1. Shinyapp cd ~/ git clone https://github.com/tuantuangui/MNet.git sudo cp -r ~/MNet/inst/shinyapp/* /srv/shiny-server/MNet/ ## 2. Restart shiny-server sudo systemctl restart shiny-server.service ## 3. Less New Logs sudo less /var/log/shiny-server/*.log 2.4.5 Firewall: firewalld or ufw ## firewalld # 1. Install sudo apt-get install firewalld # 2. Start and Enable sudo systemctl start firewalld sudo systemctl enable firewalld # 3. Usage sudo firewall-cmd --list-ports sudo firewall-cmd --zone=public --add-port=3838/tcp —-permanent sudo firewall-cmd --reload sudo firewall-cd --list-ports ## ufw # 1. Install sudo apt-get install ufw # 2. Enable sudo ufw enable # 3. Usage sudo ufw status sudo ufw allow 3838/tcp sudo ufw reload sudo ufw delete allow 3838/tcp 2.4.6 Apache2 Config ## 1. Install sudo apt-get install apache2 sudo systemctl start apache2 sudo systemctl enable apache2 ## 2. a2enmod config sudo a2enmod proxy sudo a2enmod proxy_http sudo a2enmod rewrite sudo systemctl restart apache2 ## 3. Apache2 Config for shiny-server sudo vim /etc/apache2/sites-available/000-default.conf &lt;VirtualHost *:80&gt; # The ServerName directive sets the request scheme, hostname and port that the server uses to identify itself. This is used when creating redirection URLs. In the context of virtual hosts, the ServerName specifies what hostname must appear in the request&#39;s Host: header to match this virtual host. For the default virtual host (this file) this value is not decisive as it is used as a last resort host regard less. However, you must set it for any further virtual host explicitly. ServerName www.mnet4all.com ServerAdmin webmaster@localhost DocumentRoot /var/www/html # Available loglevels: trace8, ..., tracel, debug, info, notice, warn, error, crit, alert, emerg. It is also possible to configure the loglevel for particular modules, e.g. # LogLevel info ssl:warn ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined # For most configuration files from conf-available/, which are enabled or disabled at a global level, it is possible to include a line for only one particular virtual host. For example the following line enables the CGI configuration for this host only after it has been globally disabled with &quot;a2disconf&quot;. Include conf-available/serve-cgi-bin.conf ProxyPass /MNet http://localhost:3838/MNet ProxyPassReverse /MNet http://localhost: 3838/MNet &lt;Location /MNet&gt; ProxyPassReverse / Order allow,deny Allow from all &lt;/Location&gt; &lt;/VirtualHost&gt; # vim: syntax=apache ts=4 sw=4 sts=4 sr noet ## 4. Static Sites cp -r ~/MNet/pkgdown/docs /var/www/html/mnet-docs cp -r ~/MNet/bookdown/book /var/www/html/mnet-manual "],["r-function-mannual.html", "3 R Function Mannual 3.1 Get Started 3.2 Performance evaluation for pathway enrichment analysis 3.3 Performance evaluation for GSEA 3.4 Apply to acute myeloid leukemia 3.5 Apply to triple-negative breast cancer 3.6 Apply to spatial metabolomics 3.7 Need help?", " 3 R Function Mannual 3.1 Get Started R Installation R is a language and environment for statistical computing and graphics. We assume R (version 4.0.0 or higher) has been installed in your local machine. The latest version can be installed following instructions below for different platforms (Windows, Mac, and Linux). Quick link for Windows: Download R for Windows. Quick link for Mac: Download R for Mac OS X 11. Below are shell command lines in Terminal (for Linux): #Ensure you have the conda: conda install -c conda-forge r-base MNet Installation if(!require(BiocManager)){ install.packages(&quot;BiocManager&quot;) } if (!require(remotes)) { BiocManager::install(&quot;remotes&quot;, dependencies=T) } if (!require(devtools)) { BiocManager::install(&quot;devtools&quot;, dependencies=T) } BiocManager::install(&quot;hfang-bristol/dnet&quot;, dependencies=T) BiocManager::install(&quot;tuantuangui/MNet&quot;, dependencies=T) ## Check the package ‘MNet’ successfully installed library(help=MNet) 3.2 Performance evaluation for pathway enrichment analysis 3.2.1 Compare MNet with TidyMass 3.2.1.1 Analyze data Analyzing metabolites data using MNet and TidyMass and using different method parameters. library(dplyr) library(MNet) all_meta &lt;- mlimma(meta_dat,group) ## metabolite ### Filter the increase differential genes and metabolites diff_meta &lt;- all_meta %&gt;% dplyr::filter(abs(logFC) &gt; 0.58) %&gt;% dplyr::filter(adj.P.Val &lt; 0.05) time_start &lt;- Sys.time() result_meta &lt;- ePEAlyser(diff_meta$name,out=&quot;metabolite&quot;,p_cutoff=1.5,test=&quot;hypergeo&quot;) time_end &lt;- Sys.time() run_time &lt;- difftime(time_end, time_start, units = &quot;secs&quot;) print(paste(&quot;hypergeo_code execution time:&quot;, round(run_time, 2), &quot;second&quot;)) write.table(result_meta$out,&quot;result/ORA/MNet_pathway-hypergeo.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) time_start &lt;- Sys.time() result_meta &lt;- ePEAlyser(diff_meta$name,out=&quot;metabolite&quot;,p_cutoff=1.5,test=&quot;fisher&quot;) time_end &lt;- Sys.time() run_time &lt;- difftime(time_end, time_start, units = &quot;secs&quot;) print(paste(&quot;fisher—_code execution time:&quot;, round(run_time, 2), &quot;second&quot;)) write.table(result_meta$out,&quot;result/ORA/MNet_pathway-fisher.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) time_start &lt;- Sys.time() result_meta &lt;- ePEAlyser(diff_meta$name,out=&quot;metabolite&quot;,p_cutoff=1.5,test=&quot;binomial&quot;) time_end &lt;- Sys.time() run_time &lt;- difftime(time_end, time_start, units = &quot;secs&quot;) print(paste(&quot;binomial_code execution time:&quot;, round(run_time, 2), &quot;second&quot;)) write.table(result_meta$out,&quot;result/ORA/MNet_pathway-binomial.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) library(tidymass) data(&quot;kegg_hsa_pathway&quot;, package = &quot;metpath&quot;) pathway_database = kegg_hsa_pathway time_start &lt;- Sys.time() result &lt;- enrich_kegg(query_id = diff_meta$name, query_type = &quot;compound&quot;, id_type = &quot;KEGG&quot;,method = &quot;hypergeometric&quot;, pathway_database = pathway_database, p_cutoff = 1.1, p_adjust_method = &quot;BH&quot;, threads = 10) time_end &lt;- Sys.time() run_time &lt;- difftime(time_end, time_start, units = &quot;secs&quot;) print(paste(&quot;Tidymass-hypergeometric_code execution time:&quot;, round(run_time, 2), &quot;second&quot;)) write.table(result@result,&quot;result/ORA/TidyMass_pathway-hypergeometric.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) time_start &lt;- Sys.time() result &lt;- enrich_kegg(query_id = diff_meta$name, query_type = &quot;compound&quot;, id_type = &quot;KEGG&quot;,method = &quot;fisher&quot;, pathway_database = pathway_database, p_cutoff = 1.1, p_adjust_method = &quot;BH&quot;, threads = 10) time_end &lt;- Sys.time() run_time &lt;- difftime(time_end, time_start, units = &quot;secs&quot;) print(paste(&quot;Tidymass-fisher_code execution time:&quot;, round(run_time, 2), &quot;second&quot;)) write.table(result@result,&quot;result/ORA/TidyMass_pathway-fisher.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) 3.2.1.2 Set different cutoffs Compare the stability of the results of different methods under different cutoff values. library(ggplot2) pathway_mnet_hypergeo &lt;- data.table::fread(&quot;result/ORA/MNet_pathway-hypergeo.txt&quot;) %&gt;% as.data.frame() pathway_mnet_fisher &lt;- data.table::fread(&quot;result/ORA/MNet_pathway-fisher.txt&quot;) %&gt;% as.data.frame() pathway_mnet_binomial &lt;- data.table::fread(&quot;result/ORA/MNet_pathway-binomial.txt&quot;) %&gt;% as.data.frame() pathway_tidymass_hypergeometric &lt;- data.table::fread(&quot;result/ORA/TidyMass_pathway-hypergeometric.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pathway_name %in% PathwayExtendData$kegg_pathwayname) %&gt;% filter(mapped_number != 0) pathway_tidymass_fisher &lt;- data.table::fread(&quot;result/ORA/TidyMass_pathway-fisher.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pathway_name %in% PathwayExtendData$kegg_pathwayname) %&gt;% filter(mapped_number != 0) n = seq(1,0.0001,-0.005) result_mnet_hypergeo &lt;- data.frame() result_mnet_fisher &lt;- data.frame() result_mnet_binomial &lt;- data.frame() result_tidymass_hypergeometric &lt;- data.frame() result_tidymass_fisher &lt;- data.frame() for (i in n) { ## hypergeo pathway_mnet_filter &lt;- pathway_mnet_hypergeo %&gt;% filter(pvalue &lt; i) result_mnet_temp &lt;- data.frame(n=nrow(pathway_mnet_filter),cutoff=i) result_mnet_hypergeo &lt;- rbind(result_mnet_hypergeo,result_mnet_temp) ## fisher pathway_mnet_filter &lt;- pathway_mnet_fisher %&gt;% filter(pvalue &lt; i) result_mnet_temp &lt;- data.frame(n=nrow(pathway_mnet_filter),cutoff=i) result_mnet_fisher &lt;- rbind(result_mnet_fisher,result_mnet_temp) ## binomial pathway_mnet_filter &lt;- pathway_mnet_binomial %&gt;% filter(pvalue &lt; i) result_mnet_temp &lt;- data.frame(n=nrow(pathway_mnet_filter),cutoff=i) result_mnet_binomial &lt;- rbind(result_mnet_binomial,result_mnet_temp) ## hypergeometric pathway_tidymass_filter &lt;- pathway_tidymass_hypergeometric %&gt;% filter(p_value &lt; i) result_tidymass_temp &lt;- data.frame(n=nrow(pathway_tidymass_filter),cutoff=i) result_tidymass_hypergeometric &lt;- rbind(result_tidymass_hypergeometric,result_tidymass_temp) ## fisher pathway_tidymass_filter &lt;- pathway_tidymass_fisher %&gt;% filter(p_value &lt; i) result_tidymass_temp &lt;- data.frame(n=nrow(pathway_tidymass_filter),cutoff=i) result_tidymass_fisher &lt;- rbind(result_tidymass_fisher,result_tidymass_temp) } result &lt;- rbind(result_mnet_hypergeo %&gt;% mutate(type=&quot;MNet_hypergeo&quot;), result_mnet_fisher %&gt;% mutate(type=&quot;MNet_fisher&quot;), result_mnet_binomial %&gt;% mutate(type=&quot;MNet_binomial&quot;), result_tidymass_hypergeometric %&gt;% mutate(type=&quot;tidymass_hypergeometric&quot;), result_tidymass_fisher %&gt;% mutate(type=&quot;tidymass_fisher&quot;)) p &lt;- ggplot(result,aes(cutoff,n))+ geom_point(color=&quot;gray&quot;,size=.5)+ geom_smooth(aes(color=type))+ geom_vline(xintercept=c(0.01), linetype = &#39;dashed&#39;,color=&quot;gray&quot;)+ scale_color_manual(values=c(&quot;#F3B169&quot;,&quot;#f16c23&quot;,&quot;#F94141&quot;,&quot;#37AB78&quot;,&quot;#589FF3&quot;))+ scale_x_reverse()+ theme_bw() ggsave(&quot;result/ORA/Tidymass-cutoff.pdf&quot;,p,width=6.5,height = 5) 3.2.1.3 Venn plot Quantifying the agreement of different methods using Venn diagrams. library(VennDiagram) pathway_mnet_hypergeo &lt;- data.table::fread(&quot;result/ORA/MNet_pathway-hypergeo.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pvalue &lt; 0.05) pathway_mnet_fisher &lt;- data.table::fread(&quot;result/ORA/MNet_pathway-fisher.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pvalue &lt; 0.05) pathway_mnet_binomial &lt;- data.table::fread(&quot;result/ORA/MNet_pathway-binomial.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pvalue &lt; 0.05) pathway_tidymass_hypergeometric &lt;- data.table::fread(&quot;result/ORA/TidyMass_pathway-hypergeometric.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pathway_name %in% PathwayExtendData$kegg_pathwayname) %&gt;% dplyr::filter(p_value &lt; 0.05) pathway_tidymass_fisher &lt;- data.table::fread(&quot;result/ORA/TidyMass_pathway-fisher.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pathway_name %in% PathwayExtendData$kegg_pathwayname) %&gt;% dplyr::filter(p_value &lt; 0.05) venn.plot &lt;- venn.diagram( x = list( MNet_hypergeo = pathway_mnet_hypergeo$name, MNet_fisher = pathway_mnet_fisher$name, MNet_binomial = pathway_mnet_binomial$name, tidymass_hypergeometric = pathway_tidymass_hypergeometric$pathway_name, tidymass_fisher = pathway_tidymass_fisher$pathway_name ), filename = NULL, fill = c(&quot;#F94141&quot;,&quot;#f16c23&quot;,&quot;#F3B169&quot;,&quot;#589FF3&quot;,&quot;#37AB78&quot;), alpha = 0.9) pdf(&quot;result/ORA/MNet-TidyMass-venn.pdf&quot;,width=7,height = 7) grid.draw(venn.plot) dev.off() 3.2.2 Compare MNet with clusterProfiler 3.2.2.1 Analyze data Analyzing metabolite-related genes data using MNet and clusterProfiler and using different method parameters. library(clusterProfiler) library(dplyr) library(MNet) library(KEGG.db) all_gene &lt;- mlimma(gene_dat,group) gene_filter &lt;- PathwayExtendData %&gt;% filter(type==&quot;gene&quot;) %&gt;% pull(name) %&gt;% unique() ## metabolite ### Filter the increase differential genes and metabolites diff_gene_all &lt;- all_gene %&gt;% dplyr::filter(abs(logFC) &gt; 0.58) %&gt;% dplyr::filter(adj.P.Val &lt; 0.05) gene.data &lt;- clusterProfiler::bitr(diff_gene_all$name,fromType = &quot;SYMBOL&quot;,toType =&quot;ENTREZID&quot;,OrgDb=&#39;org.Hs.eg.db&#39;) diff_gene_clusterprofiler &lt;- diff_gene_all %&gt;% inner_join(gene.data,by=c(&quot;name&quot;=&quot;SYMBOL&quot;)) kegg_F &lt;- enrichKEGG( gene = diff_gene_clusterprofiler$ENTREZID, keyType = &#39;kegg&#39;, organism = &#39;hsa&#39;, minGSSize = 1, pAdjustMethod = &#39;BH&#39;, pvalueCutoff = 1.1, use_internal_data = F) write.table(kegg_F@result,&quot;result/ORA/clusterprofiler-gene-F.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) kegg_T &lt;- enrichKEGG( gene = diff_gene_clusterprofiler$ENTREZID, keyType = &#39;kegg&#39;, organism = &#39;hsa&#39;, minGSSize = 1, pAdjustMethod = &#39;BH&#39;, pvalueCutoff = 1.1, use_internal_data = T) write.table(kegg_T@result,&quot;result/ORA/clusterprofiler-gene-T.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) diff_gene_mnet &lt;- diff_gene_all %&gt;% filter(name %in% gene_filter) gene_MNet_result_hypergeo &lt;- ePEAlyser(diff_gene_mnet$name,out=&quot;gene&quot;,p_cutoff=1.1,test=&quot;hypergeo&quot;) write.table(gene_MNet_result_hypergeo$output,&quot;result/ORA/MNet-gene_hypergeo.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) gene_MNet_result_fisher &lt;- ePEAlyser(diff_gene_mnet$name,out=&quot;gene&quot;,p_cutoff=1.1,test=&quot;fisher&quot;) write.table(gene_MNet_result_fisher$output,&quot;result/ORA/MNet-gene_fisher.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) gene_MNet_result_binomial &lt;- ePEAlyser(diff_gene_mnet$name,out=&quot;gene&quot;,p_cutoff=1.1,test=&quot;binomial&quot;) write.table(gene_MNet_result_binomial$output,&quot;result/ORA/MNet-gene_binomial.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) 3.2.2.2 Set different cutoffs Compare the stability of the results of different methods under different cutoff values. library(ggplot2) pathway_mnet_hypergeo &lt;- data.table::fread(&quot;result/ORA/MNet-gene_hypergeo.txt&quot;) %&gt;% as.data.frame() pathway_mnet_fisher &lt;- data.table::fread(&quot;result/ORA/MNet-gene_fisher.txt&quot;) %&gt;% as.data.frame() pathway_mnet_binomial &lt;- data.table::fread(&quot;result/ORA/MNet-gene_binomial.txt&quot;) %&gt;% as.data.frame() pathway_clusterprofiler_F &lt;- data.table::fread(&quot;result/ORA/clusterprofiler-gene-F.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(ID %in% PathwayExtendData$kegg_pathwayid) pathway_clusterprofiler_T &lt;- data.table::fread(&quot;result/ORA/clusterprofiler-gene-T.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(ID %in% PathwayExtendData$kegg_pathwayid) n = seq(1,0.0001,-0.005) result_mnet_hypergeo &lt;- data.frame() result_mnet_fisher &lt;- data.frame() result_mnet_binomial &lt;- data.frame() result_clusterprofiler_T &lt;- data.frame() result_clusterprofiler_F &lt;- data.frame() for (i in n) { ## hypergeo pathway_mnet_hypergeo_filter &lt;- pathway_mnet_hypergeo %&gt;% filter(pvalue &lt; i) result_mnet_hypergeo_temp &lt;- data.frame(n=nrow(pathway_mnet_hypergeo_filter),cutoff=i) result_mnet_hypergeo &lt;- rbind(result_mnet_hypergeo,result_mnet_hypergeo_temp) ## fisher pathway_mnet_fisher_filter &lt;- pathway_mnet_fisher %&gt;% filter(pvalue &lt; i) result_mnet_fisher_temp &lt;- data.frame(n=nrow(pathway_mnet_fisher_filter),cutoff=i) result_mnet_fisher &lt;- rbind(result_mnet_fisher,result_mnet_fisher_temp) ## binomial pathway_mnet_binomial_filter &lt;- pathway_mnet_binomial %&gt;% filter(pvalue &lt; i) result_mnet_binomial_temp &lt;- data.frame(n=nrow(pathway_mnet_binomial_filter),cutoff=i) result_mnet_binomial &lt;- rbind(result_mnet_binomial,result_mnet_binomial_temp) # clusterProfiler-T pathway_clusterprofiler_T_filter &lt;- pathway_clusterprofiler_T %&gt;% filter(pvalue &lt; i) result_clusterprofiler_T_temp &lt;- data.frame(n=nrow(pathway_clusterprofiler_T_filter),cutoff=i) result_clusterprofiler_T &lt;- rbind(result_clusterprofiler_T,result_clusterprofiler_T_temp) # clusterProfiler-F pathway_clusterprofiler_F_filter &lt;- pathway_clusterprofiler_F %&gt;% filter(pvalue &lt; i) result_clusterprofiler_F_temp &lt;- data.frame(n=nrow(pathway_clusterprofiler_F_filter),cutoff=i) result_clusterprofiler_F &lt;- rbind(result_clusterprofiler_F,result_clusterprofiler_F_temp) } result &lt;- rbind(result_mnet_hypergeo %&gt;% mutate(type=&quot;MNet_hypergeo&quot;), result_mnet_fisher %&gt;% mutate(type=&quot;MNet_fisher&quot;), result_mnet_binomial %&gt;% mutate(type=&quot;MNet_binomial&quot;), result_clusterprofiler_F %&gt;% mutate(type=&quot;clusterprofiler_F&quot;)) p &lt;- ggplot(result,aes(cutoff,n))+ geom_point(color=&quot;gray&quot;,size=.5)+ geom_smooth(aes(color=type))+ geom_vline(xintercept=c(0.01), linetype = &#39;dashed&#39;,color=&quot;gray&quot;)+ scale_color_manual(values=c(&quot;MNet_hypergeo&quot;=&quot;#F94141&quot;, &quot;MNet_fisher&quot;=&quot;#f16c23&quot;, &quot;MNet_binomial&quot;=&quot;#F3B169&quot;, &quot;clusterprofiler_F&quot;=&quot;#AA66EB&quot;))+ scale_x_reverse()+ theme_bw() ggsave(&quot;result/ORA/clusterprofiler-cutoff.pdf&quot;,p,width=6,height = 5) 3.2.2.3 Venn plot Quantifying the agreement of different methods using Venn diagrams. library(VennDiagram) pathway_mnet_hypergeo &lt;- data.table::fread(&quot;result/ORA/MNet-gene_hypergeo.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(name,pvalue) %&gt;% mutate(type=&quot;MNet_hypergeo&quot;) %&gt;% filter(pvalue &lt; 0.05) pathway_mnet_fisher &lt;- data.table::fread(&quot;result/ORA/MNet-gene_fisher.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(name,pvalue) %&gt;% mutate(type=&quot;MNet_fisher&quot;) %&gt;% filter(pvalue &lt; 0.05) pathway_mnet_binomial &lt;- data.table::fread(&quot;result/ORA/MNet-gene_binomial.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(name,pvalue) %&gt;% mutate(type=&quot;MNet_binomial&quot;) %&gt;% filter(pvalue &lt; 0.05) pathway_clusterprofiler &lt;- data.table::fread(&quot;result/ORA/clusterprofiler-gene-F.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(ID %in% PathwayExtendData$kegg_pathwayid) %&gt;% dplyr::select(Description,pvalue) %&gt;% rename(&quot;name&quot;=&quot;Description&quot;) %&gt;% mutate(type=&quot;clusterprofiler&quot;) %&gt;% filter(pvalue &lt; 0.05) a&lt;-venn.diagram(list(mnet_hypergeo=pathway_mnet_hypergeo$name, mnet_fisher=pathway_mnet_fisher$name, mnet_binomial=pathway_mnet_binomial$name, clusterprofiler=pathway_clusterprofiler$name), filename=NULL,fill=c(&quot;#F94141&quot;,&quot;#f16c23&quot;,&quot;#F3B169&quot;,&quot;#AA66EB&quot;),alpha =0.9) pdf(&quot;result/ORA/clusterprofiler-venn.pdf&quot;,width=5,height = 5) grid.draw(a) dev.off() 3.2.3 Compare MNet with PaintOmics 3.2.3.1 Analyze data Analyzing metabolites and metabolite-related genes data using MNet and PaintOmics and using different method parameters. library(dplyr) library(MNet) all_meta &lt;- mlimma(meta_dat,group) ## metabolite ### Filter the increase differential genes and metabolites diff_meta &lt;- all_meta %&gt;% dplyr::filter(abs(logFC) &gt; 0.58) %&gt;% dplyr::filter(adj.P.Val &lt; 0.05) all_gene &lt;- mlimma(gene_dat,group) ## gene ## Filter the increase differential genes and metabolites diff_gene &lt;- all_gene %&gt;% dplyr::filter(abs(logFC) &gt; 0.58) %&gt;% dplyr::filter(adj.P.Val &lt; 0.05) result &lt;- rbind(diff_meta,diff_gene) %&gt;% filter(name %in% PathwayExtendData$name) result_pathway_hypergeo &lt;- ePEAlyser(result$name,out=&quot;Extended&quot;,p_cutoff=1.1,test=&quot;hypergeo&quot;) write.table(result_pathway_hypergeo$output,&quot;result/ORA/MNet-Extended-hypergeo.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) result_pathway_fisher &lt;- ePEAlyser(result$name,out=&quot;Extended&quot;,p_cutoff=1.1,test=&quot;fisher&quot;) write.table(result_pathway_fisher$output,&quot;result/ORA/MNet-Extended-fisher.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) result_pathway_binomial &lt;- ePEAlyser(result$name,out=&quot;Extended&quot;,p_cutoff=1.1,test=&quot;binomial&quot;) write.table(result_pathway_binomial$output,&quot;result/ORA/MNet-Extended-binomial.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) 3.2.3.2 Set different cutoffs Compare the stability of the results of different methods under different cutoff values. library(ggplot2) pathway_mnet_hypergeo &lt;- data.table::fread(&quot;result/ORA/MNet-Extended-hypergeo.txt&quot;) %&gt;% as.data.frame() pathway_mnet_fisher &lt;- data.table::fread(&quot;result/ORA/MNet-Extended-fisher.txt&quot;) %&gt;% as.data.frame() pathway_mnet_binomial &lt;- data.table::fread(&quot;result/ORA/MNet-Extended-binomial.txt&quot;) %&gt;% as.data.frame() pathway_paintomics &lt;- data.table::fread(&quot;result/ORA/PaintOmics.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(-V7) %&gt;% dplyr::filter(`Pathway name` %in% PathwayExtendData$kegg_pathwayname) n = seq(1,0.0001,-0.005) result_mnet_hypergeo &lt;- data.frame() result_mnet_fisher &lt;- data.frame() result_mnet_binomial &lt;- data.frame() result_paintomics &lt;- data.frame() for (i in n) { ## hypergeo pathway_mnet_filter &lt;- pathway_mnet_hypergeo %&gt;% filter(pvalue &lt; i) result_mnet_temp &lt;- data.frame(n=nrow(pathway_mnet_filter),cutoff=i) result_mnet_hypergeo &lt;- rbind(result_mnet_hypergeo,result_mnet_temp) ## fisher pathway_mnet_filter &lt;- pathway_mnet_fisher %&gt;% filter(pvalue &lt; i) result_mnet_temp &lt;- data.frame(n=nrow(pathway_mnet_filter),cutoff=i) result_mnet_fisher &lt;- rbind(result_mnet_fisher,result_mnet_temp) ## binomial pathway_mnet_filter &lt;- pathway_mnet_binomial %&gt;% filter(pvalue &lt; i) result_mnet_temp &lt;- data.frame(n=nrow(pathway_mnet_filter),cutoff=i) result_mnet_binomial &lt;- rbind(result_mnet_binomial,result_mnet_temp) ## hypergeometric pathway_paintomics_filter &lt;- pathway_paintomics %&gt;% filter(`Combined pValue(Fisher)` &lt; i) result_paintomics_temp &lt;- data.frame(n=nrow(pathway_paintomics_filter),cutoff=i) result_paintomics &lt;- rbind(result_paintomics,result_paintomics_temp) } result &lt;- rbind(result_mnet_hypergeo %&gt;% mutate(type=&quot;MNet_hypergeo&quot;), result_mnet_fisher %&gt;% mutate(type=&quot;MNet_fisher&quot;), result_mnet_binomial %&gt;% mutate(type=&quot;MNet_binomial&quot;), result_paintomics %&gt;% mutate(type=&quot;paintomics&quot;)) p &lt;- ggplot(result,aes(cutoff,n))+ geom_point(color=&quot;gray&quot;,size=.5)+ geom_smooth(aes(color=type))+ geom_vline(xintercept=c(0.01), linetype = &#39;dashed&#39;,color=&quot;gray&quot;)+ scale_color_manual(values=c(&quot;#F3B169&quot;,&quot;#f16c23&quot;,&quot;#F94141&quot;,&quot;#008080&quot;))+ scale_x_reverse()+ theme_bw() ggsave(&quot;result/ORA/PaintOmics-cutoff.pdf&quot;,p,width=6.5,height = 5) 3.2.3.3 Venn plot Quantifying the agreement of different methods using Venn diagrams. library(VennDiagram) pathway_mnet_hypergeo &lt;- data.table::fread(&quot;result/ORA/MNet-Extended-hypergeo.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pvalue &lt; 0.05) pathway_mnet_fisher &lt;- data.table::fread(&quot;result/ORA/MNet-Extended-fisher.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pvalue &lt; 0.05) pathway_mnet_binomial &lt;- data.table::fread(&quot;result/ORA/MNet-Extended-binomial.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pvalue &lt; 0.05) ## Running metabolite pathway analysis at PaintOmics4 website pathway_paintomics &lt;- data.table::fread(&quot;result/ORA/PaintOmics.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(`Pathway name` %in% PathwayExtendData$kegg_pathwayname) %&gt;% dplyr::filter(`Combined pValue(Fisher)` &lt; 0.05) venn.plot &lt;- venn.diagram( x = list( MNet_hypergeo = pathway_mnet_hypergeo$name, MNet_fisher = pathway_mnet_fisher$name, MNet_binomial = pathway_mnet_binomial$name, PaintOmics = pathway_paintomics$`Pathway name`), filename = NULL, fill = c(&quot;#F94141&quot;,&quot;#f16c23&quot;,&quot;#F3B169&quot;,&quot;#008080&quot;), alpha = 0.9) pdf(&quot;result/ORA/MNet-PaintOmics-venn.pdf&quot;,width=7,height = 7) grid.draw(venn.plot) dev.off() 3.2.4 Barplot 3.2.4.1 MNet vs TidyMass The metabolites enriched pathways by MNer and TidyMass. library(dplyr) library(ggplot2) library(MNet) pathway_mnet_hypergeo &lt;- data.table::fread(&quot;result/ORA/MNet_pathway-hypergeo.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pvalue &lt; 0.05) %&gt;% dplyr::select(name,pvalue) %&gt;% dplyr::mutate(type=&quot;MNet_hypergeo&quot;) pathway_mnet_fisher &lt;- data.table::fread(&quot;result/ORA/MNet_pathway-fisher.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pvalue &lt; 0.05)%&gt;% dplyr::select(name,pvalue) %&gt;% dplyr::mutate(type=&quot;MNet_fisher&quot;) pathway_mnet_binomial &lt;- data.table::fread(&quot;result/ORA/MNet_pathway-binomial.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pvalue &lt; 0.05)%&gt;% dplyr::select(name,pvalue) %&gt;% dplyr::mutate(type=&quot;MNet_binomial&quot;) pathway_tidymass_hypergeometric &lt;- data.table::fread(&quot;result/ORA/TidyMass_pathway-hypergeometric.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pathway_name %in% PathwayExtendData$kegg_pathwayname) %&gt;% dplyr::filter(p_value &lt; 0.05) %&gt;% dplyr::select(pathway_name,p_value) %&gt;% dplyr::rename(&quot;name&quot;=&quot;pathway_name&quot;,&quot;pvalue&quot;=&quot;p_value&quot;) %&gt;% dplyr::mutate(type=&quot;TidyMass_hypergeometric&quot;) pathway_tidymass_fisher &lt;- data.table::fread(&quot;result/ORA/TidyMass_pathway-fisher.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pathway_name %in% PathwayExtendData$kegg_pathwayname) %&gt;% dplyr::filter(p_value &lt; 0.05) %&gt;% dplyr::select(pathway_name,p_value) %&gt;% dplyr::rename(&quot;name&quot;=&quot;pathway_name&quot;,&quot;pvalue&quot;=&quot;p_value&quot;) %&gt;% dplyr::mutate(type=&quot;TidyMass_fisher&quot;) result &lt;- rbind(pathway_mnet_hypergeo,pathway_mnet_fisher,pathway_mnet_binomial, pathway_tidymass_hypergeometric,pathway_tidymass_fisher) %&gt;% dplyr::arrange(pvalue) %&gt;% dplyr::arrange(type) result$name &lt;- factor(result$name,levels = rev(unique(result$name))) result$type &lt;- factor(result$type,levels=c(&quot;MNet_hypergeo&quot;,&quot;MNet_fisher&quot;,&quot;MNet_binomial&quot;,&quot;TidyMass_hypergeometric&quot;,&quot;TidyMass_fisher&quot;)) p_all &lt;- ggplot(result,aes(name,-log10(pvalue))) + geom_bar(aes(fill=type),stat=&quot;identity&quot;)+ scale_fill_manual(values=c(&quot;MNet_fisher&quot;=&quot;#f16c23&quot;,&quot;MNet_hypergeo&quot;=&quot;#F94141&quot;,&quot;MNet_binomial&quot;=&quot;#F3B169&quot;, &quot;TidyMass_hypergeometric&quot;=&quot;#589FF3&quot;,&quot;TidyMass_fisher&quot;=&quot;#37AB78&quot;),name=&quot;Method&quot;)+ facet_grid(. ~ type)+ theme_bw()+ coord_flip() ggsave(&quot;result/ORA/MNet_TidyMass_barplot.pdf&quot;,p_all,width=12,height = 7) 3.2.4.2 MNet vs clusterProfiler The genes enriched pathways by MNwt and clusterProfiler. library(dplyr) library(ggplot2) library(MNet) pathway_mnet_hypergeo &lt;- data.table::fread(&quot;result/ORA/MNet-gene_hypergeo.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(name,pvalue) %&gt;% mutate(type=&quot;MNet_hypergeo&quot;) %&gt;% filter(pvalue &lt; 0.05) pathway_mnet_fisher &lt;- data.table::fread(&quot;result/ORA/MNet-gene_fisher.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(name,pvalue) %&gt;% mutate(type=&quot;MNet_fisher&quot;) %&gt;% filter(pvalue &lt; 0.05) pathway_mnet_binomial &lt;- data.table::fread(&quot;result/ORA/MNet-gene_binomial.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(name,pvalue) %&gt;% mutate(type=&quot;MNet_binomial&quot;) %&gt;% filter(pvalue &lt; 0.05) pathway_clusterprofiler &lt;- data.table::fread(&quot;result/ORA/clusterprofiler-gene-F.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(ID %in% PathwayExtendData$kegg_pathwayid) %&gt;% dplyr::select(Description,pvalue) %&gt;% dplyr::rename(&quot;name&quot;=&quot;Description&quot;) %&gt;% mutate(type=&quot;clusterprofiler&quot;) %&gt;% filter(pvalue &lt; 0.05) pathway_all_filter &lt;- rbind(pathway_clusterprofiler,pathway_mnet_hypergeo, pathway_mnet_fisher,pathway_mnet_binomial) %&gt;% as.data.frame() %&gt;% arrange(desc(pvalue)) %&gt;% arrange(match(type,c(&quot;clusterprofiler&quot;,&quot;MNet_binomial&quot;,&quot;MNet_fisher&quot;,&quot;MNet_hypergeo&quot;))) %&gt;% mutate(name=factor(name,levels=unique(name))) pathway_all_filter$type &lt;- factor(pathway_all_filter$type,levels=c(&quot;MNet_hypergeo&quot;,&quot;MNet_fisher&quot;,&quot;MNet_binomial&quot;,&quot;clusterprofiler&quot;)) p_all &lt;- ggplot(pathway_all_filter,aes(name,-log10(pvalue),fill=type))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;)+ scale_fill_manual(values=c(&quot;MNet_fisher&quot;=&quot;#f16c23&quot;,&quot;MNet_hypergeo&quot;=&quot;#F94141&quot;,&quot;MNet_binomial&quot;=&quot;#F3B169&quot;,&quot;clusterprofiler&quot;=&quot;#AA66EB&quot;))+ theme_bw()+ facet_grid(. ~ type)+ coord_flip() ggsave(&quot;result/ORA/MNet_clusterprofiler_barplot.pdf&quot;,p_all,width=12,height = 3.5) 3.2.4.3 MNet vs PaintOmics The extended enriched pathways by MNet and PaintOmics4. library(dplyr) library(ggplot2) library(MNet) pathway_mnet_hypergeo &lt;- data.table::fread(&quot;result/ORA/MNet-Extended-hypergeo.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(name,pvalue) %&gt;% mutate(type=&quot;MNet_hypergeo&quot;) %&gt;% filter(pvalue &lt; 0.05) pathway_mnet_fisher &lt;- data.table::fread(&quot;result/ORA/MNet-Extended-fisher.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(name,pvalue) %&gt;% mutate(type=&quot;MNet_fisher&quot;) %&gt;% filter(pvalue &lt; 0.05) pathway_mnet_binomial &lt;- data.table::fread(&quot;result/ORA/MNet-Extended-binomial.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(name,pvalue) %&gt;% mutate(type=&quot;MNet_binomial&quot;) %&gt;% filter(pvalue &lt; 0.05) ## Running metabolite pathway analysis at paintomics website pathway_paintomics &lt;- data.table::fread(&quot;result/ORA/PaintOmics.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(`Pathway name` %in% PathwayExtendData$kegg_pathwayname) %&gt;% dplyr::rename(&quot;name&quot;=&quot;Pathway name&quot;) %&gt;% dplyr::filter(`Combined pValue(Fisher)` &lt; 0.05) %&gt;% dplyr::rename(&quot;pvalue&quot;=&quot;Combined pValue(Fisher)&quot;) %&gt;% mutate(type=&quot;PaintOmics&quot;) pathway_all_filter &lt;- rbind(pathway_paintomics,pathway_mnet_hypergeo, pathway_mnet_fisher,pathway_mnet_binomial) %&gt;% as.data.frame() %&gt;% arrange(match(type,c(&quot;paintomics&quot;,&quot;MNet_binomial&quot;,&quot;MNet_fisher&quot;,&quot;MNet_hypergeo&quot;))) %&gt;% arrange(desc(pvalue)) %&gt;% mutate(name=factor(name,levels=unique(name))) pathway_all_filter$type &lt;- factor(pathway_all_filter$type,levels=c(&quot;MNet_hypergeo&quot;,&quot;MNet_fisher&quot;,&quot;MNet_binomial&quot;,&quot;paintomics&quot;)) p_all &lt;- ggplot(pathway_all_filter,aes(name,-log10(pvalue),fill=type))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;)+ scale_fill_manual(values=c(&quot;MNet_fisher&quot;=&quot;#f16c23&quot;,&quot;MNet_hypergeo&quot;=&quot;#F94141&quot;,&quot;MNet_binomial&quot;=&quot;#F3B169&quot;,&quot;paintomics&quot;=&quot;#008080&quot;))+ theme_bw()+ facet_grid(. ~ type)+ coord_flip() ggsave(&quot;result/ORA/MNet_extended_barplot.pdf&quot;,p_all,width=12,height = 6) 3.2.4.4 Runtime Comparison of running time between different software. library(dplyr) library(MNet) library(tidymass) library(clusterProfiler) library(KEGG.db) library(ggplot2) ## Metabolite all_meta &lt;- mlimma(meta_dat,group) diff_meta &lt;- all_meta %&gt;% dplyr::filter(abs(logFC) &gt; 0.58) %&gt;% dplyr::filter(adj.P.Val &lt; 0.05) data(&quot;kegg_hsa_pathway&quot;, package = &quot;metpath&quot;) pathway_database = kegg_hsa_pathway ### MNet-hypergeo time_start &lt;- Sys.time() result_meta &lt;- ePEAlyser(diff_meta$name,out=&quot;metabolite&quot;,p_cutoff=1.5,test=&quot;hypergeo&quot;) time_end &lt;- Sys.time() run_time &lt;- difftime(time_end, time_start, units = &quot;secs&quot;) print(paste(&quot;MT-MNet-hypergeo_code execution time:&quot;, round(run_time, 2), &quot;second&quot;)) ### MNet-fisher time_start &lt;- Sys.time() result_meta &lt;- ePEAlyser(diff_meta$name,out=&quot;metabolite&quot;,p_cutoff=1.5,test=&quot;fisher&quot;) time_end &lt;- Sys.time() run_time &lt;- difftime(time_end, time_start, units = &quot;secs&quot;) print(paste(&quot;MT-MNet-fisher—_code execution time:&quot;, round(run_time, 2), &quot;second&quot;)) ### MNet-binomial time_start &lt;- Sys.time() result_meta &lt;- ePEAlyser(diff_meta$name,out=&quot;metabolite&quot;,p_cutoff=1.5,test=&quot;binomial&quot;) time_end &lt;- Sys.time() run_time &lt;- difftime(time_end, time_start, units = &quot;secs&quot;) print(paste(&quot;MT-MNet-binomial_code execution time:&quot;, round(run_time, 2), &quot;second&quot;)) ### Tidymass-hypergeometric time_start &lt;- Sys.time() result &lt;- enrich_kegg(query_id = diff_meta$name, query_type = &quot;compound&quot;, id_type = &quot;KEGG&quot;,method = &quot;hypergeometric&quot;, pathway_database = pathway_database, p_cutoff = 1.1, p_adjust_method = &quot;BH&quot;, threads = 10) time_end &lt;- Sys.time() run_time &lt;- difftime(time_end, time_start, units = &quot;secs&quot;) print(paste(&quot;MT-Tidymass-hypergeometric_code execution time:&quot;, round(run_time, 2), &quot;second&quot;)) ### Tidymass-fisher time_start &lt;- Sys.time() result &lt;- enrich_kegg(query_id = diff_meta$name, query_type = &quot;compound&quot;, id_type = &quot;KEGG&quot;,method = &quot;fisher&quot;, pathway_database = pathway_database, p_cutoff = 1.1, p_adjust_method = &quot;BH&quot;, threads = 10) time_end &lt;- Sys.time() run_time &lt;- difftime(time_end, time_start, units = &quot;secs&quot;) print(paste(&quot;MT-Tidymass-fisher_code execution time:&quot;, round(run_time, 2), &quot;second&quot;)) ## Gene all_gene &lt;- mlimma(gene_dat,group) gene_filter &lt;- PathwayExtendData %&gt;% filter(type==&quot;gene&quot;) %&gt;% pull(name) %&gt;% unique() diff_gene_all &lt;- all_gene %&gt;% dplyr::filter(abs(logFC) &gt; 0.58) %&gt;% dplyr::filter(adj.P.Val &lt; 0.05) gene.data &lt;- clusterProfiler::bitr(diff_gene_all$name,fromType = &quot;SYMBOL&quot;,toType =&quot;ENTREZID&quot;,OrgDb=&#39;org.Hs.eg.db&#39;) diff_gene_clusterprofiler &lt;- diff_gene_all %&gt;% inner_join(gene.data,by=c(&quot;name&quot;=&quot;SYMBOL&quot;)) diff_gene_mnet &lt;- diff_gene_all %&gt;% filter(name %in% gene_filter) ### MNet-hypergeo time_start &lt;- Sys.time() gene_MNet_result_hypergeo &lt;- ePEAlyser(diff_gene_mnet$name,out=&quot;gene&quot;,p_cutoff=1.1,test=&quot;hypergeo&quot;) time_end &lt;- Sys.time() run_time &lt;- difftime(time_end, time_start, units = &quot;secs&quot;) print(paste(&quot;MT-MNet-hypergeo_code execution time:&quot;, round(run_time, 2), &quot;second&quot;)) ### MNet-fisher time_start &lt;- Sys.time() gene_MNet_result_fisher &lt;- ePEAlyser(diff_gene_mnet$name,out=&quot;gene&quot;,p_cutoff=1.1,test=&quot;fisher&quot;) time_end &lt;- Sys.time() run_time &lt;- difftime(time_end, time_start, units = &quot;secs&quot;) print(paste(&quot;MT-MNet-fisher_code execution time:&quot;, round(run_time, 2), &quot;second&quot;)) ### MNet-binomial time_start &lt;- Sys.time() gene_MNet_result_binomial &lt;- ePEAlyser(diff_gene_mnet$name,out=&quot;gene&quot;,p_cutoff=1.1,test=&quot;binomial&quot;) time_end &lt;- Sys.time() run_time &lt;- difftime(time_end, time_start, units = &quot;secs&quot;) print(paste(&quot;MT-MNet-binomial_code execution time:&quot;, round(run_time, 2), &quot;second&quot;)) ### clusterProfiler time_start &lt;- Sys.time() kegg_F &lt;- enrichKEGG( gene = diff_gene_clusterprofiler$ENTREZID, keyType = &#39;kegg&#39;, organism = &#39;hsa&#39;, minGSSize = 1, pAdjustMethod = &#39;BH&#39;, pvalueCutoff = 1.1, use_internal_data = F) time_end &lt;- Sys.time() run_time &lt;- difftime(time_end, time_start, units = &quot;secs&quot;) print(paste(&quot;MC-Clusterprofiler-F_code execution time:&quot;, round(run_time, 2), &quot;second&quot;)) ## Extend all_meta &lt;- mlimma(meta_dat,group) ## metabolite ### Filter the increase differential genes and metabolites diff_meta &lt;- all_meta %&gt;% dplyr::filter(abs(logFC) &gt; 0.58) %&gt;% dplyr::filter(adj.P.Val &lt; 0.05) all_gene &lt;- mlimma(gene_dat,group) ## gene ## Filter the increase differential genes and metabolites diff_gene &lt;- all_gene %&gt;% dplyr::filter(abs(logFC) &gt; 0.58) %&gt;% dplyr::filter(adj.P.Val &lt; 0.05) result &lt;- rbind(diff_meta,diff_gene) %&gt;% filter(name %in% PathwayExtendData$name) ### MNet-hypergeo time_start &lt;- Sys.time() result_pathway_fisher &lt;- ePEAlyser(result$name,out=&quot;Extended&quot;,p_cutoff=1.1,test=&quot;hypergeo&quot;) time_end &lt;- Sys.time() run_time &lt;- difftime(time_end, time_start, units = &quot;secs&quot;) print(paste(&quot;MP-MNet-hypergeo_code execution time:&quot;, round(run_time, 2), &quot;second&quot;)) ### MNet-fisher time_start &lt;- Sys.time() result_pathway_fisher &lt;- ePEAlyser(result$name,out=&quot;Extended&quot;,p_cutoff=1.1,test=&quot;fisher&quot;) time_end &lt;- Sys.time() run_time &lt;- difftime(time_end, time_start, units = &quot;secs&quot;) print(paste(&quot;MP-MNet-fisher_code execution time:&quot;, round(run_time, 2), &quot;second&quot;)) ### MNet-binomial time_start &lt;- Sys.time() result_pathway_fisher &lt;- ePEAlyser(result$name,out=&quot;Extended&quot;,p_cutoff=1.1,test=&quot;binomial&quot;) time_end &lt;- Sys.time() run_time &lt;- difftime(time_end, time_start, units = &quot;secs&quot;) print(paste(&quot;MP-MNet-binomial_code execution time:&quot;, round(run_time, 2), &quot;second&quot;)) ### PaintOmics4 print(&quot;MP-PaintOmics4_code execution time: 228.71 second&quot;) ## Barplot dat &lt;- data.frame( y = c(1.34,0.45,0.41,164.88,161.44,0.52,0.49,0.49,6.16,0.52,0.57,0.5,228.71), x = c(&quot;MNet-hypergeo&quot;,&quot;MNet-fisher&quot;,&quot;MNet-binomial&quot;,&quot;TidyMass-hypergeo&quot;,&quot;TidyMass-fisher&quot;,&quot;MNet-hypergeo&quot;,&quot;MNet-fisher&quot;,&quot;MNet-binomial&quot;,&quot;Clusterprofiler&quot;,&quot;MNet-hypergeo&quot;,&quot;MNet-fisher&quot;,&quot;MNet-binomial&quot;,&quot;PaintOmics4&quot;), group = c(rep(&quot;Metabolite&quot;,5),rep(&quot;Gene&quot;,4),rep(&quot;Extend&quot;,4))) dat$group &lt;- factor(dat$group, levels = c(&quot;Metabolite&quot;,&quot;Gene&quot;,&quot;Extend&quot;)) dat$x &lt;- factor(dat$x,levels = c(&quot;MNet-hypergeo&quot;,&quot;MNet-fisher&quot;,&quot;MNet-binomial&quot;,&quot;TidyMass-hypergeo&quot;,&quot;TidyMass-fisher&quot;,&quot;Clusterprofiler&quot;,&quot;PaintOmics4&quot;)) corlor &lt;- c( &quot;MNet-fisher&quot;=&quot;#f16c23&quot;, &quot;MNet-hypergeo&quot;=&quot;#F94141&quot;, &quot;MNet-binomial&quot;=&quot;#F3B169&quot;, &quot;TidyMass-hypergeo&quot;=&quot;#589FF3&quot;, &quot;TidyMass-fisher&quot;=&quot;#37AB78&quot;, &quot;Clusterprofiler&quot;=&quot;#AA66EB&quot;, &quot;PaintOmics4&quot;=&quot;#008080&quot;) p &lt;- ggplot(dat, aes(x, y, fill = x)) + geom_bar(stat = &quot;identity&quot;) + scale_fill_manual(values = corlor) + theme_bw() + facet_wrap(~group,scales = &quot;free_x&quot;) + labs(y = &quot;Runtime (second)&quot;, x = &quot;Software Name&quot;) + theme(strip.text = element_text(size = 12)) ggsave(&quot;result/Runtime_comparison.pdf&quot;,p,width=5,height = 4) 3.3 Performance evaluation for GSEA 3.3.1 MNet Analyzing metabolites and metabolite-related genes data using MNet and using different method parameters. library(multiGSEA) library(org.Hs.eg.db) library(dplyr) library(MNet) data(transcriptome,package=&quot;multiGSEA&quot;) data(metabolome,package=&quot;multiGSEA&quot;) ah &lt;- AnnotationHub::AnnotationHub() aa &lt;- ah[[&quot;AH91792&quot;]] metabolome_1 &lt;- metabolome %&gt;% mutate(HMDB=gsub(&quot;HMDB&quot;,&quot;HMDB00&quot;,HMDB)) %&gt;% left_join(aa,by=&quot;HMDB&quot;) %&gt;% filter(!is.na(KEGG)) %&gt;% as.data.frame() %&gt;% dplyr::select(HMDB,logFC,pValue,KEGG,HMDB) %&gt;% unique() %&gt;% filter(KEGG %in% PathwayExtendData$name) %&gt;% distinct(KEGG,.keep_all = T) %&gt;% arrange(desc(logFC)) %&gt;% distinct(logFC,.keep_all = T) dat_metabolome &lt;- metabolome_1$logFC names(dat_metabolome) &lt;- metabolome_1$KEGG set.seed(1) result_metabolome &lt;- eSEAlyser(dat_metabolome,minSize = 1,out=&quot;metabolite&quot;,gseaParam=1,nPermSimple=1000) transcriptome_temp &lt;- transcriptome %&gt;% as.data.frame() %&gt;% filter(Symbol %in% PathwayExtendData$name) %&gt;% arrange(desc(logFC)) dat_transcriptome &lt;- transcriptome_temp$logFC names(dat_transcriptome) &lt;- transcriptome_temp$Symbol set.seed(1) result_transcriptome &lt;- eSEAlyser(dat_transcriptome,minSize = 1,out=&quot;gene&quot;,gseaParam=1,nPermSimple=1000) dat_all_temp &lt;- rbind(metabolome_1 %&gt;% dplyr::select(KEGG,logFC) %&gt;% dplyr::rename(&quot;name&quot;=&quot;KEGG&quot;), transcriptome %&gt;% as.data.frame() %&gt;% dplyr::select(Symbol,logFC) %&gt;% dplyr::rename(&quot;name&quot;=&quot;Symbol&quot;)) %&gt;% filter(name %in% PathwayExtendData$name) %&gt;% arrange(desc(logFC)) dat_all &lt;- dat_all_temp$logFC names(dat_all) &lt;- dat_all_temp$name set.seed(1) result_extended &lt;- eSEAlyser(dat_all,minSize = 1,out=&quot;Extended&quot;,gseaParam=1,nPermSimple=1000) write.table(result_metabolome,&quot;result/GSEA/MNet_GSEA_metabolome.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) write.table(result_transcriptome,&quot;result/GSEA/MNet_GSEA_transcriptome.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) write.table(result_extended,&quot;result/GSEA/MNet_GSEA_extended.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) 3.3.2 multiGSEA Analyzing metabolites and metabolite-related genes data using multiGSEA and using different method parameters. ## different data(transcriptome,package=&quot;multiGSEA&quot;) data(metabolome,package=&quot;multiGSEA&quot;) head(transcriptome) head(metabolome) transcriptome &lt;- transcriptome %&gt;% arrange(desc(logFC)) ah &lt;- AnnotationHub::AnnotationHub() aa &lt;- ah[[&quot;AH91792&quot;]] metabolome &lt;- metabolome %&gt;% mutate(HMDB=gsub(&quot;HMDB&quot;,&quot;HMDB00&quot;,HMDB)) %&gt;% left_join(aa,by=&quot;HMDB&quot;) %&gt;% filter(!is.na(KEGG)) %&gt;% as.data.frame() %&gt;% dplyr::select(HMDB,logFC,pValue,KEGG,HMDB) %&gt;% unique() %&gt;% distinct(KEGG,.keep_all = T) %&gt;% arrange(desc(logFC)) %&gt;% distinct(logFC,.keep_all = T) # create data structure omics_data &lt;- initOmicsDataStructure(layer = c(&quot;transcriptome&quot;,&quot;metabolome&quot;)) ## add transcriptome layer omics_data$transcriptome &lt;- transcriptome$logFC names(omics_data$transcriptome) &lt;- transcriptome$Symbol ## add metabolome layer ## HMDB features have to be updated to the new HMDB format omics_data$metabolome &lt;- metabolome$logFC names(omics_data$metabolome) &lt;- metabolome$KEGG databases &lt;- c(&quot;kegg&quot;) layers &lt;- names(omics_data) pathways &lt;- getMultiOmicsFeatures( dbs = databases, layer = layers, returnTranscriptome = &quot;SYMBOL&quot;, returnMetabolome = &quot;KEGG&quot;, useLocal = T) set.seed(1) enrichment_scores &lt;- multiGSEA(pathways, omics_data) df &lt;- extractPvalues( enrichmentScores = enrichment_scores, pathwayNames = names(pathways[[1]])) df$combined_pval &lt;- combinePvalues(df) df$combined_padj &lt;- p.adjust(df$combined_pval, method = &quot;BH&quot;) df &lt;- cbind(data.frame(pathway = names(pathways[[1]])), df) write.table(df,&quot;result/GSEA/multiGSEA-diff.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) ## same data(transcriptome,package=&quot;multiGSEA&quot;) data(metabolome,package=&quot;multiGSEA&quot;) head(transcriptome) head(metabolome) transcriptome &lt;- transcriptome %&gt;% filter(Symbol %in% PathwayExtendData$name) %&gt;% arrange(desc(logFC)) ah &lt;- AnnotationHub::AnnotationHub() aa &lt;- ah[[&quot;AH91792&quot;]] metabolome &lt;- metabolome %&gt;% mutate(HMDB=gsub(&quot;HMDB&quot;,&quot;HMDB00&quot;,HMDB)) %&gt;% left_join(aa,by=&quot;HMDB&quot;) %&gt;% filter(!is.na(KEGG)) %&gt;% as.data.frame() %&gt;% dplyr::select(HMDB,logFC,pValue,KEGG,HMDB) %&gt;% unique() %&gt;% filter(KEGG %in% PathwayExtendData$name) %&gt;% distinct(KEGG,.keep_all = T) %&gt;% arrange(desc(logFC)) %&gt;% distinct(logFC,.keep_all = T) # create data structure omics_data &lt;- initOmicsDataStructure(layer = c(&quot;transcriptome&quot;,&quot;metabolome&quot;)) ## add transcriptome layer omics_data$transcriptome &lt;- transcriptome$logFC names(omics_data$transcriptome) &lt;- transcriptome$Symbol ## add metabolome layer ## HMDB features have to be updated to the new HMDB format omics_data$metabolome &lt;- metabolome$logFC names(omics_data$metabolome) &lt;- metabolome$KEGG pathways &lt;- list() pathways$transcriptome &lt;- Pathways_gene pathways$metabolome &lt;- Pathways_metabolite set.seed(1) enrichment_scores &lt;- multiGSEA(pathways, omics_data) df &lt;- extractPvalues( enrichmentScores = enrichment_scores, pathwayNames = names(pathways[[1]])) df$combined_pval &lt;- combinePvalues(df) df$combined_padj &lt;- p.adjust(df$combined_pval, method = &quot;BH&quot;) df &lt;- cbind(data.frame(pathway = names(pathways[[1]])), df) write.table(df,&quot;result/GSEA/multiGSEA-same.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) 3.3.3 Comparison between MNet and multiGSEA 3.3.3.1 Set different cutoffs Compare the stability of the results of different methods under different cutoff values. library(ggplot2) dat_mnet_gene &lt;- data.table::fread(&quot;result/GSEA/MNet_GSEA_transcriptome.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(type=&quot;gene&quot;,software=&quot;MNet&quot;) dat_mnet_metabolite &lt;- data.table::fread(&quot;result/GSEA/MNet_GSEA_metabolome.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(type=&quot;metabolite&quot;,software=&quot;MNet&quot;) dat_mnet_extended &lt;- data.table::fread(&quot;result/GSEA/MNet_GSEA_extended.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(type=&quot;extended&quot;,software=&quot;MNet&quot;) dat_mnet_all &lt;- rbind(dat_mnet_gene,dat_mnet_metabolite,dat_mnet_extended) %&gt;% dplyr::select(pathway,pval,type,software) dat_multigsea &lt;- data.table::fread(&quot;result/GSEA/multiGSEA-diff.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(pathway=substr(pathway, 8, nchar(pathway))) %&gt;% filter(pathway %in% PathwayExtendData$kegg_pathwayname) %&gt;% dplyr::select(pathway,transcriptome_pval,metabolome_pval,combined_pval) dat_multigsea_melt &lt;- reshape2::melt(dat_multigsea,id=&quot;pathway&quot;) dat_multigsea_same &lt;- dat_multigsea_melt %&gt;% dplyr::rename(&quot;pval&quot;=&quot;value&quot;,&quot;type&quot;=&quot;variable&quot;) %&gt;% mutate(software=&quot;multiGSEA-diffdatabase&quot;) %&gt;% mutate(type=ifelse(type==&quot;transcriptome_pval&quot;,&quot;gene&quot;, ifelse(type==&quot;metabolome_pval&quot;,&quot;metabolite&quot;, ifelse(type==&quot;combined_pval&quot;,&quot;extended&quot;,&quot;jj&quot;)))) ## same database dat_multigsea &lt;- data.table::fread(&quot;result/GSEA/multiGSEA-same.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pathway %in% PathwayExtendData$kegg_pathwayname) %&gt;% dplyr::select(pathway,transcriptome_pval,metabolome_pval,combined_pval) dat_multigsea_melt &lt;- reshape2::melt(dat_multigsea,id=&quot;pathway&quot;) dat_multigsea_diff &lt;- dat_multigsea_melt %&gt;% dplyr::rename(&quot;pval&quot;=&quot;value&quot;,&quot;type&quot;=&quot;variable&quot;) %&gt;% mutate(software=&quot;multiGSEA-samedatabase&quot;) %&gt;% mutate(type=ifelse(type==&quot;transcriptome_pval&quot;,&quot;gene&quot;, ifelse(type==&quot;metabolome_pval&quot;,&quot;metabolite&quot;, ifelse(type==&quot;combined_pval&quot;,&quot;extended&quot;,&quot;jj&quot;)))) all &lt;- rbind(dat_mnet_all,dat_multigsea_same,dat_multigsea_diff) n = seq(1,0.0001,-0.005) result &lt;- data.frame() for (i in n) { ## Hypergeo result_temp &lt;- all %&gt;% filter(pval &lt; i) %&gt;% group_by(type,software) %&gt;% summarise(n=n()) %&gt;% as.data.frame() %&gt;% mutate(cutoff=i) result &lt;- rbind(result,result_temp) } result$type &lt;- factor(result$type,levels=c(&quot;metabolite&quot;,&quot;gene&quot;,&quot;extended&quot;)) p &lt;- ggplot(result,aes(cutoff,n))+ geom_point(color=&quot;gray&quot;,size=.5)+ geom_smooth(aes(color=software))+ geom_vline(xintercept=c(0.01), linetype = &#39;dashed&#39;,color=&quot;gray&quot;)+ facet_grid(. ~ type)+ scale_color_manual(values=c(&quot;MNet&quot;=&quot;#EF2C2B&quot;, &quot;multiGSEA-diffdatabase&quot;=&quot;#4FBD81&quot;, &quot;multiGSEA-samedatabase&quot;=&quot;#FFC839&quot;))+ scale_x_reverse()+ theme_bw() ggsave(&quot;result/GSEA/MNet-multiGSEA-cutoff.pdf&quot;,p,width=12,height = 5) 3.3.3.2 Venn plot Quantifying the agreement of different methods using Venn diagrams. library(VennDiagram) dat_mnet_gene &lt;- data.table::fread(&quot;result/GSEA/MNet_GSEA_transcriptome.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(type=&quot;gene&quot;,software=&quot;MNet&quot;) dat_mnet_metabolite &lt;- data.table::fread(&quot;result/GSEA/MNet_GSEA_metabolome.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(type=&quot;metabolite&quot;,software=&quot;MNet&quot;) dat_mnet_extended &lt;- data.table::fread(&quot;result/GSEA/MNet_GSEA_extended.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(type=&quot;extended&quot;,software=&quot;MNet&quot;) dat_mnet_all &lt;- rbind(dat_mnet_gene,dat_mnet_metabolite,dat_mnet_extended) %&gt;% dplyr::select(pathway,pval,type,software) dat_multigsea &lt;- data.table::fread(&quot;result/GSEA/multiGSEA-diff.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(pathway=substr(pathway, 8, nchar(pathway))) %&gt;% filter(pathway %in% PathwayExtendData$kegg_pathwayname) %&gt;% dplyr::select(pathway,transcriptome_pval,metabolome_pval,combined_pval) dat_multigsea_melt &lt;- reshape2::melt(dat_multigsea,id=&quot;pathway&quot;) dat_multigsea_diff &lt;- dat_multigsea_melt %&gt;% dplyr::rename(&quot;pval&quot;=&quot;value&quot;,&quot;type&quot;=&quot;variable&quot;) %&gt;% dplyr::mutate(software=&quot;multiGSEA-diffdatabase&quot;) %&gt;% dplyr::mutate(type=ifelse(type==&quot;transcriptome_pval&quot;,&quot;gene&quot;, ifelse(type==&quot;metabolome_pval&quot;,&quot;metabolite&quot;, ifelse(type==&quot;combined_pval&quot;,&quot;extended&quot;,&quot;jj&quot;)))) dat_multigsea &lt;- data.table::fread(&quot;result/GSEA/multiGSEA-same.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pathway %in% PathwayExtendData$kegg_pathwayname) %&gt;% dplyr::select(pathway,transcriptome_pval,metabolome_pval,combined_pval) dat_multigsea_melt &lt;- reshape2::melt(dat_multigsea,id=&quot;pathway&quot;) dat_multigsea_same &lt;- dat_multigsea_melt %&gt;% dplyr::rename(&quot;pval&quot;=&quot;value&quot;,&quot;type&quot;=&quot;variable&quot;) %&gt;% dplyr::mutate(software=&quot;multiGSEA-samedatabase&quot;) %&gt;% dplyr::mutate(type=ifelse(type==&quot;transcriptome_pval&quot;,&quot;gene&quot;, ifelse(type==&quot;metabolome_pval&quot;,&quot;metabolite&quot;, ifelse(type==&quot;combined_pval&quot;,&quot;extended&quot;,&quot;jj&quot;)))) all &lt;- rbind(dat_mnet_all,dat_multigsea_diff,dat_multigsea_same) all_filter &lt;- all %&gt;% filter(pval &lt; 0.01) all_filter_metabolite &lt;- all_filter %&gt;% filter(type==&quot;metabolite&quot;) all_filter_gene &lt;- all_filter %&gt;% filter(type==&quot;gene&quot;) all_filter_extended &lt;- all_filter %&gt;% filter(type==&quot;extended&quot;) ## metabolite metabolite_MNet_venn &lt;- all_filter_metabolite %&gt;% filter(software==&quot;MNet&quot;) %&gt;% pull(pathway) metabolite_multigsea_same_venn &lt;- all_filter_metabolite %&gt;% filter(software == &quot;multiGSEA-samedatabase&quot;) %&gt;% pull(pathway) metabolite_multigsea_diff_venn &lt;- all_filter_metabolite %&gt;% filter(software == &quot;multiGSEA-diffdatabase&quot;) %&gt;% pull(pathway) ## gene gene_MNet_venn &lt;- all_filter_gene %&gt;% filter(software==&quot;MNet&quot;) %&gt;% pull(pathway) gene_multigsea_same_venn &lt;- all_filter_gene %&gt;% filter(software == &quot;multiGSEA-samedatabase&quot;) %&gt;% pull(pathway) gene_multigsea_diff_venn &lt;- all_filter_gene %&gt;% filter(software == &quot;multiGSEA-diffdatabase&quot;) %&gt;% pull(pathway) ## extended extended_MNet_venn &lt;- all_filter_extended %&gt;% filter(software==&quot;MNet&quot;) %&gt;% pull(pathway) extended_multigsea_same_venn &lt;- all_filter_extended %&gt;% filter(software == &quot;multiGSEA-samedatabase&quot;) %&gt;% pull(pathway) extended_multigsea_diff_venn &lt;- all_filter_extended %&gt;% filter(software == &quot;multiGSEA-diffdatabase&quot;) %&gt;% pull(pathway) a&lt;-venn.diagram(list(metabolite_mnet=metabolite_MNet_venn, metabolite_multigsea_same=metabolite_multigsea_same_venn, metabolite_multigsea_diff=metabolite_multigsea_diff_venn), filename=NULL,fill=c(&quot;#EF2C2B&quot;,&quot;#FFC839&quot;,&quot;#4FBD81&quot;), alpha=0.9) pdf(&quot;result/GSEA/GSEA_metabolite_venn.pdf&quot;,width=5,height = 5) grid.draw(a) dev.off() a&lt;-venn.diagram(list(gene_mnet=gene_MNet_venn, gene_multigsea_same=gene_multigsea_same_venn, gene_multigsea_diff=gene_multigsea_diff_venn), filename=NULL,fill=c(&quot;#EF2C2B&quot;,&quot;#FFC839&quot;,&quot;#4FBD81&quot;), alpha=0.9) pdf(&quot;result/GSEA/GSEA_gene_venn.pdf&quot;,width=5,height = 5) grid.draw(a) dev.off() a&lt;-venn.diagram(list(extended_mnet=extended_MNet_venn, extended_multigsea_same=extended_multigsea_same_venn, extended_multigsea_diff=extended_multigsea_diff_venn), filename=NULL,fill=c(&quot;#EF2C2B&quot;,&quot;#FFC839&quot;,&quot;#4FBD81&quot;), alpha=0.9) pdf(&quot;result/GSEA/GSEA_extended_venn.pdf&quot;,width=5,height = 5) grid.draw(a) dev.off() 3.3.3.3 Barplot The barplot shows the results of the analysis using only metabolism, only metabolite-related genes, and the combination of both data. dat_mnet_gene &lt;- data.table::fread(&quot;result/GSEA/MNet_GSEA_transcriptome.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(type=&quot;gene&quot;,software=&quot;MNet&quot;) dat_mnet_metabolite &lt;- data.table::fread(&quot;result/GSEA/MNet_GSEA_metabolome.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(type=&quot;metabolite&quot;,software=&quot;MNet&quot;) dat_mnet_extended &lt;- data.table::fread(&quot;result/GSEA/MNet_GSEA_extended.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(type=&quot;extended&quot;,software=&quot;MNet&quot;) dat_mnet_all &lt;- rbind(dat_mnet_gene,dat_mnet_metabolite,dat_mnet_extended) %&gt;% dplyr::select(pathway,pval,type,software) dat_multigsea &lt;- data.table::fread(&quot;result/GSEA/multiGSEA-diff.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(pathway=substr(pathway, 8, nchar(pathway))) %&gt;% filter(pathway %in% PathwayExtendData$kegg_pathwayname) %&gt;% dplyr::select(pathway,transcriptome_pval,metabolome_pval,combined_pval) dat_multigsea_melt &lt;- reshape2::melt(dat_multigsea,id=&quot;pathway&quot;) dat_multigsea_diff &lt;- dat_multigsea_melt %&gt;% dplyr::rename(&quot;pval&quot;=&quot;value&quot;,&quot;type&quot;=&quot;variable&quot;) %&gt;% dplyr::mutate(software=&quot;multiGSEA-diffdatabase&quot;) %&gt;% dplyr::mutate(type=ifelse(type==&quot;transcriptome_pval&quot;,&quot;gene&quot;, ifelse(type==&quot;metabolome_pval&quot;,&quot;metabolite&quot;, ifelse(type==&quot;combined_pval&quot;,&quot;extended&quot;,&quot;jj&quot;)))) dat_multigsea &lt;- data.table::fread(&quot;result/GSEA/multiGSEA-same.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pathway %in% PathwayExtendData$kegg_pathwayname) %&gt;% dplyr::select(pathway,transcriptome_pval,metabolome_pval,combined_pval) dat_multigsea_melt &lt;- reshape2::melt(dat_multigsea,id=&quot;pathway&quot;) dat_multigsea_same &lt;- dat_multigsea_melt %&gt;% dplyr::rename(&quot;pval&quot;=&quot;value&quot;,&quot;type&quot;=&quot;variable&quot;) %&gt;% dplyr::mutate(software=&quot;multiGSEA-samedatabase&quot;) %&gt;% dplyr::mutate(type=ifelse(type==&quot;transcriptome_pval&quot;,&quot;gene&quot;, ifelse(type==&quot;metabolome_pval&quot;,&quot;metabolite&quot;, ifelse(type==&quot;combined_pval&quot;,&quot;extended&quot;,&quot;jj&quot;)))) all &lt;- rbind(dat_mnet_all,dat_multigsea_diff,dat_multigsea_same) all_filter &lt;- all %&gt;% filter(pval &lt; 0.01) all_filter_metabolite &lt;- all_filter %&gt;% filter(type==&quot;metabolite&quot;) %&gt;% arrange(desc(pval)) %&gt;% arrange(match(software,c(&quot;multiGSEA-diffdatabase&quot;,&quot;multiGSEA-samedatabase&quot;,&quot;MNet&quot;))) %&gt;% mutate(pathway=factor(pathway, levels = unique(pathway))) %&gt;% mutate(software=factor(software,levels=c(&quot;MNet&quot;,&quot;multiGSEA-samedatabase&quot;,&quot;multiGSEA-diffdatabase&quot;))) all_filter_gene &lt;- all_filter %&gt;% filter(type==&quot;gene&quot;) %&gt;% arrange(desc(pval)) %&gt;% arrange(match(software,c(&quot;multiGSEA-diffdatabase&quot;,&quot;multiGSEA-samedatabase&quot;,&quot;MNet&quot;))) %&gt;% mutate(pathway=factor(pathway,levels = unique(pathway))) %&gt;% mutate(software=factor(software,levels=c(&quot;MNet&quot;,&quot;multiGSEA-samedatabase&quot;,&quot;multiGSEA-diffdatabase&quot;))) all_filter_extended &lt;- all_filter %&gt;% filter(type==&quot;extended&quot;) %&gt;% arrange(desc(pval)) %&gt;% arrange(match(software,c(&quot;multiGSEA-diffdatabase&quot;,&quot;multiGSEA-samedatabase&quot;,&quot;MNet&quot;))) %&gt;% mutate(pathway=factor(pathway,levels = unique(pathway))) %&gt;% mutate(software=factor(software,levels=c(&quot;MNet&quot;,&quot;multiGSEA-samedatabase&quot;,&quot;multiGSEA-diffdatabase&quot;))) p_metabolite &lt;- ggplot(all_filter_metabolite,aes(pathway,-log10(pval),fill=software))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;)+ scale_fill_manual(values=c(&quot;#EF2C2B&quot;,&quot;#FFC839&quot;,&quot;#4FBD81&quot;))+ theme_bw()+ facet_grid(. ~ software)+ coord_flip()+ labs(title=&quot;metabolite&quot;) #p_metabolite p_gene &lt;- ggplot(all_filter_gene,aes(pathway,-log10(pval),fill=software))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;)+ scale_fill_manual(values=c(&quot;#EF2C2B&quot;,&quot;#FFC839&quot;,&quot;#4FBD81&quot;))+ theme_bw()+ facet_grid(. ~ software)+ coord_flip()+ labs(title=&quot;gene&quot;) #p_gene p_extended &lt;- ggplot(all_filter_extended,aes(pathway,-log10(pval),fill=software))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;)+ scale_fill_manual(values=c(&quot;#EF2C2B&quot;,&quot;#FFC839&quot;,&quot;#4FBD81&quot;))+ theme_bw()+ facet_grid(. ~ software)+ coord_flip()+ labs(title=&quot;extended&quot;) #p_extended ggsave(&quot;result/GSEA/GSEA_metabolite_barplot.pdf&quot;,p_metabolite,width=8,height = 3) ggsave(&quot;result/GSEA/GSEA_gene_barplot.pdf&quot;,p_gene,width=8,height = 2) ggsave(&quot;result/GSEA/GSEA_extended_barplot.pdf&quot;,p_extended,width=8,height = 3) 3.3.3.4 Radar plot Quantifying the agreement of different methods using radar diagrams. library(dplyr) library(MNet) library(ggplot2) library(fmsb) ## Metabolite dat_mnet_gene &lt;- data.table::fread(&quot;result/GSEA/MNet_GSEA_transcriptome.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(type=&quot;gene&quot;,software=&quot;MNet&quot;) dat_mnet_metabolite &lt;- data.table::fread(&quot;result/GSEA/MNet_GSEA_metabolome.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(type=&quot;metabolite&quot;,software=&quot;MNet&quot;) dat_mnet_extended &lt;- data.table::fread(&quot;result/GSEA/MNet_GSEA_extended.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(type=&quot;extended&quot;,software=&quot;MNet&quot;) dat_mnet_all &lt;- rbind(dat_mnet_gene,dat_mnet_metabolite,dat_mnet_extended) %&gt;% dplyr::select(pathway,pval,type,software) dat_multigsea &lt;- data.table::fread(&quot;result/GSEA/multiGSEA-diff.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(pathway=substr(pathway, 8, nchar(pathway))) %&gt;% filter(pathway %in% PathwayExtendData$kegg_pathwayname) %&gt;% dplyr::select(pathway,transcriptome_pval,metabolome_pval,combined_pval) dat_multigsea_melt &lt;- reshape2::melt(dat_multigsea,id=&quot;pathway&quot;) dat_multigsea_diff &lt;- dat_multigsea_melt %&gt;% dplyr::rename(&quot;pval&quot;=&quot;value&quot;,&quot;type&quot;=&quot;variable&quot;) %&gt;% dplyr::mutate(software=&quot;multiGSEA-diffdatabase&quot;) %&gt;% dplyr::mutate(type=ifelse(type==&quot;transcriptome_pval&quot;,&quot;gene&quot;, ifelse(type==&quot;metabolome_pval&quot;,&quot;metabolite&quot;, ifelse(type==&quot;combined_pval&quot;,&quot;extended&quot;,&quot;jj&quot;)))) dat_multigsea &lt;- data.table::fread(&quot;result/GSEA/multiGSEA-same.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pathway %in% PathwayExtendData$kegg_pathwayname) %&gt;% dplyr::select(pathway,transcriptome_pval,metabolome_pval,combined_pval) dat_multigsea_melt &lt;- reshape2::melt(dat_multigsea,id=&quot;pathway&quot;) dat_multigsea_same &lt;- dat_multigsea_melt %&gt;% dplyr::rename(&quot;pval&quot;=&quot;value&quot;,&quot;type&quot;=&quot;variable&quot;) %&gt;% dplyr::mutate(software=&quot;multiGSEA-samedatabase&quot;) %&gt;% dplyr::mutate(type=ifelse(type==&quot;transcriptome_pval&quot;,&quot;gene&quot;, ifelse(type==&quot;metabolome_pval&quot;,&quot;metabolite&quot;, ifelse(type==&quot;combined_pval&quot;,&quot;extended&quot;,&quot;jj&quot;)))) all &lt;- rbind(dat_mnet_all,dat_multigsea_diff,dat_multigsea_same) pathway_filter_metabolite &lt;- all %&gt;% filter(type == &quot;metabolite&quot;) %&gt;% filter(pval &lt; 0.01) %&gt;% pull(pathway) %&gt;% unique() all_metabolite_filter &lt;- all %&gt;% filter(type == &quot;metabolite&quot;) %&gt;% filter(pathway %in% pathway_filter_metabolite) all_metabolite_MNet &lt;- all_metabolite_filter %&gt;% filter(software == &quot;MNet&quot;) %&gt;% arrange(match(pathway,pathway_filter_metabolite)) %&gt;% dplyr::select(pval,pathway) %&gt;% mutate(pval=-log10(pval)) %&gt;% tibble::column_to_rownames(&quot;pathway&quot;) %&gt;% dplyr::rename(&quot;MNet&quot;=&quot;pval&quot;) all_metabolite_multiGSEA_samedatabase &lt;- all_metabolite_filter %&gt;% filter(software == &quot;multiGSEA-samedatabase&quot;) %&gt;% arrange(match(pathway,pathway_filter_metabolite)) %&gt;% dplyr::select(pval,pathway) %&gt;% mutate(pval=-log10(pval)) %&gt;% tibble::column_to_rownames(&quot;pathway&quot;) %&gt;% dplyr::rename(&quot;multiGSEA_samedatabase&quot;=&quot;pval&quot;) all_metabolite_multiGSEA_diffdatabase &lt;- all_metabolite_filter %&gt;% filter(software == &quot;multiGSEA-diffdatabase&quot;) %&gt;% arrange(match(pathway,pathway_filter_metabolite)) %&gt;% dplyr::select(pval,pathway) %&gt;% mutate(pval=-log10(pval)) %&gt;% tibble::column_to_rownames(&quot;pathway&quot;) %&gt;% dplyr::rename(&quot;multiGSEA_diffdatabase&quot;=&quot;pval&quot;) d_min &lt;- rep(0,7) d_max &lt;- rep(5,7) dd_all &lt;- cbind(d_max,d_min,all_metabolite_MNet, all_metabolite_multiGSEA_samedatabase,all_metabolite_multiGSEA_diffdatabase) %&gt;% t() %&gt;% as.data.frame() colors &lt;- c(rgb(239, 44, 43,alpha=100,maxColorValue = 255), rgb(255, 200, 57,alpha=100,maxColorValue = 255), rgb(79, 189, 129,alpha=100,maxColorValue = 255)) colors1 &lt;- c(&quot;#EF2C2B&quot;,&quot;#FFC839&quot;,&quot;#4FBD81&quot;) pdf(&quot;result/GSEA/GSEA_metabolite_radar.pdf&quot;,width=6,height = 6) radarchart( dd_all, axistype = 0, seg=5, pcol = colors1, pfcol = colors, plwd = 2, plty = 1, cglcol = &quot;grey&quot;, cglty = 1, cglwd = 0.8, axislabcol = &quot;grey&quot;, vlcex = 0.8) legend( &quot;topright&quot;, legend = c(&quot;MNet&quot;,&quot;multiGSEA_samedatabase&quot;, &quot;multiGSEA_diffedatabase&quot;), bty = &quot;n&quot;, pch = 20, col = colors1, text.col = &quot;black&quot;, pt.cex = 1.5) dev.off() ## Gene dat_mnet_gene &lt;- data.table::fread(&quot;result/GSEA/MNet_GSEA_transcriptome.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(type=&quot;gene&quot;,software=&quot;MNet&quot;) dat_mnet_metabolite &lt;- data.table::fread(&quot;result/GSEA/MNet_GSEA_metabolome.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(type=&quot;metabolite&quot;,software=&quot;MNet&quot;) dat_mnet_extended &lt;- data.table::fread(&quot;result/GSEA/MNet_GSEA_extended.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(type=&quot;extended&quot;,software=&quot;MNet&quot;) dat_mnet_all &lt;- rbind(dat_mnet_gene,dat_mnet_metabolite,dat_mnet_extended) %&gt;% dplyr::select(pathway,pval,type,software) dat_multigsea &lt;- data.table::fread(&quot;result/GSEA/multiGSEA-diff.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(pathway=substr(pathway, 8, nchar(pathway))) %&gt;% filter(pathway %in% PathwayExtendData$kegg_pathwayname) %&gt;% dplyr::select(pathway,transcriptome_pval,metabolome_pval,combined_pval) dat_multigsea_melt &lt;- reshape2::melt(dat_multigsea,id=&quot;pathway&quot;) dat_multigsea_diff &lt;- dat_multigsea_melt %&gt;% dplyr::rename(&quot;pval&quot;=&quot;value&quot;,&quot;type&quot;=&quot;variable&quot;) %&gt;% dplyr::mutate(software=&quot;multiGSEA-diffdatabase&quot;) %&gt;% dplyr::mutate(type=ifelse(type==&quot;transcriptome_pval&quot;,&quot;gene&quot;, ifelse(type==&quot;metabolome_pval&quot;,&quot;metabolite&quot;, ifelse(type==&quot;combined_pval&quot;,&quot;extended&quot;,&quot;jj&quot;)))) dat_multigsea &lt;- data.table::fread(&quot;result/GSEA/multiGSEA-same.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pathway %in% PathwayExtendData$kegg_pathwayname) %&gt;% dplyr::select(pathway,transcriptome_pval,metabolome_pval,combined_pval) dat_multigsea_melt &lt;- reshape2::melt(dat_multigsea,id=&quot;pathway&quot;) dat_multigsea_same &lt;- dat_multigsea_melt %&gt;% dplyr::rename(&quot;pval&quot;=&quot;value&quot;,&quot;type&quot;=&quot;variable&quot;) %&gt;% dplyr::mutate(software=&quot;multiGSEA-samedatabase&quot;) %&gt;% dplyr::mutate(type=ifelse(type==&quot;transcriptome_pval&quot;,&quot;gene&quot;, ifelse(type==&quot;metabolome_pval&quot;,&quot;metabolite&quot;, ifelse(type==&quot;combined_pval&quot;,&quot;extended&quot;,&quot;jj&quot;)))) all &lt;- rbind(dat_mnet_all,dat_multigsea_diff,dat_multigsea_same) pathway_filter_gene &lt;- all %&gt;% filter(type == &quot;gene&quot;) %&gt;% filter(pval &lt; 0.01) %&gt;% pull(pathway) %&gt;% unique() all_gene_filter &lt;- all %&gt;% filter(type == &quot;gene&quot;) %&gt;% filter(pathway %in% pathway_filter_gene) all_gene_MNet &lt;- all_gene_filter %&gt;% filter(software == &quot;MNet&quot;) %&gt;% arrange(match(pathway,pathway_filter_gene)) %&gt;% dplyr::select(pval,pathway) %&gt;% mutate(pval=-log10(pval)) %&gt;% tibble::column_to_rownames(&quot;pathway&quot;) %&gt;% dplyr::rename(&quot;MNet&quot;=&quot;pval&quot;) all_gene_multiGSEA_samedatabase &lt;- all_gene_filter %&gt;% filter(software == &quot;multiGSEA-samedatabase&quot;) %&gt;% arrange(match(pathway,pathway_filter_gene)) %&gt;% dplyr::select(pval,pathway) %&gt;% mutate(pval=-log10(pval)) %&gt;% tibble::column_to_rownames(&quot;pathway&quot;) %&gt;% dplyr::rename(&quot;multiGSEA_samedatabase&quot;=&quot;pval&quot;) all_gene_multiGSEA_diffdatabase &lt;- all_gene_filter %&gt;% filter(software == &quot;multiGSEA-diffdatabase&quot;) %&gt;% arrange(match(pathway,pathway_filter_gene)) %&gt;% dplyr::select(pval,pathway) %&gt;% mutate(pval=-log10(pval)) %&gt;% mutate(pval=ifelse(is.na(pval),0.000001,pval)) %&gt;% tibble::column_to_rownames(&quot;pathway&quot;) %&gt;% dplyr::rename(&quot;multiGSEA_diffdatabase&quot;=&quot;pval&quot;) d_min &lt;- rep(0,4) d_max &lt;- rep(5,4) dd_all &lt;- cbind(d_max,d_min,all_gene_MNet, all_gene_multiGSEA_samedatabase,all_gene_multiGSEA_diffdatabase) %&gt;% t() %&gt;% as.data.frame() colors &lt;- c(rgb(239, 44, 43,alpha=100,maxColorValue = 255), rgb(255, 200, 57,alpha=100,maxColorValue = 255), rgb(79, 189, 129,alpha=100,maxColorValue = 255)) colors1 &lt;- c(&quot;#EF2C2B&quot;,&quot;#FFC839&quot;,&quot;#4FBD81&quot;) pdf(&quot;result/GSEA/GSEA_gene_radar.pdf&quot;,width=6,height = 6) radarchart( dd_all, axistype = 0, seg=5, pcol = colors1, pfcol = colors, plwd = 2, plty = 1, cglcol = &quot;grey&quot;, cglty = 1, cglwd = 0.8, axislabcol = &quot;grey&quot;, vlcex = 0.8) legend( &quot;topright&quot;, legend = c(&quot;MNet&quot;,&quot;multiGSEA_samedatabase&quot;, &quot;multiGSEA_diffedatabase&quot;), bty = &quot;n&quot;, pch = 20, col = colors1, text.col = &quot;black&quot;, pt.cex = 1.5) dev.off() ## Extended dat_mnet_gene &lt;- data.table::fread(&quot;result/GSEA/MNet_GSEA_transcriptome.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(type=&quot;gene&quot;,software=&quot;MNet&quot;) dat_mnet_metabolite &lt;- data.table::fread(&quot;result/GSEA/MNet_GSEA_metabolome.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(type=&quot;metabolite&quot;,software=&quot;MNet&quot;) dat_mnet_extended &lt;- data.table::fread(&quot;result/GSEA/MNet_GSEA_extended.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(type=&quot;extended&quot;,software=&quot;MNet&quot;) dat_mnet_all &lt;- rbind(dat_mnet_gene,dat_mnet_metabolite,dat_mnet_extended) %&gt;% dplyr::select(pathway,pval,type,software) dat_multigsea &lt;- data.table::fread(&quot;result/GSEA/multiGSEA-diff.txt&quot;) %&gt;% as.data.frame() %&gt;% mutate(pathway=substr(pathway, 8, nchar(pathway))) %&gt;% filter(pathway %in% PathwayExtendData$kegg_pathwayname) %&gt;% dplyr::select(pathway,transcriptome_pval,metabolome_pval,combined_pval) dat_multigsea_melt &lt;- reshape2::melt(dat_multigsea,id=&quot;pathway&quot;) dat_multigsea_diff &lt;- dat_multigsea_melt %&gt;% dplyr::rename(&quot;pval&quot;=&quot;value&quot;,&quot;type&quot;=&quot;variable&quot;) %&gt;% dplyr::mutate(software=&quot;multiGSEA-diffdatabase&quot;) %&gt;% dplyr::mutate(type=ifelse(type==&quot;transcriptome_pval&quot;,&quot;gene&quot;, ifelse(type==&quot;metabolome_pval&quot;,&quot;metabolite&quot;, ifelse(type==&quot;combined_pval&quot;,&quot;extended&quot;,&quot;jj&quot;)))) dat_multigsea &lt;- data.table::fread(&quot;result/GSEA/multiGSEA-same.txt&quot;) %&gt;% as.data.frame() %&gt;% filter(pathway %in% PathwayExtendData$kegg_pathwayname) %&gt;% dplyr::select(pathway,transcriptome_pval,metabolome_pval,combined_pval) dat_multigsea_melt &lt;- reshape2::melt(dat_multigsea,id=&quot;pathway&quot;) dat_multigsea_same &lt;- dat_multigsea_melt %&gt;% dplyr::rename(&quot;pval&quot;=&quot;value&quot;,&quot;type&quot;=&quot;variable&quot;) %&gt;% dplyr::mutate(software=&quot;multiGSEA-samedatabase&quot;) %&gt;% dplyr::mutate(type=ifelse(type==&quot;transcriptome_pval&quot;,&quot;gene&quot;, ifelse(type==&quot;metabolome_pval&quot;,&quot;metabolite&quot;, ifelse(type==&quot;combined_pval&quot;,&quot;extended&quot;,&quot;jj&quot;)))) all &lt;- rbind(dat_mnet_all,dat_multigsea_diff,dat_multigsea_same) pathway_filter_extended &lt;- all %&gt;% filter(type == &quot;extended&quot;) %&gt;% filter(pval &lt; 0.01) %&gt;% pull(pathway) %&gt;% unique() all_extended_filter &lt;- all %&gt;% filter(type == &quot;extended&quot;) %&gt;% filter(pathway %in% pathway_filter_extended) all_extended_MNet &lt;- all_extended_filter %&gt;% filter(software == &quot;MNet&quot;) %&gt;% arrange(match(pathway,pathway_filter_extended)) %&gt;% dplyr::select(pval,pathway) %&gt;% mutate(pval=-log10(pval)) %&gt;% tibble::column_to_rownames(&quot;pathway&quot;) %&gt;% dplyr::rename(&quot;MNet&quot;=&quot;pval&quot;) all_extended_multiGSEA_samedatabase &lt;- all_extended_filter %&gt;% filter(software == &quot;multiGSEA-samedatabase&quot;) %&gt;% arrange(match(pathway,pathway_filter_extended)) %&gt;% dplyr::select(pval,pathway) %&gt;% mutate(pval=-log10(pval)) %&gt;% tibble::column_to_rownames(&quot;pathway&quot;) %&gt;% dplyr::rename(&quot;multiGSEA_samedatabase&quot;=&quot;pval&quot;) all_extended_multiGSEA_diffdatabase &lt;- all_extended_filter %&gt;% filter(software == &quot;multiGSEA-diffdatabase&quot;) %&gt;% arrange(match(pathway,pathway_filter_extended)) %&gt;% dplyr::select(pval,pathway) %&gt;% mutate(pval=-log10(pval)) %&gt;% mutate(pval=ifelse(is.na(pval),0.000001,pval)) %&gt;% tibble::column_to_rownames(&quot;pathway&quot;) %&gt;% dplyr::rename(&quot;multiGSEA_diffdatabase&quot;=&quot;pval&quot;) d_min &lt;- rep(0,9) d_max &lt;- rep(5,9) dd_all &lt;- cbind(d_max,d_min,all_extended_MNet, all_extended_multiGSEA_samedatabase,all_extended_multiGSEA_diffdatabase) %&gt;% t() %&gt;% as.data.frame() colors &lt;- c(rgb(239, 44, 43,alpha=100,maxColorValue = 255), rgb(255, 200, 57,alpha=100,maxColorValue = 255), rgb(79, 189, 129,alpha=100,maxColorValue = 255)) colors1 &lt;- c(&quot;#EF2C2B&quot;,&quot;#FFC839&quot;,&quot;#4FBD81&quot;) pdf(&quot;result/GSEA/GSEA_extended_radar.pdf&quot;,width=6,height = 6) radarchart( dd_all, axistype = 0, seg=5, pcol = colors1, pfcol = colors, plwd = 2, plty = 1, cglcol = &quot;grey&quot;, cglty = 1, cglwd = 0.8, axislabcol = &quot;grey&quot;, vlcex = 0.8) legend( &quot;topright&quot;, legend = c(&quot;MNet&quot;,&quot;multiGSEA_samedatabase&quot;, &quot;multiGSEA_diffedatabase&quot;), bty = &quot;n&quot;, pch = 20, col = colors1, text.col = &quot;black&quot;, pt.cex = 1.5) dev.off() 3.3.3.5 Glycerophospholipid metabolism Using MNet to analyze the Glycerophospholipid metabolism pathway. library(multiGSEA) library(org.Hs.eg.db) library(dplyr) library(MNet) library(ggplot2) data(transcriptome,package=&quot;multiGSEA&quot;) data(metabolome,package=&quot;multiGSEA&quot;) ah &lt;- AnnotationHub::AnnotationHub() aa &lt;- ah[[&quot;AH91792&quot;]] metabolome_1 &lt;- metabolome %&gt;% mutate(HMDB=gsub(&quot;HMDB&quot;,&quot;HMDB00&quot;,HMDB)) %&gt;% left_join(aa,by=&quot;HMDB&quot;) %&gt;% filter(!is.na(KEGG)) %&gt;% as.data.frame() %&gt;% dplyr::select(HMDB,logFC,pValue,KEGG,HMDB) %&gt;% unique() %&gt;% filter(KEGG %in% PathwayExtendData$name) %&gt;% distinct(KEGG,.keep_all = T) %&gt;% arrange(desc(logFC)) %&gt;% distinct(logFC,.keep_all = T) dat_metabolome &lt;- metabolome_1$logFC names(dat_metabolome) &lt;- metabolome_1$KEGG p_Glycerophospholipid_metabolite &lt;- pESEA(&quot;Glycerophospholipid metabolism&quot;,dat_metabolome,out = &quot;metabolite&quot;,minSize = 1,gseaParam = 1) ## gene transcriptome_temp &lt;- transcriptome %&gt;% as.data.frame() %&gt;% filter(Symbol %in% PathwayExtendData$name) %&gt;% arrange(desc(logFC)) dat_transcriptome &lt;- transcriptome_temp$logFC names(dat_transcriptome) &lt;- transcriptome_temp$Symbol p_Glycerophospholipid_gene &lt;- pESEA(&quot;Glycerophospholipid metabolism&quot;,dat_transcriptome,out = &quot;gene&quot;,minSize = 1,gseaParam = 1) ## metabolite and gene dat_all_temp &lt;- rbind(metabolome_1 %&gt;% dplyr::select(KEGG,logFC) %&gt;% rename(&quot;name&quot;=&quot;KEGG&quot;), transcriptome %&gt;% as.data.frame() %&gt;% dplyr::select(Symbol,logFC) %&gt;% rename(&quot;name&quot;=&quot;Symbol&quot;)) %&gt;% filter(name %in% PathwayExtendData$name) %&gt;% arrange(desc(logFC)) dat_all &lt;- dat_all_temp$logFC names(dat_all) &lt;- dat_all_temp$name p_Glycerophospholipid_extended &lt;- pESEA(&quot;Glycerophospholipid metabolism&quot;,dat_all,out = &quot;Extended&quot;,minSize = 1,gseaParam = 1) ggsave(&quot;result/GSEA/GSEA_Glycerophospholipid_metabolite.pdf&quot;,p_Glycerophospholipid_metabolite,width=5,height = 5) ggsave(&quot;result/GSEA/GSEA_Glycerophospholipid_gene.pdf&quot;,p_Glycerophospholipid_gene,width=5,height = 5) ggsave(&quot;result/GSEA/GSEA_Glycerophospholipid_extended.pdf&quot;,p_Glycerophospholipid_extended,width=5,height = 5) 3.3.3.6 Propanoate metabolism Using MNet to analyze the Propanoate metabolism pathway. data(transcriptome,package=&quot;multiGSEA&quot;) data(metabolome,package=&quot;multiGSEA&quot;) ah &lt;- AnnotationHub::AnnotationHub() aa &lt;- ah[[&quot;AH91792&quot;]] metabolome_1 &lt;- metabolome %&gt;% mutate(HMDB=gsub(&quot;HMDB&quot;,&quot;HMDB00&quot;,HMDB)) %&gt;% left_join(aa,by=&quot;HMDB&quot;) %&gt;% filter(!is.na(KEGG)) %&gt;% as.data.frame() %&gt;% dplyr::select(HMDB,logFC,pValue,KEGG,HMDB) %&gt;% unique() %&gt;% filter(KEGG %in% PathwayExtendData$name) %&gt;% distinct(KEGG,.keep_all = T) %&gt;% arrange(desc(logFC)) %&gt;% distinct(logFC,.keep_all = T) dat_metabolome &lt;- metabolome_1$logFC names(dat_metabolome) &lt;- metabolome_1$KEGG p_Propanoate_metabolite &lt;- pESEA(&quot;Propanoate metabolism&quot;,dat_metabolome,out = &quot;metabolite&quot;,minSize = 1,gseaParam = 1) ## gene transcriptome_temp &lt;- transcriptome %&gt;% as.data.frame() %&gt;% filter(Symbol %in% PathwayExtendData$name) %&gt;% arrange(desc(logFC)) dat_transcriptome &lt;- transcriptome_temp$logFC names(dat_transcriptome) &lt;- transcriptome_temp$Symbol p_Propanoate_gene &lt;- pESEA(&quot;Propanoate metabolism&quot;,dat_transcriptome,out = &quot;gene&quot;,minSize = 1,gseaParam = 1) ## metabolite and gene dat_all_temp &lt;- rbind(metabolome_1 %&gt;% dplyr::select(KEGG,logFC) %&gt;% rename(&quot;name&quot;=&quot;KEGG&quot;), transcriptome %&gt;% as.data.frame() %&gt;% dplyr::select(Symbol,logFC) %&gt;% rename(&quot;name&quot;=&quot;Symbol&quot;)) %&gt;% filter(name %in% PathwayExtendData$name) %&gt;% arrange(desc(logFC)) dat_all &lt;- dat_all_temp$logFC names(dat_all) &lt;- dat_all_temp$name p_Propanoate_extended &lt;- pESEA(&quot;Propanoate metabolism&quot;,dat_all,out = &quot;Extended&quot;,minSize = 1,gseaParam = 1) ggsave(&quot;result/GSEA/GSEA_Propanoate_metabolite.pdf&quot;,p_Propanoate_metabolite,width=6,height = 5) ggsave(&quot;result/GSEA/GSEA_Propanoate_gene.pdf&quot;,p_Propanoate_gene,width=6,height = 5) ggsave(&quot;result/GSEA/GSEA_Propanoate_extended.pdf&quot;,p_Propanoate_extended,width=6,height = 5) 3.4 Apply to acute myeloid leukemia Acute myeloid leukemia (AML) is a group of myeloid neoplasms characterized by high heterogeneity in clinical courses and prognosis, and most AML patients respond poorly to immunotherapies. Acute monocytic leukemia (AMoL, or AML-M5) is a common subtype of AML, which is characterized by a dominance of monocytes in the bone marrow. These overproduced monocytes interfere with normal immune cell production, which can cause many health complications for the affected individual. While the clinical features distinguishing AML-M5 and other types of AML are well-defined, the exploration of disparities in metabolism and transcriptome remains relatively scarce. Leveraging the data from Cancer Cell Line Encyclopedia (CCLE), MNet was employed to conduct an in-depth analysis of the discernible difference in metabolism and transcriptome between AML-M5 and other subtypes of AML. 3.4.1 Input data The Cancer Cell Line Encyclopedia (CCLE) serves as a valuable resource, offering comprehensive metabolomic and transcriptomic data for cancer cell lines, and includes every type of AML. Leveraging the data from CCLE, MNet was employed to conduct an in-depth analysis of the discernible difference in metabolism and transcriptome between AML-M5 and other subtypes of AML. The differentially expressed metabolic genes (DEMG) and metabolites (DM) between AML-M5 and other subtypes of AML were selected by P values &lt; 0.1. There are 360 DEMGs in 1,548 metabolic genes and 43 DMs in 225 metabolites. library(dplyr) library(MNet) library(ggplot2) #------------------------------------------------------------------------------- # Step 1: Input transcriptome data for mllima analysis #------------------------------------------------------------------------------- gene_1 &lt;- PathwayExtendData %&gt;% dplyr::filter(type==&quot;gene&quot;) gene_id &lt;- data.table::fread(&quot;input/gene.id.v38.txt&quot;,header=F) %&gt;% as.data.frame() %&gt;% dplyr::filter(V2==&quot;protein_coding&quot;) %&gt;% dplyr::filter(V3 %in% gene_1$name) sample &lt;- data.table::fread(&quot;input/AML_sample.txt&quot;) %&gt;% as.data.frame() dat &lt;- data.table::fread(&quot;input/CCLE_RNAseq_genes_rpkm_20180929.gct&quot;) %&gt;% as.data.frame() coding_gene &lt;- data.table::fread(&quot;input/gene.id.v38.txt&quot;,header=F) %&gt;% as.data.frame() %&gt;% dplyr::filter(V2 == &quot;protein_coding&quot;) sample_overlap_info &lt;- data.frame(CCLE_ID=intersect(sample$CCLE_ID,colnames(dat))) %&gt;% dplyr::left_join(sample,by=&quot;CCLE_ID&quot;) dat_filter &lt;- dat %&gt;% dplyr::select(-Name) %&gt;% dplyr::filter(Description %in% gene_id$V3) %&gt;% dplyr::select(Description,all_of(sample_overlap_info$CCLE_ID)) %&gt;% dplyr::distinct(Description,.keep_all = T) %&gt;% tibble::column_to_rownames(&quot;Description&quot;) write.table(dat_filter,&quot;result/AML_coding_gene.txt&quot;,quote=F,sep=&quot;\\t&quot;) group &lt;- sample_overlap_info$Hist_Subtype2 group[group==&quot;M5&quot;] &lt;- &quot;tumor&quot; group[group != &quot;tumor&quot;] &lt;- &quot;normal&quot; table(group) gene_all &lt;- mlimma(log2(dat_filter+1),group) write.table(gene_all,&quot;result/AML_gene_all_M5vsOther.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) #------------------------------------------------------------------------------- # Step 2: Input metabolome data for mllima analysis and convert metabolite names to KEGG IDs. #------------------------------------------------------------------------------- sample &lt;- data.table::fread(&quot;input/AML_sample.txt&quot;) %&gt;% as.data.frame() dat &lt;- data.table::fread(&quot;input/CCLE_metabolomics_20190502.csv&quot;) %&gt;% as.data.frame() %&gt;% dplyr::filter(CCLE_ID %in% sample$CCLE_ID) %&gt;% dplyr::select(-DepMap_ID) %&gt;% tibble::column_to_rownames(&quot;CCLE_ID&quot;) %&gt;% t() %&gt;% as.data.frame() sample_overlap_info &lt;- data.frame(CCLE_ID=intersect(sample$CCLE_ID,colnames(dat))) %&gt;% dplyr::left_join(sample,by=&quot;CCLE_ID&quot;) dat_filter &lt;- dat %&gt;% dplyr::select(sample_overlap_info$CCLE_ID) group &lt;- sample_overlap_info$Hist_Subtype2 group[group==&quot;M5&quot;] &lt;- &quot;tumor&quot; group[group != &quot;tumor&quot;] &lt;- &quot;normal&quot; table(group) metabolite_all &lt;- mlimma(dat_filter,group) write.table(metabolite_all,&quot;result/AML_metabolite_all_M5vsOther.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) kid &lt;- name2keggid(metabolite_all$name) metabolite_kid &lt;- metabolite_all %&gt;% dplyr::left_join(kid,by=c(&quot;name&quot;=&quot;Name&quot;)) %&gt;% unique() write.table(metabolite_kid,&quot;result/AML_metabolite_all_M5vsOther_KEGGID.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) 3.4.2 sNETlyser Conducted metabolism-related subnetwork analysis based on metabolomic and transcriptomic data by comparing AML-M5 with other subtypes of AML. Upon examining the metabolites and genes within the subnetwork, glutamate emerged as an important metabolite in AML-M5, aligning with the differential analysis and pathway enrichment findings and indicating glutamate best explains the biological processes while comparing with the other AML subtypes. library(dplyr) library(MNet) library(ggplot2) #------------------------------------------------------------------------------- # Step 1: Load mlimma analysis data and set parameters #------------------------------------------------------------------------------- diff_gene &lt;- data.table::fread(&quot;result/AML_gene_all_M5vsOther.txt&quot;) %&gt;% as.data.frame() diff_meta &lt;- data.table::fread(&quot;result/AML_metabolite_all_M5vsOther_KEGGID.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::filter(!is.na(KEGG_id)) %&gt;% tidyr::separate_rows(KEGG_id,sep=&quot;;&quot;) %&gt;% dplyr::distinct(KEGG_id,.keep_all = T) %&gt;% dplyr::select(-name) %&gt;% dplyr::rename(&quot;name&quot;=&quot;KEGG_id&quot;) names(diff_meta)[4] &lt;- &quot;p_value&quot; names(diff_gene)[4] &lt;- &quot;p_value&quot; #------------------------------------------------------------------------------- # Step 2: Conducted metabolism-related subnetwork analysis #------------------------------------------------------------------------------- pdf(&quot;result/AML_pdent.pdf&quot;,width=10,height = 10) a &lt;- sNETlyser(diff_meta,diff_gene,nsize=80) dev.off() node &lt;- a$node_result write.table(node,&quot;result/AML-pdnet_node.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) edge &lt;- a$edge_result write.table(edge,&quot;result/AML-pdnet_edge.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) metabolite &lt;- node %&gt;% dplyr::filter(type==&quot;metabolite&quot;) gene &lt;- node %&gt;% dplyr::filter(type==&quot;gene&quot;) result_metabolite &lt;- ePEAlyser(metabolite$name,out=&quot;metabolite&quot;,test=&quot;hypergeo&quot;) result_gene &lt;- ePEAlyser(gene$name,out=&quot;gene&quot;,test=&quot;hypergeo&quot;) result_all &lt;- ePEAlyser(c(gene$name,metabolite$name),out=&quot;Extended&quot;,test=&quot;hypergeo&quot;) write.table(result_metabolite$output,&quot;result/AML-pdnet_metabolite_enrichment.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) write.table(result_gene$output,&quot;result/AML-pdnet_gene_enrichment.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) write.table(result_all$output,&quot;result/AML-pdnet_all_enrichment.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) if (0) { kegg_pathway_uniq &lt;- PathwayExtendData %&gt;% dplyr::select(kegg_pathwayname,kegg_category) %&gt;% dplyr::rename(&quot;PATHWAY&quot;=&quot;kegg_pathwayname&quot;) %&gt;% dplyr::rename(&quot;pathway_type&quot;=&quot;kegg_category&quot;) %&gt;% unique() result &lt;- rbind(result_metabolite$output %&gt;% dplyr::mutate(type=&quot;metabolite&quot;), result_gene$output %&gt;% dplyr::mutate(type=&quot;gene&quot;), result_all$output %&gt;% dplyr::mutate(type=&quot;all&quot;)) %&gt;% # dplyr::filter(nOverlap &gt; 1) %&gt;% dplyr::left_join(kegg_pathway_uniq,by=c(&quot;name&quot;=&quot;PATHWAY&quot;)) %&gt;% dplyr::filter(pathway_type != &quot;Glycan biosynthesis and metabolism&quot;) %&gt;% dplyr::filter(!name %in% c(&quot;Fructose and mannose metabolism&quot;,&quot;Amino sugar and nucleotide sugar metabolism&quot;, &quot;Galactose metabolism&quot;,&quot;Ascorbate and aldarate metabolism&quot;,&quot;Pentose and glucuronate interconversions&quot;)) %&gt;% dplyr::arrange(pvalue) pathway_hh &lt;- unique(result$pathway_type) result &lt;- result %&gt;% dplyr::filter(!pathway_type %in% c(&quot;Metabolism of terpenoids and polyketides&quot;,&quot;Metabolism of cofactors and vitamins&quot;, &quot;Biosynthesis of other secondary metabolites&quot;,&quot;Metabolism of other amino acids&quot;, &quot;Xenobiotics biodegradation and metabolism&quot;)) %&gt;% dplyr::arrange(match(pathway_type,pathway_hh)) result$name &lt;- factor(result$name,levels = rev(unique(result$name))) result$pathway_type &lt;- factor(result$pathway_type,levels=unique(kegg_pathway_uniq$pathway_type)) result$type &lt;- factor(result$type,levels=c(&quot;metabolite&quot;,&quot;gene&quot;,&quot;all&quot;)) p1 &lt;- ggplot(result,aes(name,-log10(pvalue)))+ geom_bar(stat=&quot;identity&quot;,aes(fill=pathway_type))+ scale_fill_manual(values=RColorBrewer::brewer.pal(11, &quot;Set3&quot;),name=&quot;Pathway Category&quot;, breaks=unique(kegg_pathway_uniq$pathway_type))+ scale_y_continuous(expand = c(0, 0))+ coord_flip()+ facet_grid(. ~ type,scales=&quot;free_x&quot;)+ theme_bw()+ labs(x=NULL) ggsave(&quot;result/AML-pdnet_epe.pdf&quot;,p1,width=10,height = 5) } sNETlyser analysis of AML: Visualization of the identified optimal subnetwork that best explains the biological processes comparing AML-M5 and other subtypes of AML. The colors represent the logFC (logarithm of fold change) of genes, with red and green indicating different expression levels, while yellow and blue represent the logFC of metabolites, indicating varying levels. 3.4.3 Extended Pathway Analysers Conducted comprehensive pathway analyses based on genes, metabolites, and genes with metabolites. 3.4.3.1 ePEAlyser The results of metabolite-based and gene-based pathway enrichment analysis (M-based PEA and G-based PEA) identified a smaller set of overlapping entities than those uncovered by extended pathway enrichment analysis (ePEA) in every pathway. Notably, ePEA uncovered a broader and more statistically significant set of biological pathways, as indicated by more significant P values. library(MNet) library(dplyr) library(ggplot2) #------------------------------------------------------------------------------- # Step 1: Load mlimma analysis data and conduct PathwayAnalysis #------------------------------------------------------------------------------- gene_all &lt;- data.table::fread(&quot;result/AML_gene_all_M5vsOther.txt&quot;) %&gt;% as.data.frame() metabolite_all &lt;- data.table::fread(&quot;result/AML_metabolite_all_M5vsOther_KEGGID.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::filter(!is.na(KEGG_id)) %&gt;% tidyr::separate_rows(KEGG_id,sep=&quot;;&quot;) %&gt;% dplyr::distinct(KEGG_id,.keep_all = T) %&gt;% dplyr::select(-name) %&gt;% dplyr::rename(&quot;name&quot;=&quot;KEGG_id&quot;) dat_all &lt;- rbind(gene_all,metabolite_all) diff_gene &lt;- gene_all %&gt;% dplyr::filter(P.Value &lt; 0.1) diff_meta &lt;- metabolite_all %&gt;% dplyr::filter(P.Value &lt; 0.1) diff_all &lt;- rbind(diff_gene,diff_meta) result_gene &lt;- ePEAlyser(diff_gene$name,out=&quot;gene&quot;,p_cutoff=1.5) result_meta &lt;- ePEAlyser(diff_meta$name,out=&quot;metabolite&quot;,p_cutoff=1.5) result_all &lt;- ePEAlyser(diff_all$name,out=&quot;Extended&quot;,p_cutoff=1.5) pathway_overlap &lt;- intersect(result_gene$output$name,result_meta$output$name) pathway_all &lt;- rbind(result_gene$output,result_meta$output,result_all$output) %&gt;% dplyr::filter(pvalue &lt; 0.05) %&gt;% dplyr::filter(nOverlap &gt;= 3) %&gt;% dplyr::filter(name %in% pathway_overlap) %&gt;% dplyr::pull(name) %&gt;% unique() result_gene_filter &lt;- result_gene$output %&gt;% as.data.frame() %&gt;% dplyr::select(name,nOverlap,pvalue) %&gt;% dplyr::filter(name %in% pathway_all) %&gt;% dplyr::mutate(type=&quot;gene&quot;) result_meta_filter &lt;- result_meta$output %&gt;% as.data.frame() %&gt;% dplyr::select(name,nOverlap,pvalue) %&gt;% dplyr::filter(name %in% pathway_all) %&gt;% dplyr::mutate(type=&quot;metabolite&quot;) result_all_filter &lt;- result_all$output %&gt;% as.data.frame() %&gt;% dplyr::select(name,nOverlap,pvalue) %&gt;% dplyr::filter(name %in% pathway_all) %&gt;% dplyr::mutate(type=&quot;all&quot;) pathway_type &lt;- PathwayExtendData %&gt;% dplyr::select(kegg_pathwayname,kegg_category) %&gt;% unique() all &lt;- rbind(result_gene_filter,result_meta_filter,result_all_filter) %&gt;% dplyr::mutate(type=factor(type,levels=c(&quot;metabolite&quot;,&quot;gene&quot;,&quot;all&quot;))) %&gt;% dplyr::left_join(pathway_type,by=c(&quot;name&quot;=&quot;kegg_pathwayname&quot;)) %&gt;% dplyr::arrange(kegg_category) %&gt;% dplyr::mutate(name=factor(name,levels=unique(name))) #------------------------------------------------------------------------------- # Step 2: Dotplot #------------------------------------------------------------------------------- p &lt;- ggplot(all,aes(type,name))+ geom_point(aes(size=log2(nOverlap),color=-log10(pvalue)))+ theme_bw()+ theme(panel.border = element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.line = element_line(colour = &quot;black&quot;))+ scale_color_gradient(low=&quot;white&quot;,high=&quot;red&quot;)+ labs(x=NULL,y=&quot;Pathway name&quot;) ggsave(&quot;result/AML-ePEA.pdf&quot;,p,width=6,height = 3.5) if (0) { pathway_gene_filter &lt;- result_gene$output %&gt;% dplyr::filter(pvalue &lt; 0.05) pathway_meta_filter &lt;- result_meta$output %&gt;% dplyr::filter(pvalue &lt; 0.05) pathway_all_filter &lt;- result_all$output %&gt;% dplyr::filter(pvalue &lt; 0.05) library(&quot;VennDiagram&quot;) a&lt;-venn.diagram(list(gene=pathway_gene_filter$name, metabolite=pathway_meta_filter$name, all=pathway_all_filter$name),filename=NULL,fill=c(&quot;#2b6a99&quot;,&quot;#f16c23&quot;,&quot;#005B1D&quot;),alpha =1) pdf(&quot;result/AML-PE-ven.pdf&quot;,width=5,height = 5) grid.draw(a) dev.off() } Dot plot illustrating enriched pathways. 3.4.3.2 ePDAlyser The extended pathway differential abundance (ePDA) method revealed a greater number of pathways compared to gene-based or metabolite-based approaches, demonstrating higher stringency. library(dplyr) library(ggplot2) library(MNet) #------------------------------------------------------------------------------- # Step 1: Load mlimma analysis data and conduct DAscore analysis #------------------------------------------------------------------------------- ## Metabolite metabolite_kid &lt;- data.table::fread(&quot;result/AML_metabolite_all_M5vsOther_KEGGID.txt&quot;) %&gt;% as.data.frame() meta_all &lt;- metabolite_kid %&gt;% dplyr::filter(!is.na(KEGG_id)) %&gt;% tidyr::separate_rows(KEGG_id,sep=&quot;;&quot;) %&gt;% dplyr::distinct(KEGG_id,.keep_all = T) %&gt;% dplyr::select(-name) %&gt;% dplyr::rename(&quot;name&quot;=&quot;KEGG_id&quot;) meta_diff &lt;- meta_all %&gt;% dplyr::filter(P.Value &lt; 0.5) %&gt;% dplyr::filter(abs(logFC) &gt; 0) diff_meta_increase &lt;- meta_all %&gt;% dplyr::filter(logFC &gt; 0) %&gt;% dplyr::filter(P.Value &lt; 0.5) diff_meta_decrease &lt;- meta_all %&gt;% dplyr::filter(logFC &lt; 0) %&gt;% dplyr::filter(P.Value &lt; 0.5) DAscore_meta &lt;- ePDAlyser(diff_meta_increase$name,diff_meta_decrease$name,meta_all$name, min_measured_num = 3,out=&quot;metabolite&quot;,sort_plot=&quot;category&quot;) ggsave(&quot;result/AML-metabolite_DA.pdf&quot;,DAscore_meta$p,width=10,height = 8) write.table(DAscore_meta$result,&quot;result/AML-metabolite_DA.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) ## Gene gene_all &lt;- data.table::fread(&quot;result/AML_gene_all_M5vsOther.txt&quot;) %&gt;% as.data.frame() diff_gene_increase &lt;- gene_all %&gt;% dplyr::filter(logFC &gt; 0) %&gt;% dplyr::filter(P.Value &lt; 0.1) diff_gene_decrease &lt;- gene_all %&gt;% dplyr::filter(logFC &lt; -0) %&gt;% dplyr::filter(P.Value &lt; 0.1) DAscore_gene &lt;- ePDAlyser(diff_gene_increase$name,diff_gene_decrease$name,gene_all$name, min_measured_num = 10,out=&quot;gene&quot;,sort_plot=&quot;category&quot;) ggsave(&quot;result/AML-gene_DA.pdf&quot;,DAscore_gene$p,width=10,height = 8) write.table(DAscore_gene$result,&quot;result/AML-gene_DA.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) ## Met-Gene gene_all &lt;- data.table::fread(&quot;result/AML_gene_all_M5vsOther.txt&quot;) %&gt;% as.data.frame() metabolite_all &lt;- data.table::fread(&quot;result/AML_metabolite_all_M5vsOther_KEGGID.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::filter(!is.na(KEGG_id)) %&gt;% tidyr::separate_rows(KEGG_id,sep=&quot;;&quot;) %&gt;% dplyr::distinct(KEGG_id,.keep_all = T) %&gt;% dplyr::select(-name) %&gt;% dplyr::rename(&quot;name&quot;=&quot;KEGG_id&quot;) dat_all &lt;- rbind(gene_all,metabolite_all) dat_diff &lt;- rbind(gene_all %&gt;% filter(abs(logFC) &gt; 0) %&gt;% filter(P.Value &lt; 0.1), metabolite_all %&gt;% filter(abs(logFC) &gt; 0) %&gt;% filter(P.Value &lt; 0.1)) diff_dat_increase &lt;- dat_diff %&gt;% dplyr::filter(logFC &gt; 0) diff_dat_decrease &lt;- dat_diff %&gt;% dplyr::filter(logFC &lt; 0) DAscore_GM &lt;- ePDAlyser(diff_dat_increase$name,diff_dat_decrease$name,dat_all$name, min_measured_num = 10,out=&quot;Extended&quot;,sort_plot=&quot;category&quot;) ggsave(&quot;result/AML-GM_DA.pdf&quot;,DAscore_GM$p,width=10,height = 8) write.table(DAscore_GM$result,&quot;result/AML-GM_DA.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) #------------------------------------------------------------------------------- # Step 2: Barplot #------------------------------------------------------------------------------- da_meta &lt;- data.table::fread(&quot;result/AML-metabolite_DA.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(Pathway,DA_score,`Pathway Category`,Measured_members_num) %&gt;% dplyr::mutate(Type=&quot;metabolite&quot;) %&gt;% dplyr::mutate(da_type_meta=ifelse(DA_score &gt; 0,&quot;big&quot;, ifelse(DA_score &lt; 0,&quot;little&quot;,&quot;middle&quot;))) da_gene &lt;- data.table::fread(&quot;result/AML-gene_DA.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(Pathway,DA_score,`Pathway Category`,Measured_members_num) %&gt;% dplyr::mutate(Type=&quot;gene&quot;) %&gt;% dplyr::mutate(da_type_gene=ifelse(DA_score &gt; 0,&quot;big&quot;, ifelse(DA_score &lt; 0,&quot;little&quot;,&quot;middle&quot;))) da_all &lt;- data.table::fread(&quot;result/AML-GM_DA.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(Pathway,DA_score,`Pathway Category`,Measured_members_num) %&gt;% dplyr::mutate(Type=&quot;all&quot;) %&gt;% dplyr::mutate(da_type_all =ifelse(DA_score &gt; 0,&quot;big&quot;, ifelse(DA_score &lt; 0,&quot;little&quot;,&quot;middle&quot;))) pathway_overlap &lt;- da_meta %&gt;% dplyr::full_join(da_gene,by=&quot;Pathway&quot;) %&gt;% dplyr::full_join(da_all,by=&quot;Pathway&quot;) %&gt;% dplyr::filter(!is.na(DA_score.x)) %&gt;% dplyr::filter(!is.na(DA_score.y)) %&gt;% dplyr::filter(da_type_meta == da_type_gene | da_type_meta==&quot;middle&quot;|da_type_gene==&quot;middle&quot;) %&gt;% dplyr::pull(Pathway) result_filter &lt;- rbind(da_meta %&gt;% dplyr::select(-da_type_meta), da_gene %&gt;% dplyr::select(-da_type_gene), da_all %&gt;% dplyr::select(-da_type_all)) %&gt;% dplyr::filter(Pathway %in% pathway_overlap) %&gt;% dplyr::arrange(DA_score) %&gt;% dplyr::arrange(`Pathway Category`) %&gt;% dplyr::filter(Measured_members_num &gt;= 3) %&gt;% dplyr::filter(!(Measured_members_num &lt; 10 &amp; Type==&quot;gene&quot;)) %&gt;% dplyr::mutate(Pathway=factor(Pathway,levels = unique(Pathway))) %&gt;% dplyr::mutate(Type=factor(Type,levels=c(&quot;metabolite&quot;,&quot;gene&quot;,&quot;all&quot;))) colp &lt;- c(&quot;Amino acid metabolism&quot; =&quot;#1B9E77&quot;, &quot;Carbohydrate metabolism&quot;=&quot;#D95F02&quot;,&quot;Glycan biosynthesis and metabolism&quot;=&quot;#1F78B4&quot;, &quot;Metabolism of cofactors and vitamins&quot;=&quot;#7570B3&quot;,&quot;Metabolism of terpenoids and polyketides&quot;=&quot;#BC80BD&quot;, &quot;Metabolism of other amino acids&quot;=&quot;#8DD3C7&quot;, &quot;Energy metabolism&quot;=&quot;#E7298A&quot;,&quot;Lipid metabolism&quot;=&quot;#66A61E&quot;,&quot;Nucleotide metabolism&quot;=&quot;#E6AB02&quot;, &quot;Biosynthesis of other secondary metabolites&quot;=&quot;#A6761D&quot;, &quot;Xenobiotics biodegradation and metabolism&quot;=&quot;#666666&quot;) p &lt;- ggplot2::ggplot(result_filter)+ ggplot2::geom_point(ggplot2::aes(x=Pathway,y=DA_score,size=log2(Measured_members_num),color=`Pathway Category`))+ ggplot2::geom_pointrange(ggplot2::aes(x=Pathway,y=DA_score,ymin=0,ymax=DA_score,color=`Pathway Category`))+ scale_color_manual(values=colp)+ theme_bw()+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = &quot;black&quot;))+ geom_hline(yintercept=c(0))+ ggplot2::coord_flip()+ ggplot2::xlab(NULL)+ facet_grid(. ~ Type) ggsave(&quot;result/AML-ePDA.pdf&quot;,p,width=12.5,height = 6) ### venn if (0) { num_meta &lt;- da_meta$Pathway num_gene &lt;- da_gene$Pathway num_all &lt;- da_all$Pathway dat_num &lt;- data.frame(type=c(&quot;metabolite&quot;,&quot;gene&quot;,&quot;all&quot;), num=c(length(num_meta),length(num_gene),length(num_all))) %&gt;% dplyr::mutate(type=factor(type,levels=c(&quot;metabolite&quot;,&quot;gene&quot;,&quot;all&quot;))) p &lt;- ggplot(dat_num,aes(type,num,fill=type))+ geom_bar(stat=&quot;identity&quot;)+ scale_fill_manual(values=c(&quot;metabolite&quot;=&quot;#f16c23&quot;,&quot;gene&quot;=&quot;#2b6a99&quot;,&quot;all&quot;=&quot;#005B1D&quot;))+ theme_bw() ggsave(&quot;result/AML-DA_num.pdf&quot;,p,width=6,height = 5) } Dot plot illustrating the DA pathway results. 3.4.3.3 eSEAlyser Gene set enrichment analysis (GSEA) and metabolite set enrichment analysis (MSEA) exhibited minimal pathway overlap, indicating a limitation of this method. This limitation was effectively addressed through extended pathway set enrichment analysis (eSEA), considering both genes and metabolites, thereby enhancing and complementing the insights provided by GSEA and MSEA. library(MNet) library(ggplot2) library(dplyr) #------------------------------------------------------------------------------- # Step 1: Load mlimma analysis data and conduct ESEA analysis #------------------------------------------------------------------------------- gene_all &lt;- data.table::fread(&quot;result/AML_gene_all_M5vsOther.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::arrange(desc(logFC)) metabolite_all &lt;- data.table::fread(&quot;result/AML_metabolite_all_M5vsOther_KEGGID.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::filter(!is.na(KEGG_id)) %&gt;% tidyr::separate_rows(KEGG_id,sep=&quot;;&quot;) %&gt;% dplyr::distinct(KEGG_id,.keep_all = T) %&gt;% dplyr::select(-name) %&gt;% dplyr::rename(&quot;name&quot;=&quot;KEGG_id&quot;) %&gt;% dplyr::arrange(desc(logFC)) all_result &lt;- rbind(metabolite_all,gene_all) %&gt;% dplyr::arrange(desc(logFC)) all &lt;- all_result$logFC names(all) &lt;- all_result$name gene &lt;- gene_all$logFC names(gene) &lt;- gene_all$name meta &lt;- metabolite_all$logFC names(meta) &lt;- metabolite_all$name result_meta &lt;- eSEAlyser(meta,out=&quot;metabolite&quot;,minSize = 2) result_gene &lt;- eSEAlyser(gene,out = &quot;gene&quot;,minSize = 5) result_all &lt;- eSEAlyser(all,out=&quot;Extended&quot;,minSize = 7) result_meta_filter &lt;- result_meta %&gt;% dplyr::filter(pval &lt; 0.1) %&gt;% dplyr::mutate(type=&quot;metabolite&quot;) result_gene_filter &lt;- result_gene %&gt;% dplyr::filter(pval &lt; 0.1) %&gt;% dplyr::mutate(type=&quot;gene&quot;) result_all_filter &lt;- result_all %&gt;% dplyr::filter(pval &lt; 0.1) %&gt;% dplyr::mutate(type=&quot;all&quot;) if (0) { library(&quot;VennDiagram&quot;) a&lt;-venn.diagram(list(gene=result_gene_filter$pathway, metabolite=result_meta_filter$pathway, all=result_all_filter$pathway),filename=NULL,fill=c(&quot;#2b6a99&quot;,&quot;#f16c23&quot;,&quot;#005B1D&quot;),alpha =1) pdf(&quot;result/AML-eSEA-ven.pdf&quot;,width=5,height = 5) grid.draw(a) dev.off() } pathway_overlap &lt;- unique(c(result_meta_filter$pathway,result_gene_filter$pathway,result_all_filter$pathway)) ## Only one omics only_one &lt;- c(setdiff(result_meta$pathway,result_gene$pathway),setdiff(result_gene$pathway,result_meta$pathway)) result_temp &lt;- rbind(result_meta %&gt;% mutate(type=&quot;metabolite&quot;), result_gene %&gt;% mutate(type=&quot;gene&quot;), result_all %&gt;% mutate(type=&quot;all&quot;)) %&gt;% dplyr::filter(pathway %in% pathway_overlap) %&gt;% dplyr::filter(!pathway %in% only_one) %&gt;% dplyr::filter(!pathway %in% c(&quot;Tryptophan metabolism&quot;,&quot;Porphyrin metabolism&quot;,&quot;Pentose phosphate pathway&quot;, &quot;Galactose metabolism&quot;,&quot;D-Amino acid metabolism&quot;,&quot;Glycolysis / Gluconeogenesis&quot;, &quot;Glycerolipid metabolism&quot;,&quot;Citrate cycle (TCA cycle)&quot;)) result_1 &lt;- result_temp %&gt;% dplyr::filter(type==&quot;all&quot;) %&gt;% dplyr::arrange(NES) result &lt;- result_temp %&gt;% dplyr::arrange(match(pathway,result_1$pathway)) %&gt;% dplyr::arrange(match(type,c(&quot;metabolite&quot;,&quot;gene&quot;,&quot;all&quot;))) %&gt;% dplyr::mutate(type=factor(type,levels = c(&quot;metabolite&quot;,&quot;gene&quot;,&quot;all&quot;))) %&gt;% dplyr::mutate(pathway=factor(pathway,levels=result_1$pathway)) #------------------------------------------------------------------------------- # Step 2: Barplot #------------------------------------------------------------------------------- p &lt;- ggplot(result,aes(pathway,NES,fill=-log10(pval)))+ geom_bar(stat=&quot;identity&quot;)+ theme_bw()+ geom_hline(yintercept=c(0))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ scale_fill_gradient(low=&quot;pink&quot;,high=&quot;red&quot;)+ coord_flip()+ facet_grid(. ~ type,scales=&quot;free_x&quot;)+ labs(x=&quot;Pathway name&quot;) ggsave(&quot;result/AML-eSEA.pdf&quot;,p,width=10,height = 3) Bar plot illustrating NES of enriched pathways. 3.5 Apply to triple-negative breast cancer The case study involves an integrated analysis of metabolomic and transcriptomic data, with the aim of understanding rapidly proliferating breast cancers Cancer Research. The study characterizes the metabolomic profile of two types of 31 breast tumors in human, revealing elevated pyrimidine metabolism and glutaminolysis pathways in triple-negative breast cancer (TNBC). As an example of mixed metabolites and genes analyses, we use both dataset of metabolite intensity and gene expression data as reported in the paper. The metabolomics data was accessed from the paper, and the gene expression data was obtained from GEO (GSE173991). 3.5.1 sNETlyser The authors’ results demonstrate the essential role of glutamine catabolism-based pyrimidine metabolism in TNBC. MNet not only corroborates this finding but also highlights the significance of oxidative phosphorylation in cluster 2. library(dplyr) library(MNet) library(ggplot2) #------------------------------------------------------------------------------- # Step 1: Input metabolome and transcriptome data for mllima analysis #------------------------------------------------------------------------------- diff_meta &lt;- mlimma(meta_dat,group) diff_gene &lt;- mlimma(gene_dat,group) names(diff_meta)[4] &lt;- &quot;p_value&quot; names(diff_gene)[4] &lt;- &quot;p_value&quot; #------------------------------------------------------------------------------- # Step 2: Conducted metabolism-related subnetwork analysis #------------------------------------------------------------------------------- pdf(&quot;result/TNBC_pdent.pdf&quot;,width=10,height = 10) a &lt;- sNETlyser(diff_meta,diff_gene,nsize=100) dev.off() node &lt;- a$node_result write.table(node,&quot;result/TNBC_pdnet_node.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) edge &lt;- a$edge_result write.table(edge,&quot;result/TNBC_pdnet_edge.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) metabolite &lt;- node %&gt;% dplyr::filter(type==&quot;metabolite&quot;) gene &lt;- node %&gt;% dplyr::filter(type==&quot;gene&quot;) result_metabolite &lt;- ePEAlyser(metabolite$name,out=&quot;metabolite&quot;,test=&quot;hypergeo&quot;) result_gene &lt;- ePEAlyser(gene$name,out=&quot;gene&quot;,test=&quot;hypergeo&quot;) result_all &lt;- ePEAlyser(c(gene$name,metabolite$name),out=&quot;Extended&quot;,test=&quot;hypergeo&quot;) write.table(result_metabolite$output,&quot;result/TNBC_pdnet_metabolite_enrichment.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) write.table(result_gene$output,&quot;result/TNBC_pdnet_gene_enrichment.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) write.table(result_all$output,&quot;result/TNBC_pdnet_all_enrichment.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) kegg_pathway_uniq &lt;- PathwayExtendData %&gt;% dplyr::select(kegg_pathwayname,kegg_category) %&gt;% dplyr::rename(&quot;PATHWAY&quot;=&quot;kegg_pathwayname&quot;) %&gt;% dplyr::rename(&quot;pathway_type&quot;=&quot;kegg_category&quot;) %&gt;% unique() result &lt;- rbind(result_metabolite$output %&gt;% dplyr::mutate(type=&quot;metabolite&quot;), result_gene$output %&gt;% dplyr::mutate(type=&quot;gene&quot;), result_all$output %&gt;% dplyr::mutate(type=&quot;all&quot;)) %&gt;% dplyr::left_join(kegg_pathway_uniq,by=c(&quot;name&quot;=&quot;PATHWAY&quot;)) %&gt;% dplyr::filter(pathway_type != &quot;Glycan biosynthesis and metabolism&quot;) %&gt;% dplyr::filter(!name %in% c(&quot;Fructose and mannose metabolism&quot;, &quot;Amino sugar and nucleotide sugar metabolism&quot;, &quot;Galactose metabolism&quot;, &quot;Ascorbate and aldarate metabolism&quot;, &quot;Pentose and glucuronate interconversions&quot;)) %&gt;% dplyr::arrange(pvalue) pathway_hh &lt;- unique(result$pathway_type) result &lt;- result %&gt;% dplyr::filter(!pathway_type %in% c(&quot;Metabolism of terpenoids and polyketides&quot;, &quot;Metabolism of cofactors and vitamins&quot;, &quot;Biosynthesis of other secondary metabolites&quot;, &quot;Metabolism of other amino acids&quot;, &quot;Xenobiotics biodegradation and metabolism&quot;)) %&gt;% dplyr::arrange(match(pathway_type,pathway_hh)) result$name &lt;- factor(result$name,levels = rev(unique(result$name))) result$pathway_type &lt;- factor(result$pathway_type,levels=unique(kegg_pathway_uniq$pathway_type)) result$type &lt;- factor(result$type,levels=c(&quot;metabolite&quot;,&quot;gene&quot;,&quot;all&quot;)) p1 &lt;- ggplot(result,aes(name,-log10(pvalue)))+ geom_bar(stat=&quot;identity&quot;,aes(fill=pathway_type))+ scale_fill_manual(values=RColorBrewer::brewer.pal(11, &quot;Set3&quot;),name=&quot;Pathway Category&quot;, breaks=unique(kegg_pathway_uniq$pathway_type))+ scale_y_continuous(expand = c(0, 0))+ coord_flip()+ facet_grid(. ~ type,scales=&quot;free_x&quot;)+ theme_bw()+ labs(x=NULL) ggsave(&quot;result/TNBC_pdnet_epe.pdf&quot;,p1,width=10,height = 5) sNETlyser analysis of TNBC: Leveraging the input data including the significance level (such as P-values) for metabolites and genes, MNet extracts the optimal subnetwork that best explains the biological processes underlying the input data. The colors represent the logFC (logarithm of fold change) of genes (red and green indicating different expression levels), while yellow and blue represent the logFC of metabolites, indicating varying levels. 3.5.2 Extended Pathway Analyses The authors found that pyrimidine and purine metabolism, carbon metabolism, and the energy production related pathways were highly enriched in cluster 2 while many lipid/fatty acid metabolism related pathways were enriched in cluster 1, which aligns with similar result obtained from MNet. 3.5.2.1 ePEAlyser Extended pathway enrichment analysis. library(dplyr) library(MNet) library(stringr) library(ggplot2) library(RColorBrewer) #------------------------------------------------------------------------------- # Step 1: Input metabolome and transcriptome data for mllima analysis #------------------------------------------------------------------------------- all_meta &lt;- mlimma(meta_dat,group) all_gene &lt;- mlimma(gene_dat,group) #------------------------------------------------------------------------------- # Step 2: PathwayAnalysis #------------------------------------------------------------------------------- ## Gene diff_gene_increase &lt;- all_gene %&gt;% dplyr::filter(logFC &gt; 0.58) %&gt;% dplyr::filter(adj.P.Val &lt; 0.05) result_gene_increase &lt;- ePEAlyser(diff_gene_increase$name,out=&quot;gene&quot;,p_cutoff=0.05) ggsave(&quot;result/TNBC_gene_increase.pdf&quot;,result_gene_increase$p_barplot,width=10,height = 5) write.table(result_gene_increase$output,&quot;result/TNBC_gene_increase.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) diff_gene_decrease &lt;- all_gene %&gt;% dplyr::filter(logFC &lt; -0.58) %&gt;% dplyr::filter(adj.P.Val &lt; 0.05) result_gene_decrease &lt;- ePEAlyser(diff_gene_decrease$name,out=&quot;gene&quot;,p_cutoff=0.05) ggsave(&quot;result/TNBC_gene_decrease.pdf&quot;,result_gene_decrease$p_barplot,width=10,height = 5) write.table(result_gene_decrease$output,&quot;result/TNBC_gene_decrease.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) ## Metabolite ## Filter the increase differential genes and metabolites diff_meta_increase &lt;- all_meta %&gt;% dplyr::filter(logFC &gt; 0.58) %&gt;% dplyr::filter(adj.P.Val &lt; 0.05) result_meta_increase &lt;- ePEAlyser(diff_meta_increase$name,out=&quot;metabolite&quot;,p_cutoff=0.05) ggsave(&quot;result/TNBC_meta_increase.pdf&quot;,result_meta_increase$p_barplot,width=10,height = 5) write.table(result_meta_increase$output,&quot;result/TNBC_meta_increase.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) diff_meta_decrease &lt;- all_meta %&gt;% dplyr::filter(logFC &lt; -0.58) %&gt;% dplyr::filter(adj.P.Val &lt; 0.05) result_meta_decrease &lt;- ePEAlyser(diff_meta_decrease$name,out=&quot;metabolite&quot;,p_cutoff=0.05) ggsave(&quot;result/TNBC_meta_decrease.pdf&quot;,result_meta_decrease$p_barplot,width=10,height = 5) write.table(result_meta_decrease$output,&quot;result/TNBC_meta_decrease.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) ## Met-Gene diff_increase &lt;- rbind(diff_gene_increase,diff_meta_increase) result_all_increase &lt;- ePEAlyser(diff_increase$name,out=&quot;Extended&quot;,p_cutoff=0.05) ggsave(&quot;result/TNBC_all_increase.pdf&quot;,result_all_increase$p_barplot,width=10,height = 5) write.table(result_all_increase$output,&quot;result/TNBC_all_increase.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) diff_decrease &lt;- rbind(diff_gene_decrease,diff_meta_decrease) result_all_decrease &lt;- ePEAlyser(diff_decrease$name,out=&quot;Extended&quot;,p_cutoff=0.05) ggsave(&quot;result/TNBC_all_decrease.pdf&quot;,result_all_decrease$p_barplot,width=10,height = 5) write.table(result_all_decrease$output,&quot;result/TNBC_all_decrease.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) #------------------------------------------------------------------------------- # Step 3: Dotplot #------------------------------------------------------------------------------- meta_increase &lt;- data.table::fread(&quot;result/TNBC_meta_increase.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(name,pvalue) %&gt;% dplyr::mutate(type1 =&quot;meta_Cluster1&quot;) %&gt;% dplyr::mutate(type2 =&quot;metabolite&quot;) meta_decrease &lt;- data.table::fread(&quot;result/TNBC_meta_decrease.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(name,pvalue) %&gt;% dplyr::mutate(type1=&quot;meta_Cluster2&quot;) %&gt;% dplyr::mutate(type2 =&quot;metabolite&quot;) gene_increase &lt;- data.table::fread(&quot;result/TNBC_gene_increase.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(name,pvalue) %&gt;% dplyr::mutate(type1 =&quot;gene_Cluster1&quot;) %&gt;% dplyr::mutate(type2 =&quot;gene&quot;) gene_decrease &lt;- data.table::fread(&quot;result/TNBC_gene_decrease.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(name,pvalue) %&gt;% dplyr::mutate(type1=&quot;gene_Cluster2&quot;) %&gt;% dplyr::mutate(type2 =&quot;gene&quot;) all_increase &lt;- data.table::fread(&quot;result/TNBC_all_increase.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(name,pvalue) %&gt;% dplyr::mutate(type1 =&quot;all_Cluster1&quot;) %&gt;% dplyr::mutate(type2 =&quot;all&quot;) all_decrease &lt;- data.table::fread(&quot;result/TNBC_all_decrease.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(name,pvalue) %&gt;% dplyr::mutate(type1=&quot;all_Cluster2&quot;) %&gt;% dplyr::mutate(type2 =&quot;all&quot;) kegg_pathway_uniq &lt;- PathwayExtendData %&gt;% dplyr::select(kegg_pathwayname,kegg_category) %&gt;% dplyr::rename(&quot;PATHWAY&quot;=&quot;kegg_pathwayname&quot;) %&gt;% dplyr::rename(&quot;pathway_type&quot;=&quot;kegg_category&quot;) %&gt;% unique() result_meta &lt;- rbind(meta_increase,meta_decrease) %&gt;% dplyr::filter(pvalue &lt; 0.01) result_gene &lt;- rbind(gene_increase,gene_decrease) %&gt;% dplyr::filter(pvalue &lt; 0.05) result_all &lt;- rbind(all_increase,all_decrease) %&gt;% dplyr::filter(pvalue &lt; 0.05) result &lt;- rbind(result_meta,result_gene,result_all) %&gt;% dplyr::filter(!name %in% c(&quot;Sulfur metabolism&quot;, &quot;Fructose and mannose metabolism&quot;, &quot;Ascorbate and aldarate metabolism&quot;, &quot;Galactose metabolism&quot;, &quot;Butanoate metabolism&quot;, &quot;Pentose and glucuronate interconversions&quot;, &quot;Amino sugar and nucleotide sugar metabolism&quot;, &quot;Propanoate metabolism&quot;)) %&gt;% dplyr::left_join(kegg_pathway_uniq,by=c(&quot;name&quot;=&quot;PATHWAY&quot;)) %&gt;% dplyr::filter(pathway_type != &quot;Glycan biosynthesis and metabolism&quot;) %&gt;% dplyr::arrange(pvalue) pathway_hh &lt;- unique(result$pathway_type) result &lt;- result %&gt;% dplyr::filter(!pathway_type %in% c(&quot;Metabolism of terpenoids and polyketides&quot;,&quot;Metabolism of cofactors and vitamins&quot;,&quot;Biosynthesis of other secondary metabolites&quot;,&quot;Metabolism of other amino acids&quot;)) %&gt;% dplyr::arrange(match(pathway_type,pathway_hh)) result$name &lt;- factor(result$name,levels = rev(unique(result$name))) result$pathway_type &lt;- factor(result$pathway_type,levels=unique(kegg_pathway_uniq$pathway_type)) result$type1 &lt;- factor(result$type1, levels=c(&quot;meta_Cluster1&quot;,&quot;meta_Cluster2&quot;, &quot;gene_Cluster1&quot;,&quot;gene_Cluster2&quot;, &quot;all_Cluster1&quot;,&quot;all_Cluster2&quot;)) colp &lt;- c(&quot;Amino acid metabolism&quot; =&quot;#1B9E77&quot;, &quot;Carbohydrate metabolism&quot;=&quot;#D95F02&quot;, &quot;Glycan biosynthesis and metabolism&quot;=&quot;#1F78B4&quot;, &quot;Metabolism of cofactors and vitamins&quot;=&quot;#7570B3&quot;, &quot;Metabolism of terpenoids and polyketides&quot;=&quot;#BC80BD&quot;, &quot;Metabolism of other amino acids&quot;=&quot;#8DD3C7&quot;, &quot;Energy metabolism&quot;=&quot;#E7298A&quot;, &quot;Lipid metabolism&quot;=&quot;#66A61E&quot;, &quot;Nucleotide metabolism&quot;=&quot;#E6AB02&quot;, &quot;Biosynthesis of other secondary metabolites&quot;=&quot;#A6761D&quot;, &quot;Xenobiotics biodegradation and metabolism&quot;=&quot;#666666&quot;) p1 &lt;- ggplot(result,aes(name,-log10(pvalue)))+ geom_bar(stat=&quot;identity&quot;,aes(fill=pathway_type))+ scale_fill_manual(values=colp)+ scale_y_continuous(expand = c(0, 0))+ coord_flip()+ facet_grid(. ~ type1,scales=&quot;free_x&quot;)+ theme_bw()+ labs(x=NULL) ggsave(&quot;result/TNBC_ePEA.pdf&quot;,p1,width=15,height = 7) Pathway enrichment analysis of metabolites and genes. 3.5.2.2 ePDAlyser Extended pathway differential abundance score. library(dplyr) library(MNet) library(ggplot2) #------------------------------------------------------------------------------- # Step 1: Input metabolome and transcriptome data for mllima analysis #------------------------------------------------------------------------------- group[which(group==&quot;normal&quot;)] &lt;- &quot;a&quot; group[which(group==&quot;tumor&quot;)] &lt;- &quot;normal&quot; group[which(group==&quot;a&quot;)] &lt;- &quot;tumor&quot; all_meta &lt;- mlimma(meta_dat,group) all_gene &lt;- mlimma(gene_dat,group) #------------------------------------------------------------------------------- # Step 2: ePDAlyser #------------------------------------------------------------------------------- ## gene diff_gene_increase &lt;- all_gene %&gt;% dplyr::filter(logFC &gt; 0.58) %&gt;% dplyr::filter(adj.P.Val &lt; 0.05) diff_gene_decrease &lt;- all_gene %&gt;% dplyr::filter(logFC &lt; -0.58) %&gt;% dplyr::filter(adj.P.Val &lt; 0.05) DAscore_gene &lt;- ePDAlyser(diff_gene_increase$name, diff_gene_decrease$name,all_gene$name, min_measured_num = 10, out=&quot;gene&quot;,sort_plot=&quot;category&quot;) ggsave(&quot;result/TNBC_DA_gene.pdf&quot;,DAscore_gene$p,width=10,height = 8) write.table(DAscore_gene$result,&quot;result/TNBC_DA_gene.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) ## metabolite ## filter the increase differential genes and metabolites diff_meta_increase &lt;- all_meta %&gt;% dplyr::filter(logFC &gt; 0) %&gt;% dplyr::filter(P.Value &lt; 0.05) diff_meta_decrease &lt;- all_meta %&gt;% dplyr::filter(logFC &lt; 0) %&gt;% dplyr::filter(P.Value &lt; 0.05) DAscore_meta &lt;- ePDAlyser(diff_meta_increase$name, diff_meta_decrease$name,all_meta$name, min_measured_num = 3, out=&quot;metabolite&quot;,sort_plot=&quot;category&quot;) ggsave(&quot;result/TNBC_DA_meta.pdf&quot;,DAscore_meta$p,width=10,height = 8) write.table(DAscore_meta$result,&quot;result/TNBC_DA_meta.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) ## gene and metabolite DAscore_all &lt;- ePDAlyser(c(diff_gene_increase$name,diff_meta_increase$name), c(diff_gene_decrease$name,diff_meta_decrease$name), c(all_gene$name,all_meta$name),min_measured_num = 13, out=&quot;Extended&quot;,sort_plot=&quot;category&quot;) ggsave(&quot;result/TNBC_DA_all.pdf&quot;,DAscore_all$p,width=10,height = 8) write.table(DAscore_all$result,&quot;result/TNBC_DA_all.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) #------------------------------------------------------------------------------- # Step 3: Barplot #------------------------------------------------------------------------------- meta &lt;- data.table::fread(&quot;result/TNBC_DA_meta.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::filter(Measured_members_num &gt;= 3) %&gt;% dplyr::mutate(Type=&quot;metabolite&quot;) gene &lt;- data.table::fread(&quot;result/TNBC_DA_gene.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::filter(Measured_members_num &gt;= 10) %&gt;% dplyr::mutate(Type=&quot;gene&quot;) all &lt;- data.table::fread(&quot;result/TNBC_DA_all.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::filter(Measured_members_num &gt;= 13) %&gt;% dplyr::mutate(Type=&quot;all&quot;) result &lt;- rbind(meta,gene,all) %&gt;% dplyr::filter(!Pathway %in% c(&quot;Sulfur metabolism&quot;, &quot;Fructose and mannose metabolism&quot;, &quot;Ascorbate and aldarate metabolism&quot;, &quot;Galactose metabolism&quot;, &quot;Butanoate metabolism&quot;, &quot;Pentose and glucuronate interconversions&quot;, &quot;Starch and sucrose metabolism&quot;, &quot;Amino sugar and nucleotide sugar metabolism&quot;, &quot;Propanoate metabolism&quot;, &quot;Inositol phosphate metabolism&quot;, &quot;Tryptophan metabolism&quot;, &quot;Selenocompound metabolism&quot;)) %&gt;% dplyr::filter(!`Pathway Category` %in% c(&quot;Metabolism of terpenoids and polyketides&quot;, &quot;Metabolism of cofactors and vitamins&quot;, &quot;Biosynthesis of other secondary metabolites&quot;, &quot;Xenobiotics biodegradation and metabolism&quot;, &quot;Glycan biosynthesis and metabolism&quot;, &quot;Metabolism of other amino acids&quot;)) result_filter &lt;- result %&gt;% dplyr::arrange(DA_score) %&gt;% dplyr::arrange(`Pathway Category`) result_filter$Pathway &lt;- factor(result_filter$Pathway,levels=unique(result_filter$Pathway)) kegg_pathway_uniq &lt;- PathwayExtendData %&gt;% dplyr::select(kegg_pathwayname,kegg_category) %&gt;% dplyr::rename(&quot;PATHWAY&quot;=&quot;kegg_pathwayname&quot;) %&gt;% dplyr::rename(&quot;pathway_type&quot;=&quot;kegg_category&quot;) %&gt;% unique() result_filter$Type &lt;- factor(result_filter$Type,levels=c(&quot;metabolite&quot;, &quot;gene&quot;,&quot;all&quot;)) colp &lt;- c(&quot;Amino acid metabolism&quot; =&quot;#1B9E77&quot;, &quot;Carbohydrate metabolism&quot;=&quot;#D95F02&quot;, &quot;Glycan biosynthesis and metabolism&quot;=&quot;#1F78B4&quot;, &quot;Metabolism of cofactors and vitamins&quot;=&quot;#7570B3&quot;, &quot;Metabolism of terpenoids and polyketides&quot;=&quot;#BC80BD&quot;, &quot;Metabolism of other amino acids&quot;=&quot;#8DD3C7&quot;, &quot;Energy metabolism&quot;=&quot;#E7298A&quot;, &quot;Lipid metabolism&quot;=&quot;#66A61E&quot;, &quot;Nucleotide metabolism&quot;=&quot;#E6AB02&quot;, &quot;Biosynthesis of other secondary metabolites&quot;=&quot;#A6761D&quot;, &quot;Xenobiotics biodegradation and metabolism&quot;=&quot;#666666&quot;) p &lt;- ggplot2::ggplot(result_filter)+ ggplot2::geom_point(ggplot2::aes(x=Pathway,y=DA_score,size=log2(Measured_members_num),color=`Pathway Category`))+ ggplot2::geom_pointrange(ggplot2::aes(x=Pathway,y=DA_score,ymin=0,ymax=DA_score,color=`Pathway Category`))+ scale_color_manual(values=colp)+ ggplot2::coord_flip()+ ggplot2::xlab(NULL)+ ggplot2::theme_bw()+ facet_grid(. ~ Type,scales=&quot;free_x&quot;) ggsave(&quot;result/TNBC_ePDA.pdf&quot;,p,width=18,height = 7) The ePDA score captures the tendency for a pathway to exhibit increased or decreased levels of genes and metabolites that are statistically significant differences between the cluster 1 and cluster 2. 3.5.2.3 eSEAlyser Extended pathway set enrichment analysis. library(dplyr) library(MNet) library(ggplot2) #------------------------------------------------------------------------------- # Step 1: Input metabolome and transcriptome data for mllima analysis #------------------------------------------------------------------------------- all_meta &lt;- mlimma(meta_dat,group) all_gene &lt;- mlimma(gene_dat,group) all_result &lt;- rbind(all_meta,all_gene) all &lt;- all_result$logFC names(all) &lt;- all_result$name gene &lt;- all_gene$logFC names(gene) &lt;- all_gene$name meta &lt;- all_meta$logFC names(meta) &lt;- all_meta$name #------------------------------------------------------------------------------- # Step 2: eSEA #------------------------------------------------------------------------------- result_meta &lt;- eSEAlyser(meta,out=&quot;metabolite&quot;,minSize = 3) result_gene &lt;- eSEAlyser(gene,out = &quot;gene&quot;,minSize = 10) result_all &lt;- eSEAlyser(all,out=&quot;Extended&quot;,minSize = 13) kegg_pathway_uniq &lt;- PathwayExtendData %&gt;% dplyr::select(kegg_pathwayname,kegg_category) %&gt;% dplyr::rename(&quot;PATHWAY&quot;=&quot;kegg_pathwayname&quot;) %&gt;% dplyr::rename(&quot;pathway_type&quot;=&quot;kegg_category&quot;) %&gt;% unique() #------------------------------------------------------------------------------- # Step 3: Barplot #------------------------------------------------------------------------------- result_meta_filter &lt;- result_meta %&gt;% dplyr::filter(pval &lt; 0.5) %&gt;% dplyr::mutate(Type=ifelse(NES&gt;0,&quot;meta_Cluster1&quot;,&quot;meta_Cluster2&quot;)) result_gene_filter &lt;- result_gene %&gt;% dplyr::filter(pval &lt; 0.2) %&gt;% dplyr::mutate(Type=ifelse(NES&gt;0,&quot;gene_Cluster1&quot;,&quot;gene_Cluster2&quot;)) result_all_filter &lt;- result_all %&gt;% dplyr::filter(pval &lt; 0.2) %&gt;% dplyr::mutate(Type=ifelse(NES&gt;0,&quot;all_Cluster1&quot;,&quot;all_Cluster2&quot;)) result &lt;- rbind(result_meta_filter,result_gene_filter,result_all_filter) result_filter &lt;- result %&gt;% dplyr::left_join(kegg_pathway_uniq,by=c(&quot;pathway&quot;=&quot;PATHWAY&quot;)) %&gt;% dplyr::filter(pathway_type != &quot;Glycan biosynthesis and metabolism&quot;) %&gt;% dplyr::filter(!pathway_type %in% c(&quot;Metabolism of terpenoids and polyketides&quot;, &quot;Metabolism of cofactors and vitamins&quot;, &quot;Biosynthesis of other secondary metabolites&quot;, &quot;Xenobiotics biodegradation and metabolism&quot;, &quot;Metabolism of other amino acids&quot;)) %&gt;% dplyr::arrange(pval) pathway_hh &lt;- unique(result_filter$pathway_type) result_filter &lt;- result_filter %&gt;% dplyr::arrange(match(pathway_type,pathway_hh)) result_filter$pathway &lt;- factor(result_filter$pathway,levels = rev(unique(result_filter$pathway))) result_filter$pathway_type &lt;- factor(result_filter$pathway_type,levels=unique(kegg_pathway_uniq$pathway_type)) result_filter$Type &lt;- factor(result_filter$Type, levels=c(&quot;meta_Cluster1&quot;,&quot;meta_Cluster2&quot;, &quot;gene_Cluster1&quot;,&quot;gene_Cluster2&quot;, &quot;all_Cluster1&quot;,&quot;all_Cluster2&quot;)) colp &lt;- c(&quot;Amino acid metabolism&quot; =&quot;#1B9E77&quot;, &quot;Carbohydrate metabolism&quot;=&quot;#D95F02&quot;, &quot;Glycan biosynthesis and metabolism&quot;=&quot;#1F78B4&quot;, &quot;Metabolism of cofactors and vitamins&quot;=&quot;#7570B3&quot;, &quot;Metabolism of terpenoids and polyketides&quot;=&quot;#BC80BD&quot;, &quot;Metabolism of other amino acids&quot;=&quot;#8DD3C7&quot;, &quot;Energy metabolism&quot;=&quot;#E7298A&quot;, &quot;Lipid metabolism&quot;=&quot;#66A61E&quot;, &quot;Nucleotide metabolism&quot;=&quot;#E6AB02&quot;, &quot;Biosynthesis of other secondary metabolites&quot;=&quot;#A6761D&quot;, &quot;Xenobiotics biodegradation and metabolism&quot;=&quot;#666666&quot;) p &lt;- ggplot(result_filter,aes(pathway,-log10(pval))) + geom_bar(stat=&quot;identity&quot;,aes(fill=pathway_type))+ scale_fill_manual(values=colp)+ scale_y_continuous(expand = c(0, 0))+ facet_grid(. ~ Type,scales=&quot;free_x&quot;)+ theme_bw()+ labs(x=NULL)+ coord_flip() ggsave(&quot;result/TNBC_eSEA.pdf&quot;,p,width=15,height = 7) Extended gene and metabolite set enrichment analysis. 3.6 Apply to spatial metabolomics MSI-based spatially resolved metabolomics (SM) allow in situ screening of tumor initiation-, progression-, and metastasis-related metabolic biomarkers, thus allowing for the characterization of metabolic architecture of tumor and its surrounding microenvironment. Spatially resolved transcriptomics (ST) in cancer tissue transcriptome-wide profiling has greatly revealed tumor metabolic mechanisms. Gastric cancer ranks as one of the most prevalent malignant diseases, with an annual incidence of over 1,080,000 new cases and a mortality rate exceeding 760,000 deaths per year. Researchers found an integrated SM approach to explore the cell-specific metabolic remodeling. 3.6.1 PEA We conducted a reanalysis of both region-specific metabolite markers and gene markers provided by the author. Beyond the arginine and proline metabolism, our findings revealed dysregulation in glycine, serine, and threonine metabolism as well. Furthermore, our study demonstrated that glutathione metabolism is enriched not only at the metabolite level but also at the gene level, with a combined enrichment observed when considering both metabolites and genes. library(ggplot2) library(dplyr) library(MNet) #------------------------------------------------------------------------------- # Step 1: Input metabolome and transcriptome data for pathway analysis #------------------------------------------------------------------------------- kegg_pathway_uniq &lt;- PathwayExtendData %&gt;% dplyr::select(kegg_pathwayname,kegg_category) %&gt;% dplyr::rename(&quot;PATHWAY&quot;=&quot;kegg_pathwayname&quot;) %&gt;% dplyr::rename(&quot;pathway_type&quot;=&quot;kegg_category&quot;) %&gt;% unique() dat_gene &lt;- data.table::fread(&quot;input/special-gene-pathway.txt&quot;) %&gt;% as.data.frame() %&gt;% select(name,pvalue) %&gt;% mutate(type=&quot;gene&quot;) dat_metabolite &lt;- data.table::fread(&quot;input/special-metabolite-pathway.txt&quot;) %&gt;% as.data.frame() %&gt;% select(name,pvalue) %&gt;% mutate(type=&quot;metabolite&quot;) dat_all &lt;- data.table::fread(&quot;input/special-all-pathway.txt&quot;) %&gt;% as.data.frame() %&gt;% select(name,pvalue) %&gt;% mutate(type=&quot;all&quot;) result_1 &lt;- rbind(dat_gene,dat_metabolite,dat_all) %&gt;% dplyr::left_join(kegg_pathway_uniq,by=c(&quot;name&quot;=&quot;PATHWAY&quot;)) %&gt;% dplyr::arrange(pvalue) pathway_hh &lt;- unique(result_1$pathway_type) result_1 &lt;- result_1 %&gt;% dplyr::arrange(match(pathway_type,pathway_hh)) result_1$name &lt;- factor(result_1$name,levels = rev(unique(result_1$name))) result_1$pathway_type &lt;- factor(result_1$pathway_type,levels=unique(kegg_pathway_uniq$pathway_type)) result_1$type &lt;- factor(result_1$type,levels=c(&quot;metabolite&quot;,&quot;gene&quot;,&quot;all&quot;)) #------------------------------------------------------------------------------- # Step 2: Barplot #------------------------------------------------------------------------------- colp &lt;- c(&quot;Amino acid metabolism&quot; =&quot;#1B9E77&quot;, &quot;Carbohydrate metabolism&quot;=&quot;#D95F02&quot;,&quot;Glycan biosynthesis and metabolism&quot;=&quot;#1F78B4&quot;, &quot;Metabolism of cofactors and vitamins&quot;=&quot;#7570B3&quot;,&quot;Metabolism of terpenoids and polyketides&quot;=&quot;#BC80BD&quot;, &quot;Metabolism of other amino acids&quot;=&quot;#8DD3C7&quot;, &quot;Energy metabolism&quot;=&quot;#E7298A&quot;,&quot;Lipid metabolism&quot;=&quot;#66A61E&quot;,&quot;Nucleotide metabolism&quot;=&quot;#E6AB02&quot;, &quot;Biosynthesis of other secondary metabolites&quot;=&quot;#A6761D&quot;, &quot;Xenobiotics biodegradation and metabolism&quot;=&quot;#666666&quot;) p1 &lt;- ggplot(result_1,aes(name,-log10(pvalue)))+ geom_bar(stat=&quot;identity&quot;,aes(fill=pathway_type))+ scale_fill_manual(values=colp,name=&quot;Pathway Category&quot;)+ coord_flip()+ theme_bw()+ facet_wrap(vars(type),nrow=1)+ labs(x=NULL) ggsave(&quot;result/special-ePEA.pdf&quot;,p1,width=10,height = 5.5) Metabolite pathway enrichment analysis, genes pathway enrichment and extend pathway enrichment analysis. 3.7 Need help? If you have any questions about MNet, please don’t hesitate to email me (guituant2009@163.com). 3.7.1 Frequently Asked Questions Can not install dependent packages dnet If the ERROR is “Error: Failed to install ‘dnet’ from GitHub: Could not resolve host: api.github.com”, please try it again. BiocManager::install(&quot;hfang-bristol/dnet&quot;, dependencies=T) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
