[["index.html", "MNet Manual 1 OVERVIEW", " MNet Manual 2024-11-01 1 OVERVIEW Motivation Advance since any previous publication (if relevant): Integration of metabolomic and transcriptomic data is vital for pathway-centric, systems-biology understandings of disease (Nucleic Acids Research 2022 and Communications Biology 2023). Existing pathway knowledgebases, including but not limited to BiGG (Nucleic Acids Research 2020), KEGG (Nucleic Acids Research 2023), Reactome (Nucleic Acids Research 2024), SMPDB (Nucleic Acids Research 2014), and WikiPathways (Nucleic Acids Research 2024), provide metabolic pathway information on genes and metabolites. However, these databases lack the comprehensive integration of both metabolites and genes necessary for downstream pathway and subnetwork analyses, thereby limiting the exploration of potential therapeutic targets from a metabolomic perspective. Our well-established algorithm/tool called ‘dnet’ and its related software(Genome Medicine 2014, Genome Medicine 2016 and Nature Genetics 2019) have received nearly 400 citations over time (AS OF October 2024 according to Google Scholar). They excel at identifying core subnetwork using prior knowledge but has been limited to genomic or transcriptomic challenges, without extending its application to metabolomics. In this aspect, MNet supports pathway-centric, network-driven analyses, enabling by the compilation of the dbMNet knowledgebase, which includes dbKEGG and dbNet. The dbKEGG facilitates KEGG metabolic pathway-based extended pathway analysis to identify dysregulated metabolic pathways involving both metabolites and genes. The dbNet enhances metabolism-related subnetwork analysis by leveraging gene-metabolite and metabolite-metabolite information to identify subnetwork that best explain the input data. MNet Installation if(!require(BiocManager)){ install.packages(&quot;BiocManager&quot;) } if (!require(remotes)) { BiocManager::install(&quot;remotes&quot;, dependencies=T) } if (!require(devtools)) { BiocManager::install(&quot;devtools&quot;, dependencies=T) } BiocManager::install(&quot;hfang-bristol/dnet&quot;, dependencies=T) BiocManager::install(&quot;tuantuangui/MNet&quot;, dependencies=T) ## Check the package ‘MNet’ successfully installed library(help=MNet) "],["metabolic-subnetwork.html", "2 Metabolic Subnetwork 2.1 Met-Gene Subnetwork", " 2 Metabolic Subnetwork The metabolism-related subnetwork analysis is executed through an analyzer specifically designed to identify subnetwork based on input gene- and metabolite-level summary data. 2.1 Met-Gene Subnetwork 2.1.1 Interface Procedure Step 1: Enter Metabolite Data, GeneExp Data and Group Data, respectively. Step 2: Select Nodes Number. In R network analysis, nodes number refers to the total count of nodes, representing individual elements or entities within the network. Step 3: Select Figure Format and adjust figure width, height and DPI. Step 4: Click the User panel to view the input and output, and finally click Figure Download and export the analysis results. Demo data Expand the Demo Panel and click Metabolic Data to download demo data, which comprises an integrated analysis of metabolomic and transcriptomic profiles in triple-negative breast cancer. Metabolite Data: an interactive table for user-input metabolic data with rows corresponding to metabolites and columns corresponding to samples. GeneExp Data: an interactive table for user-input metabolic data with rows corresponding to genes and columns correspond to the samples. Group Data: Group information. 2.1.2 Results By utilising the dbNet knowledgebase and employing the dnet algorithm, MNet analyses a list of genes and metabolites along with their significance information, allowing a graphical display of the metabolism-related subnetwork that contains both genes and metabolites. Figure 1. Visualization of the identified optimal subnetwork that best explains the biological processes comparing two groups. The colors represent the logFC (logarithm of fold change) of genes, with red and green indicating different expression levels, while yellow and blue represent the logFC of metabolites, indicating varying levels. "],["extended-pathway-analyses.html", "3 Extended Pathway Analyses 3.1 ePEA 3.2 ePDA 3.3 eSEA", " 3 Extended Pathway Analyses 3.1 ePEA Extended pathway enrichment analysis 3.1.1 Interface Procedure Step 1: Enter Metabolite Data, GeneExp Data and Group Data, respectively. Step 2: Select Log(FoldChange), Padjust Cutoff and Pathway Pcutoff, respectively. Fold change: Identifies key metabolites with significant expression shifts between conditions, revealing potential metabolic alterations and pathway involvement in biological processes. Padjust Cutoff: Helps filter significant results by controlling for false positives, ensuring that only statistically robust pathways are identified for further investigation. Pathway Pcutoff: Sets a significance threshold, helping to identify pathways with meaningful changes while reducing the likelihood of false-positive findings. Step 3: Select Figure Format and adjust figure width, height and DPI. Step 4: Click the User panel to view the input and output, and finally click Figure Download and export the analysis results. Demo data Expand the Demo Panel and click Metabolic Data to download demo data, which comprises an integrated analysis of metabolomic and transcriptomic profiles in triple-negative breast cancer. Metabolite Data: an interactive table for user-input metabolic data with rows corresponding to metabolites and columns corresponding to samples. GeneExp Data: an interactive table for user-input metabolic data with rows corresponding to genes and columns correspond to the samples. Group Data: Group information. 3.1.2 Results Figure 1. Extended pathway enrichment analysis. (A) Barplot of up-regulated metabolic pathways corresponding to metabolites and genes. (B) Dotplot of up-regulated metabolic pathways corresponding to metabolites and genes. (C) Barplot of down-regulated metabolic pathways corresponding to metabolites and genes. (D) Dotplot of down-regulated metabolic pathways corresponding to metabolites and genes. 3.2 ePDA Extended pathway differential abundance (ePDA) score 3.2.1 Interface Procedure Step 1: Enter Metabolite Data, GeneExp Data and Group Data, respectively. Step 2: Select Log(FoldChange), Padjust Cutoff and Pathway Pcutoff, respectively. Fold change: Identifies key metabolites with significant expression shifts between conditions, revealing potential metabolic alterations and pathway involvement in biological processes. Padjust Cutoff: Helps filter significant results by controlling for false positives, ensuring that only statistically robust pathways are identified for further investigation. Pathway Pcutoff: Sets a significance threshold, helping to identify pathways with meaningful changes while reducing the likelihood of false-positive findings. Step 3: Select Figure Format and adjust figure width, height and DPI. Step 4: Click the User panel to view the input and output, and finally click Figure Download and export the analysis results. Demo data Expand the Demo Panel and click Metabolic Data to download demo data, which comprises an integrated analysis of metabolomic and transcriptomic profiles in triple-negative breast cancer. Metabolite Data: an interactive table for user-input metabolic data with rows corresponding to metabolites and columns corresponding to samples. GeneExp Data: an interactive table for user-input metabolic data with rows corresponding to genes and columns correspond to the samples. Group Data: Group information. 3.2.2 Results Figure 1. ePDA score captures the tendency for a pathway to exhibit increased or decreased levels of genes and metabolites that are statistically significant differences between two group. 3.3 eSEA Extended pathway set enrichment analysis 3.3.1 Interface Procedure Step 1: Enter Metabolite Data, GeneExp Data and Group Data, respectively. Step 2: Select Log(FoldChange), Padjust Cutoff and Pathway Pcutoff, respectively. Fold change: Identifies key metabolites with significant expression shifts between conditions, revealing potential metabolic alterations and pathway involvement in biological processes. Padjust Cutoff: Helps filter significant results by controlling for false positives, ensuring that only statistically robust pathways are identified for further investigation. Pathway Pcutoff: Sets a significance threshold, helping to identify pathways with meaningful changes while reducing the likelihood of false-positive findings. Step 3: Select Figure Format and adjust figure width, height and DPI. Step 4: Click the User panel to view the input and output, and finally click Figure Download and export the analysis results. Demo data Expand the Demo Panel and click Metabolic Data to download demo data, which comprises an integrated analysis of metabolomic and transcriptomic profiles in triple-negative breast cancer. Metabolite Data: an interactive table for user-input metabolic data with rows corresponding to metabolites and columns corresponding to samples. GeneExp Data: an interactive table for user-input metabolic data with rows corresponding to genes and columns correspond to the samples. Group Data: Group information. 3.3.2 Results Figure 1. Extended pathway set enrichment analysis. "],["figure-1.html", "4 Figure 1 4.1 (B) Knowledgebase Construction 4.2 (D) Deployment", " 4 Figure 1 Figure 1: Overview of the analytical model underlying MNet. A. The MNet model includes three primary components: Knowledgebase, Algorithm, and Deployment. Their interconnected relationships are illustrated. B. The Knowledgebase component comprises gene-metabolite pairs sourced from five primary data sources. This comprehensive knowledgebase forms the foundation for both extended pathway and subnetwork analyses (see the next Algorithm component). C. The Algorithm component includes methods for extended pathway and metabolism-related subnetwork analyses. Extended pathway analyses (implemented in ePEA, ePDA, and eSEA) consider both genes and metabolites, while metabolism-related subnetwork analysis employs our previously well-established algorithm ‘dnet’ to explore interactions involving genes and metabolites. D. The Deployment component includes its use via programmatically accessible R functions and an intuitive Shiny user interface. 4.1 (B) Knowledgebase Construction 4.1.1 dbKEGG dbKEGG for extended pathway analysis and dbNet for metabolism-related subnetwork analysis. 4.1.1.1 KEGG pathway’s metabolite and gene This is the metabolites and the genes in every metabolism KEGG pathway. library(KEGGREST) library(dplyr) ## All human metabolic pathways pathway_meta &lt;- data.table::fread(&quot;input/pathway_hsa.txt&quot;,sep=&quot;\\t&quot;,header=F) %&gt;% as.data.frame() ## Extract corresponding genes and metabolites for each pathway result_gene &lt;- data.frame() result_compound &lt;- data.frame() for (i in 1:length(pathway_meta$V2)){ print(pathway_meta$V2[i]) path &lt;- keggGet(pathway_meta$V2[i]) ## Extract the genetic information of this pathway gene.info &lt;- path[[1]]$GENE %&gt;% as.data.frame() %&gt;% dplyr::rename(&quot;V1&quot;=&quot;.&quot;) %&gt;% tidyr::separate(V1,sep=&quot;;&quot;,&quot;V1&quot;) %&gt;% dplyr::pull(V1) ## Extract gene symbols from genes gene.symbol &lt;- unique(gene.info[1:length(gene.info)%%2 == 0]) #gene.id &lt;- gene.info[1:length(gene.info)%%2 == 1] ## Generate a data frame matching gene symbol and Entrez ID gene.df &lt;- data.frame(type=&quot;gene&quot;,name = gene.symbol,kegg_pathwayid=pathway_meta$V2[i],kegg_pathwayname=path[[1]]$PATHWAY_MAP,kegg_category =pathway_meta$V1[i]) result_gene &lt;- rbind(result_gene,gene.df) ## Extract metabolite information for this pathway if (length(path[[1]]$COMPOUND)&gt;0) { compound.info &lt;- path[[1]]$COMPOUND %&gt;% as.data.frame() %&gt;% dplyr::rename(&quot;V1&quot;=&quot;.&quot;) %&gt;% rownames() ## Generate compound and corresponding pathway information compound.df &lt;- data.frame(type=&quot;metabolite&quot;,name = compound.info,kegg_pathwayid=pathway_meta$V2[i],kegg_pathwayname=path[[1]]$PATHWAY_MAP,kegg_category =pathway_meta$V1[i]) result_compound &lt;- rbind(result_compound,compound.df) } } result &lt;- rbind(result_gene,result_compound) %&gt;% as_tibble() dim(result) write.table(result,&quot;result/KEGGpathway_metabolite_gene-v20240427.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) 4.1.2 dbNet 4.1.2.1 KEGG metabolite-metabolite pairs and metabolite-gene pairs KEGG’s reaction and compound’s download ## the code is runing in 2024.04.28 library(KEGGREST) library(plyr) source(&quot;input/get.kegg.all.R&quot;) source(&quot;input/get.kegg.byId.R&quot;) ## Metabolic reactions and metabolite annotation information in the KEGG database keggAll = get.kegg.all() saveRDS(keggAll, file = &quot;result/keggAll-v20240428.RDS&quot;) dim(keggAll$reaction) dim(keggAll$compound) write.csv(keggAll$reaction,file = &quot;result/keggAllreaction_v20240428.csv&quot;,row.names = F) write.csv(keggAll$compound,file = &quot;result/keggAllcompound_v20240428.csv&quot;,row.names = F) Downloading the enzyme and its corresponding gene information from the htext,and extract the gene and the enzyme’s relationship ## Download the htext file. curl https://www.genome.jp/kegg-bin/get_htext?hsa01000 -o result/hsa01000.keg grep &quot;^E&quot; result/hsa01000.keg | sed &#39;s/E //g&#39;|cut -d&quot; &quot; -f2 |cut -d&quot;;&quot; -f1 &gt;result/gene.txt grep &quot;^E&quot; result/hsa01000.keg | sed &#39;s/E //g&#39;|sed &#39;s/\\[EC\\:/ /g&#39; |sed &#39;s/\\] //g&#39; |cut -f3 &gt;result/enzyme.txt sed &#39;s/\\[EC\\:/ /g&#39; paste result/gene.txt result/enzyme.txt |grep -v &quot;D-dopachrome&quot; |grep -v &quot;cytochrome&quot;|grep -v &quot;putative&quot; &gt;result/gene_enzyme.txt ## The gene_enzyme.txt is like this: ADH5^I1.1.1.284 1.1.1.1$ ADH1A^I1.1.1.1$ Extracting the metabolite-gene pairs and metabolite-metabolite pairs library(dplyr) ## Transformed the enzyme and its corresponding gene to one-to-one relationship gene_enzyme &lt;- data.table::fread(&quot;result/gene_enzyme.txt&quot;,header=F) %&gt;% as.data.frame() %&gt;% tidyr::separate_rows(&quot;V2&quot;,sep=&quot; &quot;) %&gt;% unique() %&gt;% dplyr::rename(&quot;gene_name&quot;=&quot;V1&quot;) %&gt;% dplyr::rename(&quot;enzyme&quot;=&quot;V2&quot;) ## all the reaction in kegg a &lt;- read.csv(&quot;result/keggAllreaction_v20240428.csv&quot;) # get all the metabolite and its corresponding gene from all the reaction in kegg ## the metabolite-gene pairs are exacted from every compound in the equation and the gene with the enzyme metabolite_gene &lt;- a %&gt;% dplyr::select(c(&quot;EQUATION&quot;,&quot;ENZYME&quot;)) %&gt;% tidyr::separate_rows(EQUATION,sep=&quot; &lt;=&gt; &quot;) %&gt;% tidyr::separate_rows(EQUATION,sep=&quot; &quot;) %&gt;% dplyr::filter(grepl(&quot;^C&quot;,EQUATION)) %&gt;% tidyr::separate_rows(ENZYME,sep=&quot;///&quot;) %&gt;% dplyr::rename(&quot;compound&quot;=&quot;EQUATION&quot;) %&gt;% dplyr::rename(&quot;enzyme&quot;=&quot;ENZYME&quot;) %&gt;% dplyr::left_join(gene_enzyme,by=&quot;enzyme&quot;) %&gt;% dplyr::filter(!is.na(gene_name)) %&gt;% dplyr::select(-&quot;enzyme&quot;) %&gt;% dplyr::mutate(compound=gsub(&quot;[(]n[)]&quot;,&quot;&quot;,compound)) %&gt;% dplyr::mutate(compound=gsub(&quot;[(]m[)]&quot;,&quot;&quot;,compound)) %&gt;% dplyr::mutate(compound=gsub(&quot;[(]n[+]1[)]&quot;,&quot;&quot;,compound)) %&gt;% dplyr::mutate(compound=gsub(&quot;[(]n[+]m[)]&quot;,&quot;&quot;,compound)) %&gt;% dplyr::mutate(compound=gsub(&quot;[(]n[-]1[)]&quot;,&quot;&quot;,compound)) %&gt;% unique() %&gt;% dplyr::mutate(src_type=&quot;metabolite&quot;) %&gt;% dplyr::mutate(dest_type=&quot;gene&quot;) %&gt;% dplyr::rename(&quot;src&quot;=&quot;compound&quot;) %&gt;% dplyr::rename(&quot;dest&quot;=&quot;gene_name&quot;) %&gt;% dplyr::select(c(&quot;src_type&quot;,&quot;src&quot;,&quot;dest_type&quot;,&quot;dest&quot;)) # get all the metabolite-metabolite pairs in the reactions ## get the metabolite from the EQUATION, the metabolite-metabolite pairs are exacted from every compound in left of equation and every compound in right of equation. metabolite_metabolite &lt;- a %&gt;% dplyr::select(c(&quot;EQUATION&quot;,&quot;ENZYME&quot;)) %&gt;% tidyr::separate(EQUATION,c(&quot;a&quot;,&quot;b&quot;),sep=&quot; &lt;=&gt; &quot;)%&gt;% tidyr::separate_rows(a,sep=&quot; &quot;) %&gt;% tidyr::separate_rows(b,sep=&quot; &quot;) %&gt;% dplyr::filter(grepl(&quot;^C&quot;,a)) %&gt;% dplyr::filter(grepl(&quot;^C&quot;,b)) %&gt;% dplyr::select(c(&quot;a&quot;,&quot;b&quot;)) %&gt;% unique() %&gt;% dplyr::mutate(metabolite_1=gsub(&quot;[(]n[)]&quot;,&quot;&quot;,a)) %&gt;% dplyr::mutate(metabolite_1=gsub(&quot;[(]n[+]m[)]&quot;,&quot;&quot;,metabolite_1)) %&gt;% dplyr::mutate(metabolite_1=gsub(&quot;[(]side&quot;,&quot;&quot;,metabolite_1)) %&gt;% dplyr::mutate(metabolite_1=gsub(&quot;[(]m[+]n[)]&quot;,&quot;&quot;,metabolite_1)) %&gt;% dplyr::mutate(metabolite_1=gsub(&quot;[(]n[+]1[)]&quot;,&quot;&quot;,metabolite_1)) %&gt;% dplyr::mutate(metabolite_1=gsub(&quot;[(]m[)]&quot;,&quot;&quot;,metabolite_1)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]n[)]&quot;,&quot;&quot;,b)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]n[+]m[)]&quot;,&quot;&quot;,metabolite_2)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]side&quot;,&quot;&quot;,metabolite_2)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]m[+]n[)]&quot;,&quot;&quot;,metabolite_2)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]n[+]1[)]&quot;,&quot;&quot;,metabolite_2)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]m[)]&quot;,&quot;&quot;,metabolite_2)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]n[-]1[)]&quot;,&quot;&quot;,metabolite_2)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]x[)]&quot;,&quot;&quot;,metabolite_2)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]n[-]x[)]&quot;,&quot;&quot;,metabolite_2)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]n[+]2[)]&quot;,&quot;&quot;,metabolite_2)) %&gt;% dplyr::mutate(metabolite_2=gsub(&quot;[(]m[-]1[)]&quot;,&quot;&quot;,metabolite_2)) %&gt;% dplyr::select(-c(&quot;a&quot;,&quot;b&quot;)) %&gt;% dplyr::filter(metabolite_1 != metabolite_2) %&gt;% dplyr::mutate(src_type=&quot;metabolite&quot;) %&gt;% dplyr::mutate(dest_type=&quot;metabolite&quot;) %&gt;% dplyr::rename(&quot;src&quot;=&quot;metabolite_1&quot;) %&gt;% dplyr::rename(&quot;dest&quot;=&quot;metabolite_2&quot;) %&gt;% dplyr::select(c(&quot;src_type&quot;,&quot;src&quot;,&quot;dest_type&quot;,&quot;dest&quot;)) write.table(metabolite_gene,&quot;result/KEGG_metabolite_gene_v20240428.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) write.table(metabolite_metabolite,&quot;result/KEGG_metabolite_metabolite_v20240428.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) 4.1.2.2 Graphite Download all the data from graphite library(graphite) library(clipper) library(dplyr) kpaths &lt;- pathways(&quot;hsapiens&quot;, &quot;kegg&quot;) kpaths_result &lt;- data.frame() for (i in 1:length(kpaths)) { kid &lt;- attributes(kpaths[[i]])$id ktitle &lt;- attributes(kpaths[[i]])$title kpaths_1 &lt;- convertIdentifiers(convertIdentifiers(kpaths[[i]], &quot;symbol&quot;),&quot;KEGGCOMP&quot;) kpaths_result_temp &lt;- edges(kpaths_1,&quot;mixed&quot;) %&gt;% dplyr::mutate(pathwayid=kid) %&gt;% dplyr::mutate(pathway=ktitle) kpaths_result &lt;- rbind(kpaths_result,kpaths_result_temp) } write.table(kpaths_result,&quot;result/Graphite/gene-metabolite-kegg.txt&quot;,quote=F,sep=&quot;\\t&quot;,row.names=F) spaths &lt;- pathways(&quot;hsapiens&quot;, &quot;smpdb&quot;) smpdb_result &lt;- data.frame() for (i in 1:length(spaths)) { kid &lt;- attributes(spaths[[i]])$id ktitle &lt;- attributes(spaths[[i]])$title smpdb_1 &lt;- convertIdentifiers(convertIdentifiers(spaths[[i]], &quot;symbol&quot;),&quot;KEGGCOMP&quot;) smpdb_result_temp &lt;- edges(smpdb_1, &quot;mixed&quot;) %&gt;% dplyr::mutate(pathwayid=kid) %&gt;% dplyr::mutate(pathway=ktitle) smpdb_result &lt;- rbind(smpdb_result,smpdb_result_temp) } write.table(smpdb_result,&quot;result/Graphite/gene-metabolite-smpdb.txt&quot;,quote=F,sep=&quot;\\t&quot;,row.names=F) wikipaths &lt;- pathways(&quot;hsapiens&quot;, &quot;wikipathways&quot;) wikipaths_result &lt;- data.frame() for (i in 1:length(wikipaths)) { kid &lt;- attributes(wikipaths[[i]])$id ktitle &lt;- attributes(wikipaths[[i]])$title wikipaths_1 &lt;- convertIdentifiers(convertIdentifiers(wikipaths[[i]], &quot;symbol&quot;),&quot;KEGGCOMP&quot;) wikipaths_result_temp &lt;- edges(wikipaths_1,&quot;mixed&quot;) %&gt;% dplyr::mutate(pathwayid=kid) %&gt;% dplyr::mutate(pathway=ktitle) wikipaths_result &lt;- rbind(wikipaths_result,wikipaths_result_temp) } write.table(wikipaths_result,&quot;result/Graphite/gene-metabolite-wikipaths.txt&quot;,quote=F,sep=&quot;\\t&quot;,row.names=F) reactomepaths &lt;- pathways(&quot;hsapiens&quot;, &quot;reactome&quot;) reactome_result &lt;- data.frame() for (i in 1:length(reactomepaths)) { kid &lt;- attributes(reactomepaths[[i]])$id ktitle &lt;- attributes(reactomepaths[[i]])$title reactome_1 &lt;- convertIdentifiers(convertIdentifiers(reactomepaths[[i]], &quot;symbol&quot;),&quot;KEGGCOMP&quot;) reactome_result_temp &lt;- edges(reactome_1,&quot;mixed&quot;) %&gt;% dplyr::mutate(pathwayid=kid) %&gt;% dplyr::mutate(pathway=ktitle) reactome_result &lt;- rbind(reactome_result,reactome_result_temp) } write.table(reactome_result,&quot;result/Graphite/gene-metabolite-reactome.txt&quot;,quote=F,sep=&quot;\\t&quot;,row.names=F) Download the information of metabolism pathways ## Wikipathway # Download all gpml files of homo-species from Wikipathway and extract the file names ls &gt; all.txt rev all.txt|cut -d&quot;_&quot; -f2|rev &gt;all.1.txt touch test.txt cat /dev/null &gt; test.txt cat all.1.txt |while read line do grep TERM homo/*${line}_*.gpml |cut -d&quot;&gt;&quot; -f2|cut -d&quot;&lt;&quot; -f1| tr -s &quot;\\n&quot; &quot;;&quot;|sed -e &#39;s/;$//g&#39; | sed &quot;s/^/${line} /&quot; &gt;&gt;test.txt done grep -i metabolic test.txt &gt;test_metabolic.txt cat all.1.txt | while read line do grep TERM homo/*${line}_*.gpml | cut -d&quot;&gt;&quot; -f2 | cut -d&quot;&lt;&quot; -f1 | tr &#39;\\n&#39; &#39;;&#39; | sed -e &#39;s/;$//&#39; | sed &quot;s/^/${line} /&quot; &gt;&gt; test.txt done grep -i metabolic test.txt &gt;test_metabolic.txt ## SMPDB wget https://smpdb.ca/downloads/smpdb_pathways.csv.zip ## Reactome #R-HSA-1430728 is the metabolism, then choose the hierarchical is lower than it ## KEGG #choose the metabolism pathway Extract the data of metabolism library(dplyr) library(MNet) kegg_data_metabolism &lt;- data.table::fread(&quot;result/Graphite/gene-metabolite-kegg.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::filter(pathway %in% unique(kegg_pathway$PATHWAY)) %&gt;% dplyr::select(-c(&quot;direction&quot;,&quot;type&quot;)) %&gt;% unique() %&gt;% dplyr::filter(src_type ==&quot;KEGGCOMP&quot; | dest_type==&quot;KEGGCOMP&quot;) %&gt;% dplyr::mutate(src_new = ifelse(src_type==&quot;KEGGCOMP&quot;,src,dest), dest_new = ifelse(src_type==&quot;KEGGCOMP&quot;,dest,src), src_type_new=ifelse(src_type==&quot;KEGGCOMP&quot;,src_type,dest_type), dest_type_new=ifelse(src_type==&quot;KEGGCOMP&quot;,dest_type,src_type)) %&gt;% dplyr::mutate(src_new1=ifelse(src_type==&quot;KEGGCOMP&quot; &amp; dest_type==&quot;KEGGCOMP&quot;, ifelse(src_new&gt;dest_new,src_new,dest_new), src_new)) %&gt;% dplyr::mutate(dest_new1=ifelse(src_type==&quot;KEGGCOMP&quot; &amp; dest_type==&quot;KEGGCOMP&quot;, ifelse(src_new&gt;dest_new,dest_new,src_new), dest_new)) %&gt;% dplyr::select(-c(&quot;src_type&quot;,&quot;src&quot;,&quot;dest_type&quot;,&quot;dest&quot;,&quot;src_new&quot;,&quot;dest_new&quot;)) %&gt;% dplyr::rename(&quot;src_type&quot;=&quot;src_type_new&quot;,&quot;src&quot;=&quot;src_new1&quot;,&quot;dest_type&quot;=&quot;dest_type_new&quot;,&quot;dest&quot;=&quot;dest_new1&quot;) %&gt;% dplyr::select(c(&quot;src_type&quot;,&quot;src&quot;,&quot;dest_type&quot;,&quot;dest&quot;,&quot;pathwayid&quot;,&quot;pathway&quot;)) %&gt;% unique() write.table(kegg_data_metabolism,&quot;result/Graphite/gene-metabolite-kegg_metabolism.txt&quot;,quote=F,sep=&quot;\\t&quot;,row.names=F) ## SMPDB metabolism_pathway &lt;- read.csv(&quot;result/Graphite/smpdb_pathways.csv&quot;) %&gt;% dplyr::filter(Subject==&quot;Metabolic&quot;) smpdb_data &lt;- data.table::fread(&quot;result/Graphite/gene-metabolite-smpdb.txt&quot;) %&gt;% as.data.frame() smpdb_metabolism &lt;- smpdb_data %&gt;% dplyr::filter(pathway %in% metabolism_pathway$Name) %&gt;% dplyr::filter(src_type==&quot;KEGGCOMP&quot;|dest_type==&quot;KEGGCOMP&quot;) %&gt;% dplyr::filter(!grepl(&quot;De Novo&quot;,pathway)) %&gt;% dplyr::mutate(pathway_new=ifelse(grepl(&quot;Phosphatidylcholine Biosynthesis&quot;,pathway), &quot;Phosphatidylcholine Biosynthesis&quot;,pathway)) %&gt;% dplyr::mutate(pathway_new=ifelse(grepl(&quot;Cardiolipin Biosynthesis&quot;,pathway_new), &quot;Cardiolipin Biosynthesis&quot;,pathway_new)) %&gt;% dplyr::mutate(pathway_new=ifelse(grepl(&quot;Phosphatidylethanolamine Biosynthesis&quot;,pathway_new), &quot;Phosphatidylethanolamine Biosynthesis&quot;,pathway_new)) %&gt;% dplyr::mutate(pathway_new=ifelse(grepl(&quot;Mitochondrial Beta-Oxidation&quot;,pathway_new), &quot;Mitochondrial Beta-Oxidation&quot;,pathway_new)) %&gt;% dplyr::select(-&quot;pathway&quot;) %&gt;% dplyr::rename(&quot;pathway&quot;=&quot;pathway_new&quot;) %&gt;% dplyr::mutate(src_new = ifelse(src_type==&quot;KEGGCOMP&quot;,src,dest), dest_new = ifelse(src_type==&quot;KEGGCOMP&quot;,dest,src), src_type_new=ifelse(src_type==&quot;KEGGCOMP&quot;,src_type,dest_type), dest_type_new=ifelse(src_type==&quot;KEGGCOMP&quot;,dest_type,src_type)) %&gt;% dplyr::mutate(src_new1=ifelse(src_type==&quot;KEGGCOMP&quot; &amp; dest_type==&quot;KEGGCOMP&quot;, ifelse(src_new&gt;dest_new,src_new,dest_new), src_new)) %&gt;% dplyr::mutate(dest_new1=ifelse(src_type==&quot;KEGGCOMP&quot; &amp; dest_type==&quot;KEGGCOMP&quot;, ifelse(src_new&gt;dest_new,dest_new,src_new), dest_new)) %&gt;% dplyr::select(-c(&quot;src_type&quot;,&quot;src&quot;,&quot;dest_type&quot;,&quot;dest&quot;,&quot;src_new&quot;,&quot;dest_new&quot;)) %&gt;% dplyr::rename(&quot;src_type&quot;=&quot;src_type_new&quot;,&quot;src&quot;=&quot;src_new1&quot;,&quot;dest_type&quot;=&quot;dest_type_new&quot;,&quot;dest&quot;=&quot;dest_new1&quot;) %&gt;% dplyr::select(c(&quot;src_type&quot;,&quot;src&quot;,&quot;dest_type&quot;,&quot;dest&quot;,&quot;pathwayid&quot;,&quot;pathway&quot;)) %&gt;% unique() ## Reactome # metabolism pathway reactome_metabolism_pathwayid &lt;- data.table::fread(&quot;result/Graphite/ReactomePathwaysRelation.txt&quot;,header=F) %&gt;% as.data.frame() %&gt;% dplyr::filter(V1==&quot;R-HSA-1430728&quot;) reactome_metabolism_data &lt;- data.table::fread(&quot;result/Graphite/gene-metabolite-reactome.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::filter(pathwayid %in% reactome_metabolism_pathwayid$V2) %&gt;% dplyr::filter(src_type==&quot;KEGGCOMP&quot;|dest_type==&quot;KEGGCOMP&quot;) %&gt;% dplyr::mutate(src_new = ifelse(src_type==&quot;KEGGCOMP&quot;,src,dest), dest_new = ifelse(src_type==&quot;KEGGCOMP&quot;,dest,src), src_type_new=ifelse(src_type==&quot;KEGGCOMP&quot;,src_type,dest_type), dest_type_new=ifelse(src_type==&quot;KEGGCOMP&quot;,dest_type,src_type)) %&gt;% dplyr::mutate(src_new1=ifelse(src_type==&quot;KEGGCOMP&quot; &amp; dest_type==&quot;KEGGCOMP&quot;, ifelse(src_new&gt;dest_new,src_new,dest_new), src_new)) %&gt;% dplyr::mutate(dest_new1=ifelse(src_type==&quot;KEGGCOMP&quot; &amp; dest_type==&quot;KEGGCOMP&quot;, ifelse(src_new&gt;dest_new,dest_new,src_new), dest_new)) %&gt;% dplyr::select(-c(&quot;src_type&quot;,&quot;src&quot;,&quot;dest_type&quot;,&quot;dest&quot;,&quot;src_new&quot;,&quot;dest_new&quot;)) %&gt;% dplyr::rename(&quot;src_type&quot;=&quot;src_type_new&quot;,&quot;src&quot;=&quot;src_new1&quot;,&quot;dest_type&quot;=&quot;dest_type_new&quot;,&quot;dest&quot;=&quot;dest_new1&quot;) %&gt;% dplyr::select(c(&quot;src_type&quot;,&quot;src&quot;,&quot;dest_type&quot;,&quot;dest&quot;,&quot;pathwayid&quot;,&quot;pathway&quot;)) %&gt;% unique() write.table(reactome_metabolism_data,&quot;result/Graphite/gene-metabolite-reactome_metabolism.txt&quot;,quote=F,sep=&quot;\\t&quot;,row.names=F) ## Wikipathways wikipathway_metabolism_id &lt;- data.table::fread(&quot;result/wikipath/test_metabolic.txt&quot;,header=F) %&gt;% as.data.frame() wikipathway_data &lt;- data.table::fread(&quot;result/Graphite/gene-metabolite-wikipaths.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::filter(pathwayid %in% wikipathway_metabolism_id$V1) %&gt;% dplyr::filter(src_type==&quot;KEGGCOMP&quot;|dest_type==&quot;KEGGCOMP&quot;) %&gt;% dplyr::mutate(src_new = ifelse(src_type==&quot;KEGGCOMP&quot;,src,dest), dest_new = ifelse(src_type==&quot;KEGGCOMP&quot;,dest,src), src_type_new=ifelse(src_type==&quot;KEGGCOMP&quot;,src_type,dest_type), dest_type_new=ifelse(src_type==&quot;KEGGCOMP&quot;,dest_type,src_type)) %&gt;% dplyr::mutate(src_new1=ifelse(src_type==&quot;KEGGCOMP&quot; &amp; dest_type==&quot;KEGGCOMP&quot;, ifelse(src_new&gt;dest_new,src_new,dest_new), src_new)) %&gt;% dplyr::mutate(dest_new1=ifelse(src_type==&quot;KEGGCOMP&quot; &amp; dest_type==&quot;KEGGCOMP&quot;, ifelse(src_new&gt;dest_new,dest_new,src_new), dest_new)) %&gt;% dplyr::select(-c(&quot;src_type&quot;,&quot;src&quot;,&quot;dest_type&quot;,&quot;dest&quot;,&quot;src_new&quot;,&quot;dest_new&quot;)) %&gt;% dplyr::rename(&quot;src_type&quot;=&quot;src_type_new&quot;,&quot;src&quot;=&quot;src_new1&quot;,&quot;dest_type&quot;=&quot;dest_type_new&quot;,&quot;dest&quot;=&quot;dest_new1&quot;) %&gt;% dplyr::select(c(&quot;src_type&quot;,&quot;src&quot;,&quot;dest_type&quot;,&quot;dest&quot;,&quot;pathwayid&quot;,&quot;pathway&quot;)) %&gt;% unique() write.table(wikipathway_data,&quot;result/Graphite/gene-metabolite-wikipathway_metabolism.txt&quot;,quote=F,sep=&quot;\\t&quot;,row.names=F) ## Combine the data from database kegg, wikipathway, reactome, smpdb and then uniq the data. cat gene-metabolite-*metabolism.txt |cut -f1-4,6|sort|uniq &gt;result.graphite.txt Combine the data from database kegg, wikipathway, reactome, smpdb and then uniq the data cat gene-metabolite-*metabolism.txt |cut -f1-4,6|sort|uniq &gt;result.graphite.txt 4.1.2.3 BiGG Down all the models in the BiGG ## Down all the models in the BiGG curl &#39;http://bigg.ucsd.edu/api/v2/models&#39; ## Then, choice the model from Homo sapiens,then in reserve model is iAT_PLT_636, iAB_RBC_283, RECON1, Recon3D. ## Get all the reactions names in the 4 human models. curl &#39;http://bigg.ucsd.edu/api/v2/models/iAT_PLT_636/reactions&#39; &gt;result/BiGG/iAT_PLT_636.reactions curl &#39;http://bigg.ucsd.edu/api/v2/models/iAB_RBC_283/reactions&#39; &gt;result/BiGG/iAB_RBC_283.reactions curl &#39;http://bigg.ucsd.edu/api/v2/models/RECON1/reactions&#39; &gt;result/BiGG/RECON1.reactions curl &#39;http://bigg.ucsd.edu/api/v2/models/Recon3D/reactions&#39; &gt;result/BiGG/Recon3D.reactions ## Change the json reaction names to txt file. tt&lt;-jsonlite::stream_in(file(&quot;result/BiGG/iAB_RBC_283.reactions&quot;),pagesize = 100) write.table(tt$results[[1]],&quot;result/BiGG/iAB_RBC_283.reactions.txt&quot;,quote=F,row.names=F,col.names=F) tt&lt;-jsonlite::stream_in(file(&quot;result/BiGG/iAT_PLT_636.reactions&quot;),pagesize = 100) write.table(tt$results[[1]],&quot;result/BiGG/iAT_PLT_636.reactions.txt&quot;,quote=F,row.names=F,col.names=F) tt&lt;-jsonlite::stream_in(file(&quot;result/BiGG/RECON1.reactions&quot;),pagesize = 100) write.table(tt$results[[1]],&quot;result/BiGG/RECON1.reactions.txt&quot;,quote=F,row.names=F,col.names=F) tt&lt;-jsonlite::stream_in(file(&quot;result/BiGG/Recon3D.reactions&quot;),pagesize = 100) write.table(tt$results[[1]],&quot;result/BiGG/Recon3D.reactions.txt&quot;,quote=F,row.names=F,col.names=F) Download the every reaction Download the every reaction. curl &#39;http://bigg.ucsd.edu/api/v2/models/iAT_PLT_636/reactions/10FTHF6GLUtm&#39; &gt;result/BiGG/iAT_PLT_636/reaction/json/10FTHF6GLUtm.txt curl &#39;http://bigg.ucsd.edu/api/v2/models/iAT_PLT_636/reactions/10FTHF7GLUtl&#39; &gt;result/BiGG/iAT_PLT_636/reaction/json/10FTHF7GLUtl.txt Get the information in every reaction. ## The R script that change the reaction information in json to txt. args &lt;- commandArgs(T) library(dplyr) mydata &lt;- paste0(&quot;result/BiGG/&quot;,args[1],&quot;/reaction/json/&quot;,args[2],&quot;.txt&quot;) recon1&lt;-jsonlite::stream_in(file(mydata),pagesize = 100) metabolite_biggid &lt;- recon1$metabolites[[1]]$bigg_id metabolites &lt;- recon1$metabolites[[1]]$name compartment_bigg_id &lt;- recon1$metabolites[[1]]$compartment_bigg_id gene &lt;- recon1$results[[1]]$genes[[1]]$name subsystem &lt;- recon1$results[[1]]$subsystem model=args[1] if (length(gene)&gt;0) { dd &lt;- data.frame(metabolite_biggid1=paste(metabolite_biggid,compartment_bigg_id,sep=&quot;_&quot;),src_type=&quot;metabolite&quot;,src=metabolites,metabolite_biggid2=NA,dest_type=&quot;gene&quot;,dest=paste(gene,collapse=&quot;;&quot;),subsystems=subsystem,models=model) }else { dd &lt;- data.frame() } if (length(unique(recon1$metabolites[[1]]$stoichiometry))&gt;1) { metabolites_stoichiometry1 &lt;- recon1$metabolites[[1]] %&gt;% dplyr::filter(stoichiometry&gt;0) metabolites_stoichiometry2 &lt;- recon1$metabolites[[1]] %&gt;% dplyr::filter(stoichiometry&lt;0) result &lt;- data.frame() for (i in 1:nrow(metabolites_stoichiometry1)) { for (j in 1:nrow(metabolites_stoichiometry2)) { temp &lt;- data.frame(metabolite_biggid1=paste(metabolites_stoichiometry1$bigg_id[i],metabolites_stoichiometry1$compartment_bigg_id[i],sep=&quot;_&quot;),src_type=&quot;metabolite&quot;,src=metabolites_stoichiometry1$name[i], metabolite_biggid2=paste(metabolites_stoichiometry2$bigg_id[j],metabolites_stoichiometry2$compartment_bigg_id[j],sep=&quot;_&quot;),dest_type=&quot;metabolite&quot;,dest=metabolites_stoichiometry2$name[j],subsystems=subsystem,models=model) result &lt;- rbind(result,temp) } } result_final &lt;- rbind(dd,result) write.table(result_final,paste0(&quot;result/BiGG/&quot;,args[1],&quot;/reaction/txt/&quot;,args[2],&quot;.txt&quot;),quote=F,sep=&quot;\\t&quot;,row.names=F) }else { print(0) } Run the R script that change the reaction information in json to txt in batch. cat result/BiGG/iAB_RBC_283.reaction.txt |while read line do Rscript reaction_json2txt.R iAB_RBC_283 $line done cat result/BiGG/iAT_PLT_636.reaction.txt |while read line do Rscript reaction_json2txt.R iAT_PLT_636 $line done cat result/BiGG/RECON1.reaction.txt |while read line do Rscript reaction_json2txt.R RECON1 $line done cat result/BiGG/Recon3D.reaction.txt |while read line do Rscript reaction_json2txt.R Recon3D $line done Combine all the reactions info include the gene-metabolite pair,the metabolite-metabolite pair,subsystem,model. cat result/BiGG/iAB_RBC_283/reaction/txt/*|grep -v metabolite_biggid1 &gt;result/BiGG/cat_reaction_info_iAB_RBC_283.txt cat result/BiGG/iAT_PLT_636/reaction/txt/*|grep -v metabolite_biggid1 &gt;result/BiGG/cat_reaction_info_iAT_PLT_636.txt cat result/BiGG/Recon3D/reaction/txt/*|grep -v metabolite_biggid1 &gt;result/BiGG/cat_reaction_info_Recon3D.txt cat result/BiGG/RECON1/reaction/txt/*|grep -v metabolite_biggid1 &gt;result/BiGG/cat_reaction_info_RECON1.txt Exact all the metabolites names in every model in BiGG Dwonload the metabolites in every model in BiGG. curl &#39;http://bigg.ucsd.edu/api/v2/models/iAB_RBC_283/metabolites&#39; &gt;result/BiGG/iAB_RBC_283_metabolite.json curl &#39;http://bigg.ucsd.edu/api/v2/models/iAT_PLT_636/metabolites&#39; &gt;result/BiGG/iAT_PLT_636_metabolite.json curl &#39;http://bigg.ucsd.edu/api/v2/models/Recon3D/metabolites&#39; &gt;result/BiGG/Recon3D_metabolite.json curl &#39;http://bigg.ucsd.edu/api/v2/models/RECON1/metabolites&#39; &gt;result/BiGG/RECON1_metabolite.json Change the json to txt and extract metabolite bigg_id. args=commandArgs(T) recon1&lt;-jsonlite::stream_in(file(paste0(&quot;result/BiGG/&quot;,args[1],&quot;_metabolite.json&quot;)),pagesize = 100) aa &lt;- recon1$results[[1]] write.table(aa$bigg_id,paste0(&quot;result/BiGG/&quot;,args[1],&quot;_metabolite.txt&quot;),row.names = F,col.names=F,sep=&quot;\\t&quot;,quote=F) ## Use the script. Rscript metabolitename_json2txt.R iAB_RBC_283 Rscript metabolitename_json2txt.R iAT_PLT_636 Rscript metabolitename_json2txt.R RECON1 Rscript metabolitename_json2txt.R Recon3D Download every metabolite information. curl &#39;http://bigg.ucsd.edu/api/v2/models/iAB_RBC_283/metabolites/13dpg_c&#39; &gt;result/BiGG/iAB_RBC_283_metabolites/13dpg_c.json curl &#39;http://bigg.ucsd.edu/api/v2/models/iAB_RBC_283/metabolites/23dpg_c&#39; &gt;result/BiGG/iAB_RBC_283_metabolites/23dpg_c.json curl &#39;http://bigg.ucsd.edu/api/v2/models/iAB_RBC_283/metabolites/2kmb_c&#39; &gt;result/BiGG/iAB_RBC_283_metabolites/2kmb_c.json curl &#39;http://bigg.ucsd.edu/api/v2/models/iAB_RBC_283/metabolites/2pg_c&#39; &gt;result/BiGG/iAB_RBC_283_metabolites/2pg_c.json The R script that exact the KEGG ID in metabolite file. args &lt;- commandArgs(T) mydata &lt;- paste0(&quot;result/BiGG/&quot;,args[1],&quot;/metabolite/json/&quot;,args[2],&quot;.json&quot;) # &quot;iAB_RBC_283_metabolites/glu__L_c.json&quot; recon1&lt;-jsonlite::stream_in(file(mydata),pagesize = 100) kegg_id &lt;- paste(recon1$database_links$`KEGG Compound`[[1]]$id,collapse = &quot;;&quot;) name &lt;- recon1$name result &lt;- data.frame(name=name,kegg_id=kegg_id,source=args[1]) write.table(result,paste0(&quot;result/BiGG/&quot;,args[1],&quot;/metabolite/txt/&quot;,args[2],&quot;.txt&quot;),quote=F,row.names = F,sep=&quot;\\t&quot;) Run the R script that exact the KEGG ID in the metabolite file. cat result/BiGG/iAB_RBC_283_metabolite.txt|while read line do Rscript metabolite_json2txt.R iAB_RBC_283 ${line} done cat result/BiGG/iAT_PLT_636_metabolite.txt |while read line do Rscript metabolite_json2txt.R iAT_PLT_636 ${line} done cat result/BiGG/RECON1_metabolite.txt|while read line do Rscript metabolite_json2txt.R RECON1 ${line} done cat result/BiGG/Recon3D_metabolite.txt|while read line do Rscript metabolite_json2txt.R Recon3D ${line} done Combine all the metabolite in 1 file for every model. cat result/BiGG/iAB_RBC_283/metabolite/txt/*_metabolite.txt|grep -v kegg_id &gt;result/BiGG/iAB_RBC_283_metabolite_all.txt cat result/BiGG/iAT_PLT_636/metabolite/txt/*_metabolite.txt |grep -v kegg_id &gt;result/BiGG/iAT_PLT_636_metabolite_all.txt cat result/BiGG/RECON1/metabolite/txt/*_metabolite.txt|grep -v kegg_id &gt;result/BiGG/RECON1_metabolite_all.txt cat result/BiGG/Recon3D/metabolite/txt/*_metabolite.txt|grep -v kegg_id &gt;result/BiGG/Recon3D_metabolite_all.txt The R script that change the metabolite name to kegg id in the final output args &lt;- commandArgs(T) library(dplyr) metabolite_info &lt;- data.table::fread(paste0(&quot;result/BiGG/&quot;,args[1],&quot;_metabolite_all.txt&quot;),header=F) %&gt;% as.data.frame() gene_metabolite_pairs &lt;- data.table::fread(paste0(&quot;result/BiGG/cat_reaction_info_&quot;,args[1],&quot;.txt&quot;),header=F) %&gt;% as.data.frame() %&gt;% dplyr::left_join(metabolite_info,by=c(&quot;V3&quot;=&quot;V1&quot;)) %&gt;% dplyr::left_join(metabolite_info,by=c(&quot;V6&quot;=&quot;V1&quot;)) %&gt;% dplyr::mutate(src=ifelse(V2.y==&quot;&quot; | is.na(V2.y), V3.x,V2.y)) %&gt;% dplyr::mutate(dest=ifelse(V2==&quot;&quot; | is.na(V2), V6,V2)) %&gt;% dplyr::select(c(&quot;V2.x&quot;,&quot;src&quot;,&quot;V5&quot;,&quot;dest&quot;,&quot;V7&quot;,&quot;V8&quot;)) %&gt;% dplyr::rename(&quot;src_type&quot;=&quot;V2.x&quot;,&quot;dest_type&quot;=&quot;V5&quot;,&quot;subsystems&quot;=&quot;V7&quot;,&quot;model&quot;=&quot;V8&quot;) %&gt;% tidyr::separate_rows(src,sep=&quot;;&quot;) %&gt;% tidyr::separate_rows(dest,sep=&quot;;&quot;) %&gt;% dplyr::filter(src != dest) %&gt;% unique() write.table(gene_metabolite_pairs,paste0(&quot;result/BiGG/result_&quot;,args[1],&quot;.txt&quot;),quote=F,row.names = F,sep=&quot;\\t&quot;) ## Use the R script that change the metabolite name to KEGG ID. Rscript result.R iAB_RBC_283 Rscript result.R iAT_PLT_636 Rscript result.R RECON1 Rscript result.R Recon3D cat result_*.txt |cut -f1-5 |sort|uniq &gt;result/BiGG/result.BiGG.txt Combine the data from BiGG and graphite cat result/BiGG/result.BiGG.txt ../graphite/result.graphite.txt |sed s/KEGGCOMP/metabolite/g |sed s/SYMBOL/gene/g |sort|uniq &gt;gene-metabolite_BiGG_graphite.txt dat &lt;- data.table::fread(&quot;/Users/guituantuan/Desktop/projects/database/gene-metabolite/gene-metabolite_BiGG_graphite.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::filter(keggId!=gene) %&gt;% dplyr::mutate(keggId_new=ifelse(src_type==&quot;metabolite&quot; &amp; dest_type==&quot;metabolite&quot;, ifelse(keggId&gt;gene,keggId,gene), keggId)) %&gt;% dplyr::mutate(gene_new=ifelse(src_type==&quot;metabolite&quot; &amp; dest_type==&quot;metabolite&quot;, ifelse(keggId&gt;gene,gene,keggId), gene)) %&gt;% dplyr::select(-c(&quot;keggId&quot;,&quot;gene&quot;)) %&gt;% dplyr::rename(&quot;keggId&quot;=&quot;keggId_new&quot;,&quot;gene&quot;=&quot;gene_new&quot;) %&gt;% dplyr::select(c(&quot;src_type&quot;,&quot;keggId&quot;,&quot;dest_type&quot;,&quot;gene&quot;,&quot;subsystems&quot;)) dat$subsystems &lt;- stringr::str_to_title(dat$subsystems) kegg_pathway1 &lt;- kegg_pathway %&gt;% dplyr::mutate(pathway1=stringr::str_to_title(PATHWAY)) %&gt;% dplyr::select(c(&quot;pathway1&quot;,&quot;pathway_type&quot;)) %&gt;% dplyr::rename(&quot;subsystems&quot;=&quot;pathway1&quot;) %&gt;% unique() pathway_type_1 &lt;- data.table::fread(&quot;pathway_type.txt&quot;,header=F) %&gt;% as.data.frame() names(pathway_type_1) &lt;- c(&quot;subsystems&quot;,&quot;pathway_type&quot;) aa &lt;- rbind(kegg_pathway1,pathway_type_1) dat2 &lt;- dat %&gt;% dplyr::mutate(subsystems=ifelse(subsystems==&quot;Urea Cycle/Amino Group Metabolism&quot;,&quot;Urea Cycle&quot;,subsystems)) %&gt;% dplyr::mutate(subsystems=ifelse(subsystems==&quot;Nucleotides&quot;,&quot;Nucleotide Interconversion&quot;,subsystems)) %&gt;% dplyr::mutate(subsystems=ifelse(subsystems==&quot;Citric Acid Cycle&quot;,&quot;TCA Cycle&quot;,subsystems)) %&gt;% dplyr::mutate(subsystems=ifelse(subsystems==&quot;Citrate Cycle (Tca Cycle)&quot;,&quot;TCA Cycle&quot;,subsystems)) %&gt;% dplyr::mutate(subsystems=ifelse(subsystems==&quot;The Citric Acid (Tca) Cycle And Respiratory Electron Transport&quot;,&quot;TCA Cycle&quot;,subsystems)) %&gt;% dplyr::mutate(subsystems=ifelse(grepl(&quot;Vitamin&quot;,subsystems),&quot;Vitamin Metabolism&quot;,subsystems)) %&gt;% dplyr::mutate(subsystems=ifelse(grepl(&quot;Tca Cycle&quot;,subsystems),&quot;TCA Cycle&quot;,subsystems)) %&gt;% dplyr::mutate(subsystems=ifelse(grepl(&quot;Amino Acid&quot;,subsystems),&quot;Amino Acid Metabolism&quot;,subsystems)) %&gt;% dplyr::mutate(subsystems=ifelse(grepl(&quot;Coa &quot;,subsystems),&quot;CoA Metabolism&quot;,subsystems)) %&gt;% dplyr::mutate(subsystems=ifelse(grepl(&quot;Fatty Acid&quot;,subsystems),&quot;Fatty Acid Metabolism&quot;,subsystems)) %&gt;% dplyr::mutate(subsystems=ifelse(subsystems==&quot;Fatty Acid Oxidation&quot;,&quot;Fatty Acid Metabolism&quot;,subsystems)) %&gt;% dplyr::mutate(subsystems=ifelse(subsystems==&quot;Aminosugar Metabolism&quot;,&quot;Amino Sugar Metabolism&quot;,subsystems)) %&gt;% unique() %&gt;% dplyr::left_join(aa,by=&quot;subsystems&quot;) write.table(dat2,&quot;/Users/guituantuan/Desktop/projects/database/gene-metabolite/gene-metabolite_BiGG_graphite_uniq.txt&quot;, quote=F,row.names=F,sep=&quot;\\t&quot;) 4.2 (D) Deployment MNet Source Files MNet Web server 4.2.1 Installing R 4.4.1 for Ubuntu 20 4.2.2 Installing R Packages 4.2.3 Installing shiny-sever 4.2.4 Shiny App Server and Logs 4.2.5 Firewall: firewalld or ufw 4.2.6 Apache2 Config "],["figure-2.html", "5 Figure 2 5.1 (A1) ePEA 5.2 (A2) ePDA 5.3 (A3) eSEA 5.4 (B) Subnetwork", " 5 Figure 2 Figure 2: Integrated analyses uniquely supported by MNet. A. MNet offers integrated analysis, featuring extended pathway enrichment analysis (ePEA), extended pathway differential abundance analysis (ePDA), and extended pathway set enrichment analysis (eSEA). B. MNet constructs a knowledgebase and thus supports metabolism-related subnetwork analysis. It enables the extraction of the optimal subnetwork from the dbNet knowledgebase for the input genes and metabolites, thereby elucidating the underlying mechanisms that best explain the input data. 5.1 (A1) ePEA library(MNet) library(dplyr) library(ggplot2) group[which(group==&quot;normal&quot;)] &lt;- &quot;a&quot; group[which(group==&quot;tumor&quot;)] &lt;- &quot;normal&quot; group[which(group==&quot;a&quot;)] &lt;- &quot;tumor&quot; all_meta &lt;- mlimma(meta_dat,group) all_gene &lt;- mlimma(gene_dat,group) diff_gene &lt;- all_gene %&gt;% dplyr::filter(abs(logFC) &gt; 1) %&gt;% dplyr::filter(adj.P.Val &lt; 0.05) diff_meta &lt;- all_meta %&gt;% dplyr::filter(abs(logFC) &gt; 0.58) %&gt;% dplyr::filter(adj.P.Val &lt; 0.05) diff_all &lt;- rbind(diff_gene,diff_meta) result_gene &lt;- PathwayAnalysis(diff_gene$name,out=&quot;gene&quot;,p_cutoff=1.5) result_meta &lt;- PathwayAnalysis(diff_meta$name,out=&quot;metabolite&quot;,p_cutoff=1.5) result_all &lt;- PathwayAnalysis(diff_all$name,out=&quot;Extended&quot;,p_cutoff=1.5) pathway_all &lt;- rbind(result_gene$output,result_meta$output,result_all$output) %&gt;% dplyr::filter(adjp &lt; 0.001) %&gt;% dplyr::pull(name) %&gt;% unique() result_gene_filter &lt;- result_gene$output %&gt;% as.data.frame() %&gt;% dplyr::select(name,nOverlap,adjp) %&gt;% dplyr::filter(name %in% pathway_all) %&gt;% dplyr::mutate(type=&quot;gene&quot;) result_meta_filter &lt;- result_meta$output %&gt;% as.data.frame() %&gt;% dplyr::select(name,nOverlap,adjp) %&gt;% dplyr::filter(name %in% pathway_all) %&gt;% dplyr::mutate(type=&quot;metabolite&quot;) result_all_filter &lt;- result_all$output %&gt;% as.data.frame() %&gt;% dplyr::select(name,nOverlap,adjp) %&gt;% dplyr::filter(name %in% pathway_all) %&gt;% dplyr::mutate(type=&quot;all&quot;) all &lt;- rbind(result_gene_filter,result_meta_filter,result_all_filter) %&gt;% dplyr::mutate(adjp=ifelse(adjp &lt; 1.3e-04 ,1.3e-04,adjp)) %&gt;% dplyr::mutate(type=factor(type,levels=c(&quot;metabolite&quot;,&quot;gene&quot;,&quot;all&quot;))) p &lt;- ggplot(all,aes(type,name))+ geom_point(aes(size=nOverlap,color=-log10(adjp)))+ theme_bw()+ theme(panel.border = element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.line = element_line(colour = &quot;black&quot;))+ scale_color_gradient(low=&quot;white&quot;,high=&quot;red&quot;)+ labs(x=NULL,y=&quot;Pathway name&quot;) ggsave(&quot;result/2A_01.ePEA.pdf&quot;,p,width=6,height = 4) 5.2 (A2) ePDA library(MNet) library(dplyr) library(ggplot2) ## Gene diff_gene_increase &lt;- all_gene %&gt;% dplyr::filter(logFC &gt; 2) %&gt;% dplyr::filter(adj.P.Val &lt; 0.01) diff_gene_decrease &lt;- all_gene %&gt;% dplyr::filter(logFC &lt; -2) %&gt;% dplyr::filter(adj.P.Val &lt; 0.01) DA_gene &lt;- DAscore(diff_gene_increase$name, diff_gene_decrease$name,all_gene$name, min_measured_num = 10, out=&quot;gene&quot;,sort_plot=&quot;category&quot;) write.table(DA_gene$result,&quot;result/2A_02.DA_gene.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) gene &lt;- data.table::fread(&quot;result/2A_02.DA_gene.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::filter(Measured_members_num &gt;= 10) %&gt;% dplyr::mutate(Type=&quot;gene&quot;) ## Metabolite diff_meta_increase &lt;- all_meta %&gt;% dplyr::filter(logFC &gt; 2) %&gt;% dplyr::filter(P.Value &lt; 0.01) diff_meta_decrease &lt;- all_meta %&gt;% dplyr::filter(logFC &lt; 2) %&gt;% dplyr::filter(P.Value &lt; 0.01) DAscore_meta &lt;- DAscore(diff_meta_increase$name, diff_meta_decrease$name,all_meta$name, min_measured_num = 3, out=&quot;metabolite&quot;,sort_plot=&quot;category&quot;) write.table(DAscore_meta$result,&quot;result/2A_02.DA_meta.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) meta &lt;- data.table::fread(&quot;result/2A_02.DA_meta.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::filter(Measured_members_num &gt;= 3) %&gt;% dplyr::mutate(Type=&quot;metabolite&quot;) ## Gene + Metabolite DAscore_all &lt;- DAscore(c(diff_gene_increase$name,diff_meta_increase$name), c(diff_gene_decrease$name,diff_meta_decrease$name), c(all_gene$name,all_meta$name),min_measured_num = 13, out=&quot;Extended&quot;,sort_plot=&quot;category&quot;) write.table(DAscore_all$result,&quot;result/2A_02.DA_all.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) all &lt;- data.table::fread(&quot;result/2A_02.DA_all.txt&quot;) %&gt;% as.data.frame() %&gt;% dplyr::filter(Measured_members_num &gt;= 13) %&gt;% dplyr::mutate(Type=&quot;metabolite+gene&quot;) result &lt;- rbind(meta,gene,all) %&gt;% dplyr::filter(!Pathway %in% c(&quot;Sulfur metabolism&quot;, &quot;Fructose and mannose metabolism&quot;, &quot;Ascorbate and aldarate metabolism&quot;, &quot;Galactose metabolism&quot;, &quot;Butanoate metabolism&quot;, &quot;Pentose and glucuronate interconversions&quot;, &quot;Starch and sucrose metabolism&quot;, &quot;Amino sugar and nucleotide sugar metabolism&quot;, &quot;Propanoate metabolism&quot;, &quot;Inositol phosphate metabolism&quot;, &quot;Tryptophan metabolism&quot;, &quot;Selenocompound metabolism&quot;)) %&gt;% dplyr::filter(!`Pathway Category` %in% c(&quot;Metabolism of terpenoids and polyketides&quot;, &quot;Metabolism of cofactors and vitamins&quot;, &quot;Biosynthesis of other secondary metabolites&quot;, &quot;Xenobiotics biodegradation and metabolism&quot;, &quot;Glycan biosynthesis and metabolism&quot;, &quot;Metabolism of other amino acids&quot;)) result_filter &lt;- result %&gt;% dplyr::filter(Pathway %in% c(&quot;Sphingolipid metabolism&quot;,&quot;Glycerophospholipid metabolism&quot;, &quot;Fatty acid biosynthesis&quot;,&quot;Glycerolipid metabolism&quot;, &quot;Biosynthesis of unsaturated fatty acids&quot;, &quot;Fatty acid elongation&quot;, &quot;Steroid biosynthesis&quot;,&quot;Purine metabolism&quot;, &quot;Pyrimidine metabolism&quot;, &quot;Histidine metabolism&quot;,&quot;Tyrosine metabolism&quot;)) %&gt;% dplyr::mutate(DA_score= ifelse(Pathway==&quot;Histidine metabolism&quot; &amp; Type==&quot;metabolite&quot;,-0.2, ifelse(Pathway==&quot;Sphingolipid metabolism&quot; &amp; Type==&quot;metabolite&quot;,-0.2,DA_score))) %&gt;% dplyr::arrange(DA_score) %&gt;% dplyr::arrange(`Pathway Category`) result_filter$Pathway &lt;- factor(result_filter$Pathway,levels=unique(result_filter$Pathway)) kegg_pathway_uniq &lt;- PathwayExtendData %&gt;% dplyr::select(kegg_pathwayname,kegg_category) %&gt;% dplyr::rename(&quot;PATHWAY&quot;=&quot;kegg_pathwayname&quot;) %&gt;% dplyr::rename(&quot;pathway_type&quot;=&quot;kegg_category&quot;) %&gt;% unique() result_filter$Type &lt;- factor(result_filter$Type,levels=c(&quot;metabolite&quot;,&quot;gene&quot;,&quot;metabolite+gene&quot;)) p &lt;- ggplot2::ggplot(result_filter)+ ggplot2::geom_point(ggplot2::aes(x=Pathway,y=DA_score,size=log2(Measured_members_num),color=`Pathway Category`))+ ggplot2::geom_pointrange(ggplot2::aes(x=Pathway,y=DA_score,ymin=0,ymax=DA_score,color=`Pathway Category`))+ scale_color_manual(values=RColorBrewer::brewer.pal(11, &quot;Set3&quot;), name=&quot;Pathway Category&quot;, breaks=unique(kegg_pathway_uniq$pathway_type))+ theme_bw()+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = &quot;black&quot;))+ geom_hline(yintercept=c(0))+ ggplot2::coord_flip()+ ggplot2::xlab(NULL)+ facet_grid(. ~ Type,scales=&quot;free_x&quot;) ggsave(&quot;result/2A_02.ePDA.pdf&quot;,p,width=10,height = 4) 5.3 (A3) eSEA library(MNet) library(dplyr) library(ggplot2) all_meta &lt;- mlimma(meta_dat,group) all_gene &lt;- mlimma(gene_dat,group) all_result &lt;- rbind(all_meta,all_gene) all &lt;- all_result$logFC names(all) &lt;- all_result$name gene &lt;- all_gene$logFC names(gene) &lt;- all_gene$name meta &lt;- all_meta$logFC names(meta) &lt;- all_meta$name result_meta &lt;- ESEA(meta,out=&quot;metabolite&quot;,minSize = 3) result_gene &lt;- ESEA(gene,out = &quot;gene&quot;,minSize = 10) result_all &lt;- ESEA(all,out=&quot;Extended&quot;,minSize = 13) pathway_msea &lt;- rbind(result_meta,result_gene,result_all) %&gt;% dplyr::filter(pval &lt; 0.01) %&gt;% dplyr::pull(pathway) %&gt;% unique() length(pathway_msea) msea_meta_filter &lt;- result_meta %&gt;% dplyr::filter(pathway %in% pathway_msea) %&gt;% dplyr::select(pathway,pval,NES) %&gt;% dplyr::mutate(type=&quot;metabolite&quot;) msea_gene_filter &lt;- result_gene %&gt;% dplyr::filter(pathway %in% pathway_msea) %&gt;% dplyr::select(pathway,pval,NES) %&gt;% dplyr::mutate(type=&quot;gene&quot;) msea_all_filter &lt;- result_all %&gt;% dplyr::filter(pathway %in% pathway_msea) %&gt;% dplyr::select(pathway,pval,NES) %&gt;% dplyr::mutate(type=&quot;metabolite+gene&quot;) %&gt;% dplyr::arrange(NES) result &lt;- rbind(msea_meta_filter,msea_gene_filter,msea_all_filter) %&gt;% dplyr::mutate(pval=ifelse(pval &lt; 8.048183e-04,8.048183e-04,pval)) %&gt;% dplyr::mutate(pathway=factor(pathway,levels=msea_all_filter$pathway)) %&gt;% dplyr::mutate(type=factor(type,levels = c(&quot;metabolite&quot;,&quot;gene&quot;,&quot;metabolite+gene&quot;))) p &lt;- ggplot(result,aes(pathway,NES,fill=-log10(pval)))+ geom_bar(stat=&quot;identity&quot;)+ theme_bw()+ geom_hline(yintercept=c(0))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ scale_fill_gradient(low=&quot;white&quot;,high=&quot;red&quot;)+ coord_flip()+ facet_grid(. ~ type,scales=&quot;free_x&quot;)+ labs(x=&quot;Pathway name&quot;) ggsave(&quot;result/2A_03.ESEA_barplot.pdf&quot;,p,width=10,height = 5) p_Oxi &lt;- pMSEA(&quot;Oxidative phosphorylation&quot;,all,out=&quot;Extended&quot;) ggsave(&quot;result/2A_03.plot_msea_oxipho_metabolite.pdf&quot;,p_Oxi,width=5,height = 5) 5.4 (B) Subnetwork library(MNet) library(dplyr) library(ggplot2) diff_meta &lt;- mlimma(meta_dat,group) diff_gene &lt;- mlimma(gene_dat,group) names(diff_meta)[4] &lt;- &quot;p_value&quot; names(diff_gene)[4] &lt;- &quot;p_value&quot; pdf(&quot;result/2B_pdent.pdf&quot;,width=10,height = 10) a &lt;- pdnet(diff_meta,diff_gene,nsize=60) dev.off() node &lt;- a$node_result write.table(node,&quot;result/2B_pdnet_node.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) edge &lt;- a$edge_result write.table(edge,&quot;result/2B_pdnet_edge.txt&quot;,quote=F,row.names=F,sep=&quot;\\t&quot;) metabolite &lt;- node %&gt;% dplyr::filter(type==&quot;metabolite&quot;) gene &lt;- node %&gt;% dplyr::filter(type==&quot;gene&quot;) result_metabolite &lt;- PathwayAnalysis(metabolite$name,out=&quot;metabolite&quot;,test=&quot;hypergeo&quot;) result_gene &lt;- PathwayAnalysis(gene$name,out=&quot;gene&quot;,test=&quot;hypergeo&quot;) result_all &lt;- PathwayAnalysis(c(gene$name,metabolite$name),out=&quot;Extended&quot;,test=&quot;hypergeo&quot;) write.table(result_metabolite$output,&quot;result/2B_pdnet_metabolite_enrichment.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) write.table(result_gene$output,&quot;result/2B_pdnet_gene_enrichment.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) write.table(result_all$output,&quot;result/2B_pdnet_all_enrichment.txt&quot;,quote=F,row.names = F,sep=&quot;\\t&quot;) kegg_pathway_uniq &lt;- PathwayExtendData %&gt;% dplyr::select(kegg_pathwayname,kegg_category) %&gt;% dplyr::rename(&quot;PATHWAY&quot;=&quot;kegg_pathwayname&quot;) %&gt;% dplyr::rename(&quot;pathway_type&quot;=&quot;kegg_category&quot;) %&gt;% unique() result &lt;- rbind(result_metabolite$output %&gt;% dplyr::mutate(type=&quot;metabolite&quot;), result_gene$output %&gt;% dplyr::mutate(type=&quot;gene&quot;), result_all$output %&gt;% dplyr::mutate(type=&quot;all&quot;)) %&gt;% dplyr::left_join(kegg_pathway_uniq,by=c(&quot;name&quot;=&quot;PATHWAY&quot;)) %&gt;% dplyr::filter(pathway_type != &quot;Glycan biosynthesis and metabolism&quot;) %&gt;% dplyr::filter(!name %in% c(&quot;Fructose and mannose metabolism&quot;, &quot;Amino sugar and nucleotide sugar metabolism&quot;, &quot;Galactose metabolism&quot;, &quot;Ascorbate and aldarate metabolism&quot;, &quot;Pentose and glucuronate interconversions&quot;)) %&gt;% dplyr::arrange(pvalue) pathway_hh &lt;- unique(result$pathway_type) result &lt;- result %&gt;% dplyr::filter(!pathway_type %in% c(&quot;Metabolism of terpenoids and polyketides&quot;, &quot;Metabolism of cofactors and vitamins&quot;, &quot;Biosynthesis of other secondary metabolites&quot;, &quot;Metabolism of other amino acids&quot;, &quot;Xenobiotics biodegradation and metabolism&quot;)) %&gt;% dplyr::arrange(match(pathway_type,pathway_hh)) result$name &lt;- factor(result$name,levels = rev(unique(result$name))) result$pathway_type &lt;- factor(result$pathway_type,levels=unique(kegg_pathway_uniq$pathway_type)) result$type &lt;- factor(result$type,levels=c(&quot;metabolite&quot;,&quot;gene&quot;,&quot;all&quot;)) p1 &lt;- ggplot(result,aes(name,-log10(pvalue)))+ geom_bar(stat=&quot;identity&quot;,aes(fill=pathway_type))+ scale_fill_manual(values=RColorBrewer::brewer.pal(11, &quot;Set3&quot;), name=&quot;Pathway Category&quot;, breaks=unique(kegg_pathway_uniq$pathway_type))+ scale_y_continuous(expand = c(0, 0))+ coord_flip()+ facet_grid(. ~ type,scales=&quot;free_x&quot;)+ theme_bw()+ labs(x=NULL) ggsave(&quot;result/2B_pdnet_epe.pdf&quot;,p1,width=10,height = 5) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
